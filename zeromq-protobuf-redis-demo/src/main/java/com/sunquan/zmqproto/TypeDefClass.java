// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typedef.proto

package com.sunquan.zmqproto;

public final class TypeDefClass {
  private TypeDefClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface TypeDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sunquan.zmqproto.TypeDef)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.sunquan.zmqproto.TypeDef}
   */
  public static final class TypeDef extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sunquan.zmqproto.TypeDef)
      TypeDefOrBuilder {
    // Use TypeDef.newBuilder() to construct.
    private TypeDef(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TypeDef(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TypeDef defaultInstance;
    public static TypeDef getDefaultInstance() {
      return defaultInstance;
    }

    public TypeDef getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TypeDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sunquan.zmqproto.TypeDefClass.internal_static_com_sunquan_zmqproto_TypeDef_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sunquan.zmqproto.TypeDefClass.internal_static_com_sunquan_zmqproto_TypeDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sunquan.zmqproto.TypeDefClass.TypeDef.class, com.sunquan.zmqproto.TypeDefClass.TypeDef.Builder.class);
    }

    public static com.google.protobuf.Parser<TypeDef> PARSER =
        new com.google.protobuf.AbstractParser<TypeDef>() {
      public TypeDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TypeDef(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TypeDef> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.AuthType}
     */
    public enum AuthType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL = 1;</code>
       */
      NORMAL(0, 1),
      /**
       * <code>WARNING = 2;</code>
       */
      WARNING(1, 2),
      /**
       * <code>END = 3;</code>
       */
      END(2, 3),
      ;

      /**
       * <code>NORMAL = 1;</code>
       */
      public static final int NORMAL_VALUE = 1;
      /**
       * <code>WARNING = 2;</code>
       */
      public static final int WARNING_VALUE = 2;
      /**
       * <code>END = 3;</code>
       */
      public static final int END_VALUE = 3;


      public final int getNumber() { return value; }

      public static AuthType valueOf(int value) {
        switch (value) {
          case 1: return NORMAL;
          case 2: return WARNING;
          case 3: return END;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AuthType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AuthType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AuthType>() {
              public AuthType findValueByNumber(int number) {
                return AuthType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(0);
      }

      private static final AuthType[] VALUES = values();

      public static AuthType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private AuthType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.AuthType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.EmsEditType}
     */
    public enum EmsEditType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>EMS_ADD = 1;</code>
       */
      EMS_ADD(0, 1),
      /**
       * <code>EMS_DEL = 2;</code>
       */
      EMS_DEL(1, 2),
      /**
       * <code>EMS_MDF = 3;</code>
       */
      EMS_MDF(2, 3),
      /**
       * <code>EMS_MDFPWD = 4;</code>
       */
      EMS_MDFPWD(3, 4),
      ;

      /**
       * <code>EMS_ADD = 1;</code>
       */
      public static final int EMS_ADD_VALUE = 1;
      /**
       * <code>EMS_DEL = 2;</code>
       */
      public static final int EMS_DEL_VALUE = 2;
      /**
       * <code>EMS_MDF = 3;</code>
       */
      public static final int EMS_MDF_VALUE = 3;
      /**
       * <code>EMS_MDFPWD = 4;</code>
       */
      public static final int EMS_MDFPWD_VALUE = 4;


      public final int getNumber() { return value; }

      public static EmsEditType valueOf(int value) {
        switch (value) {
          case 1: return EMS_ADD;
          case 2: return EMS_DEL;
          case 3: return EMS_MDF;
          case 4: return EMS_MDFPWD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EmsEditType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<EmsEditType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EmsEditType>() {
              public EmsEditType findValueByNumber(int number) {
                return EmsEditType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(1);
      }

      private static final EmsEditType[] VALUES = values();

      public static EmsEditType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private EmsEditType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.EmsEditType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.PortfolioEditType}
     */
    public enum PortfolioEditType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PTE_ADD = 1;</code>
       */
      PTE_ADD(0, 1),
      /**
       * <code>PTE_DEL = 2;</code>
       */
      PTE_DEL(1, 2),
      ;

      /**
       * <code>PTE_ADD = 1;</code>
       */
      public static final int PTE_ADD_VALUE = 1;
      /**
       * <code>PTE_DEL = 2;</code>
       */
      public static final int PTE_DEL_VALUE = 2;


      public final int getNumber() { return value; }

      public static PortfolioEditType valueOf(int value) {
        switch (value) {
          case 1: return PTE_ADD;
          case 2: return PTE_DEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PortfolioEditType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PortfolioEditType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PortfolioEditType>() {
              public PortfolioEditType findValueByNumber(int number) {
                return PortfolioEditType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(2);
      }

      private static final PortfolioEditType[] VALUES = values();

      public static PortfolioEditType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PortfolioEditType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.PortfolioEditType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.PortfolioItemEditType}
     */
    public enum PortfolioItemEditType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PTIE_ADD = 1;</code>
       */
      PTIE_ADD(0, 1),
      /**
       * <code>PTIE_DEL = 2;</code>
       */
      PTIE_DEL(1, 2),
      /**
       * <code>PTIE_MDF = 3;</code>
       */
      PTIE_MDF(2, 3),
      ;

      /**
       * <code>PTIE_ADD = 1;</code>
       */
      public static final int PTIE_ADD_VALUE = 1;
      /**
       * <code>PTIE_DEL = 2;</code>
       */
      public static final int PTIE_DEL_VALUE = 2;
      /**
       * <code>PTIE_MDF = 3;</code>
       */
      public static final int PTIE_MDF_VALUE = 3;


      public final int getNumber() { return value; }

      public static PortfolioItemEditType valueOf(int value) {
        switch (value) {
          case 1: return PTIE_ADD;
          case 2: return PTIE_DEL;
          case 3: return PTIE_MDF;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PortfolioItemEditType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PortfolioItemEditType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PortfolioItemEditType>() {
              public PortfolioItemEditType findValueByNumber(int number) {
                return PortfolioItemEditType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(3);
      }

      private static final PortfolioItemEditType[] VALUES = values();

      public static PortfolioItemEditType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PortfolioItemEditType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.PortfolioItemEditType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.ProfitType}
     */
    public enum ProfitType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PT_SECOND = 1;</code>
       *
       * <pre>
       *秒级别
       * </pre>
       */
      PT_SECOND(0, 1),
      /**
       * <code>PT_MINUTE = 2;</code>
       *
       * <pre>
       * 分钟级别
       * </pre>
       */
      PT_MINUTE(1, 2),
      ;

      /**
       * <code>PT_SECOND = 1;</code>
       *
       * <pre>
       *秒级别
       * </pre>
       */
      public static final int PT_SECOND_VALUE = 1;
      /**
       * <code>PT_MINUTE = 2;</code>
       *
       * <pre>
       * 分钟级别
       * </pre>
       */
      public static final int PT_MINUTE_VALUE = 2;


      public final int getNumber() { return value; }

      public static ProfitType valueOf(int value) {
        switch (value) {
          case 1: return PT_SECOND;
          case 2: return PT_MINUTE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ProfitType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ProfitType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ProfitType>() {
              public ProfitType findValueByNumber(int number) {
                return ProfitType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(4);
      }

      private static final ProfitType[] VALUES = values();

      public static ProfitType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ProfitType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.ProfitType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.ConnectType}
     */
    public enum ConnectType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CT_STRAIGHT = 1;</code>
       *
       * <pre>
       *直连
       * </pre>
       */
      CT_STRAIGHT(0, 1),
      /**
       * <code>CT_GATEWAYPROXY = 2;</code>
       *
       * <pre>
       *代理
       * </pre>
       */
      CT_GATEWAYPROXY(1, 2),
      /**
       * <code>CT_UNKNOWN = 3;</code>
       *
       * <pre>
       *其它
       * </pre>
       */
      CT_UNKNOWN(2, 3),
      ;

      /**
       * <code>CT_STRAIGHT = 1;</code>
       *
       * <pre>
       *直连
       * </pre>
       */
      public static final int CT_STRAIGHT_VALUE = 1;
      /**
       * <code>CT_GATEWAYPROXY = 2;</code>
       *
       * <pre>
       *代理
       * </pre>
       */
      public static final int CT_GATEWAYPROXY_VALUE = 2;
      /**
       * <code>CT_UNKNOWN = 3;</code>
       *
       * <pre>
       *其它
       * </pre>
       */
      public static final int CT_UNKNOWN_VALUE = 3;


      public final int getNumber() { return value; }

      public static ConnectType valueOf(int value) {
        switch (value) {
          case 1: return CT_STRAIGHT;
          case 2: return CT_GATEWAYPROXY;
          case 3: return CT_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ConnectType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ConnectType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConnectType>() {
              public ConnectType findValueByNumber(int number) {
                return ConnectType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(5);
      }

      private static final ConnectType[] VALUES = values();

      public static ConnectType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ConnectType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.ConnectType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.UserRole}
     */
    public enum UserRole
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UR_SUPERADMIN = 0;</code>
       *
       * <pre>
       *券商管理员
       * </pre>
       */
      UR_SUPERADMIN(0, 0),
      /**
       * <code>UR_ADMIN = 1;</code>
       *
       * <pre>
       *机构管理员
       * </pre>
       */
      UR_ADMIN(1, 1),
      /**
       * <code>UR_DEALER = 2;</code>
       *
       * <pre>
       *交易员
       * </pre>
       */
      UR_DEALER(2, 2),
      /**
       * <code>UR_RISKCHECKER = 3;</code>
       *
       * <pre>
       *风控员
       * </pre>
       */
      UR_RISKCHECKER(3, 3),
      /**
       * <code>UR_MONITOR = 4;</code>
       *
       * <pre>
       *查询监控员
       * </pre>
       */
      UR_MONITOR(4, 4),
      /**
       * <code>UR_INVEST_ADVISER = 6;</code>
       *
       * <pre>
       *投顾角色
       * </pre>
       */
      UR_INVEST_ADVISER(5, 6),
      /**
       * <code>UR_INVEST_MANAGER = 7;</code>
       *
       * <pre>
       *投资经理
       * </pre>
       */
      UR_INVEST_MANAGER(6, 7),
      /**
       * <code>UR_T0ADMIN = 8;</code>
       *
       * <pre>
       *分券管理员
       * </pre>
       */
      UR_T0ADMIN(7, 8),
      /**
       * <code>UR_SUPERMAINTAINER = 9;</code>
       *
       * <pre>
       *券商运维员
       * </pre>
       */
      UR_SUPERMAINTAINER(8, 9),
      /**
       * <code>UR_UNKNOWN = 5;</code>
       *
       * <pre>
       *其它
       * </pre>
       */
      UR_UNKNOWN(9, 5),
      ;

      /**
       * <code>UR_SUPERADMIN = 0;</code>
       *
       * <pre>
       *券商管理员
       * </pre>
       */
      public static final int UR_SUPERADMIN_VALUE = 0;
      /**
       * <code>UR_ADMIN = 1;</code>
       *
       * <pre>
       *机构管理员
       * </pre>
       */
      public static final int UR_ADMIN_VALUE = 1;
      /**
       * <code>UR_DEALER = 2;</code>
       *
       * <pre>
       *交易员
       * </pre>
       */
      public static final int UR_DEALER_VALUE = 2;
      /**
       * <code>UR_RISKCHECKER = 3;</code>
       *
       * <pre>
       *风控员
       * </pre>
       */
      public static final int UR_RISKCHECKER_VALUE = 3;
      /**
       * <code>UR_MONITOR = 4;</code>
       *
       * <pre>
       *查询监控员
       * </pre>
       */
      public static final int UR_MONITOR_VALUE = 4;
      /**
       * <code>UR_INVEST_ADVISER = 6;</code>
       *
       * <pre>
       *投顾角色
       * </pre>
       */
      public static final int UR_INVEST_ADVISER_VALUE = 6;
      /**
       * <code>UR_INVEST_MANAGER = 7;</code>
       *
       * <pre>
       *投资经理
       * </pre>
       */
      public static final int UR_INVEST_MANAGER_VALUE = 7;
      /**
       * <code>UR_T0ADMIN = 8;</code>
       *
       * <pre>
       *分券管理员
       * </pre>
       */
      public static final int UR_T0ADMIN_VALUE = 8;
      /**
       * <code>UR_SUPERMAINTAINER = 9;</code>
       *
       * <pre>
       *券商运维员
       * </pre>
       */
      public static final int UR_SUPERMAINTAINER_VALUE = 9;
      /**
       * <code>UR_UNKNOWN = 5;</code>
       *
       * <pre>
       *其它
       * </pre>
       */
      public static final int UR_UNKNOWN_VALUE = 5;


      public final int getNumber() { return value; }

      public static UserRole valueOf(int value) {
        switch (value) {
          case 0: return UR_SUPERADMIN;
          case 1: return UR_ADMIN;
          case 2: return UR_DEALER;
          case 3: return UR_RISKCHECKER;
          case 4: return UR_MONITOR;
          case 6: return UR_INVEST_ADVISER;
          case 7: return UR_INVEST_MANAGER;
          case 8: return UR_T0ADMIN;
          case 9: return UR_SUPERMAINTAINER;
          case 5: return UR_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UserRole>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<UserRole>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UserRole>() {
              public UserRole findValueByNumber(int number) {
                return UserRole.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(6);
      }

      private static final UserRole[] VALUES = values();

      public static UserRole valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private UserRole(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.UserRole)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.UserStatus}
     */
    public enum UserStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>US_ACTIVE = 1;</code>
       *
       * <pre>
       *正常
       * </pre>
       */
      US_ACTIVE(0, 1),
      /**
       * <code>US_FROZEN = 2;</code>
       *
       * <pre>
       *冻结
       * </pre>
       */
      US_FROZEN(1, 2),
      /**
       * <code>US_CLOSE = 3;</code>
       *
       * <pre>
       *注销
       * </pre>
       */
      US_CLOSE(2, 3),
      ;

      /**
       * <code>US_ACTIVE = 1;</code>
       *
       * <pre>
       *正常
       * </pre>
       */
      public static final int US_ACTIVE_VALUE = 1;
      /**
       * <code>US_FROZEN = 2;</code>
       *
       * <pre>
       *冻结
       * </pre>
       */
      public static final int US_FROZEN_VALUE = 2;
      /**
       * <code>US_CLOSE = 3;</code>
       *
       * <pre>
       *注销
       * </pre>
       */
      public static final int US_CLOSE_VALUE = 3;


      public final int getNumber() { return value; }

      public static UserStatus valueOf(int value) {
        switch (value) {
          case 1: return US_ACTIVE;
          case 2: return US_FROZEN;
          case 3: return US_CLOSE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UserStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<UserStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UserStatus>() {
              public UserStatus findValueByNumber(int number) {
                return UserStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(7);
      }

      private static final UserStatus[] VALUES = values();

      public static UserStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private UserStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.UserStatus)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.UserCertificate}
     */
    public enum UserCertificate
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UC_UNKNOWN = 0;</code>
       *
       * <pre>
       *其他
       * </pre>
       */
      UC_UNKNOWN(0, 0),
      /**
       * <code>UC_Certificate = 1;</code>
       *
       * <pre>
       *身份证
       * </pre>
       */
      UC_Certificate(1, 1),
      /**
       * <code>UC_ORGANIZATION = 2;</code>
       *
       * <pre>
       *机构代码
       * </pre>
       */
      UC_ORGANIZATION(2, 2),
      ;

      /**
       * <code>UC_UNKNOWN = 0;</code>
       *
       * <pre>
       *其他
       * </pre>
       */
      public static final int UC_UNKNOWN_VALUE = 0;
      /**
       * <code>UC_Certificate = 1;</code>
       *
       * <pre>
       *身份证
       * </pre>
       */
      public static final int UC_Certificate_VALUE = 1;
      /**
       * <code>UC_ORGANIZATION = 2;</code>
       *
       * <pre>
       *机构代码
       * </pre>
       */
      public static final int UC_ORGANIZATION_VALUE = 2;


      public final int getNumber() { return value; }

      public static UserCertificate valueOf(int value) {
        switch (value) {
          case 0: return UC_UNKNOWN;
          case 1: return UC_Certificate;
          case 2: return UC_ORGANIZATION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UserCertificate>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<UserCertificate>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UserCertificate>() {
              public UserCertificate findValueByNumber(int number) {
                return UserCertificate.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(8);
      }

      private static final UserCertificate[] VALUES = values();

      public static UserCertificate valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private UserCertificate(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.UserCertificate)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.ProdStatus}
     */
    public enum ProdStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PS_ACTIVE = 1;</code>
       *
       * <pre>
       *正常
       * </pre>
       */
      PS_ACTIVE(0, 1),
      /**
       * <code>PS_FROZEN = 2;</code>
       *
       * <pre>
       *冻结
       * </pre>
       */
      PS_FROZEN(1, 2),
      /**
       * <code>PS_CLOSE = 3;</code>
       *
       * <pre>
       *注销
       * </pre>
       */
      PS_CLOSE(2, 3),
      ;

      /**
       * <code>PS_ACTIVE = 1;</code>
       *
       * <pre>
       *正常
       * </pre>
       */
      public static final int PS_ACTIVE_VALUE = 1;
      /**
       * <code>PS_FROZEN = 2;</code>
       *
       * <pre>
       *冻结
       * </pre>
       */
      public static final int PS_FROZEN_VALUE = 2;
      /**
       * <code>PS_CLOSE = 3;</code>
       *
       * <pre>
       *注销
       * </pre>
       */
      public static final int PS_CLOSE_VALUE = 3;


      public final int getNumber() { return value; }

      public static ProdStatus valueOf(int value) {
        switch (value) {
          case 1: return PS_ACTIVE;
          case 2: return PS_FROZEN;
          case 3: return PS_CLOSE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ProdStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ProdStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ProdStatus>() {
              public ProdStatus findValueByNumber(int number) {
                return ProdStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(9);
      }

      private static final ProdStatus[] VALUES = values();

      public static ProdStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ProdStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.ProdStatus)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.QueryTradeType}
     */
    public enum QueryTradeType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>QTT_ORDERNO = 1;</code>
       */
      QTT_ORDERNO(0, 1),
      /**
       * <code>QTT_TIME = 2;</code>
       */
      QTT_TIME(1, 2),
      /**
       * <code>QTT_QUERYPOS = 3;</code>
       */
      QTT_QUERYPOS(2, 3),
      ;

      /**
       * <code>QTT_ORDERNO = 1;</code>
       */
      public static final int QTT_ORDERNO_VALUE = 1;
      /**
       * <code>QTT_TIME = 2;</code>
       */
      public static final int QTT_TIME_VALUE = 2;
      /**
       * <code>QTT_QUERYPOS = 3;</code>
       */
      public static final int QTT_QUERYPOS_VALUE = 3;


      public final int getNumber() { return value; }

      public static QueryTradeType valueOf(int value) {
        switch (value) {
          case 1: return QTT_ORDERNO;
          case 2: return QTT_TIME;
          case 3: return QTT_QUERYPOS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<QueryTradeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<QueryTradeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<QueryTradeType>() {
              public QueryTradeType findValueByNumber(int number) {
                return QueryTradeType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(10);
      }

      private static final QueryTradeType[] VALUES = values();

      public static QueryTradeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private QueryTradeType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.QueryTradeType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OptContractType}
     */
    public enum OptContractType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OCT_CALL = 1;</code>
       */
      OCT_CALL(0, 1),
      /**
       * <code>OCT_PUT = 2;</code>
       */
      OCT_PUT(1, 2),
      ;

      /**
       * <code>OCT_CALL = 1;</code>
       */
      public static final int OCT_CALL_VALUE = 1;
      /**
       * <code>OCT_PUT = 2;</code>
       */
      public static final int OCT_PUT_VALUE = 2;


      public final int getNumber() { return value; }

      public static OptContractType valueOf(int value) {
        switch (value) {
          case 1: return OCT_CALL;
          case 2: return OCT_PUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OptContractType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OptContractType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OptContractType>() {
              public OptContractType findValueByNumber(int number) {
                return OptContractType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(11);
      }

      private static final OptContractType[] VALUES = values();

      public static OptContractType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OptContractType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OptContractType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OptDirect}
     */
    public enum OptDirect
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OD_RIGHT_POS = 1;</code>
       */
      OD_RIGHT_POS(0, 1),
      /**
       * <code>OD_DUTY_POS = 2;</code>
       */
      OD_DUTY_POS(1, 2),
      /**
       * <code>OD_COVERED_POS = 3;</code>
       */
      OD_COVERED_POS(2, 3),
      ;

      /**
       * <code>OD_RIGHT_POS = 1;</code>
       */
      public static final int OD_RIGHT_POS_VALUE = 1;
      /**
       * <code>OD_DUTY_POS = 2;</code>
       */
      public static final int OD_DUTY_POS_VALUE = 2;
      /**
       * <code>OD_COVERED_POS = 3;</code>
       */
      public static final int OD_COVERED_POS_VALUE = 3;


      public final int getNumber() { return value; }

      public static OptDirect valueOf(int value) {
        switch (value) {
          case 1: return OD_RIGHT_POS;
          case 2: return OD_DUTY_POS;
          case 3: return OD_COVERED_POS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OptDirect>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OptDirect>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OptDirect>() {
              public OptDirect findValueByNumber(int number) {
                return OptDirect.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(12);
      }

      private static final OptDirect[] VALUES = values();

      public static OptDirect valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OptDirect(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OptDirect)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.Exchange}
     */
    public enum Exchange
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>EX_UNKNOWN = 0;</code>
       */
      EX_UNKNOWN(0, 0),
      /**
       * <code>EX_SH = 1;</code>
       *
       * <pre>
       *上交所
       * </pre>
       */
      EX_SH(1, 1),
      /**
       * <code>EX_SZ = 2;</code>
       *
       * <pre>
       *深交所
       * </pre>
       */
      EX_SZ(2, 2),
      /**
       * <code>EX_CF = 3;</code>
       *
       * <pre>
       *中金所
       * </pre>
       */
      EX_CF(3, 3),
      /**
       * <code>EX_HK = 7;</code>
       *
       * <pre>
       * 香港联交所
       * </pre>
       */
      EX_HK(4, 7),
      /**
       * <code>EX_SHFE = 4;</code>
       *
       * <pre>
       *"上海期货交易所";
       * </pre>
       */
      EX_SHFE(5, 4),
      /**
       * <code>EX_DCE = 5;</code>
       *
       * <pre>
       *"大连商品交易所";
       * </pre>
       */
      EX_DCE(6, 5),
      /**
       * <code>EX_CZCE = 6;</code>
       *
       * <pre>
       *"郑州商品交易所";
       * </pre>
       */
      EX_CZCE(7, 6),
      /**
       * <code>EX_CTP = 8;</code>
       *
       * <pre>
       *综合商品期货.
       * </pre>
       */
      EX_CTP(8, 8),
      ;

      /**
       * <code>EX_UNKNOWN = 0;</code>
       */
      public static final int EX_UNKNOWN_VALUE = 0;
      /**
       * <code>EX_SH = 1;</code>
       *
       * <pre>
       *上交所
       * </pre>
       */
      public static final int EX_SH_VALUE = 1;
      /**
       * <code>EX_SZ = 2;</code>
       *
       * <pre>
       *深交所
       * </pre>
       */
      public static final int EX_SZ_VALUE = 2;
      /**
       * <code>EX_CF = 3;</code>
       *
       * <pre>
       *中金所
       * </pre>
       */
      public static final int EX_CF_VALUE = 3;
      /**
       * <code>EX_HK = 7;</code>
       *
       * <pre>
       * 香港联交所
       * </pre>
       */
      public static final int EX_HK_VALUE = 7;
      /**
       * <code>EX_SHFE = 4;</code>
       *
       * <pre>
       *"上海期货交易所";
       * </pre>
       */
      public static final int EX_SHFE_VALUE = 4;
      /**
       * <code>EX_DCE = 5;</code>
       *
       * <pre>
       *"大连商品交易所";
       * </pre>
       */
      public static final int EX_DCE_VALUE = 5;
      /**
       * <code>EX_CZCE = 6;</code>
       *
       * <pre>
       *"郑州商品交易所";
       * </pre>
       */
      public static final int EX_CZCE_VALUE = 6;
      /**
       * <code>EX_CTP = 8;</code>
       *
       * <pre>
       *综合商品期货.
       * </pre>
       */
      public static final int EX_CTP_VALUE = 8;


      public final int getNumber() { return value; }

      public static Exchange valueOf(int value) {
        switch (value) {
          case 0: return EX_UNKNOWN;
          case 1: return EX_SH;
          case 2: return EX_SZ;
          case 3: return EX_CF;
          case 7: return EX_HK;
          case 4: return EX_SHFE;
          case 5: return EX_DCE;
          case 6: return EX_CZCE;
          case 8: return EX_CTP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Exchange>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Exchange>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Exchange>() {
              public Exchange findValueByNumber(int number) {
                return Exchange.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(13);
      }

      private static final Exchange[] VALUES = values();

      public static Exchange valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Exchange(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.Exchange)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.BuySell}
     */
    public enum BuySell
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>BS_INVALID = 0;</code>
       */
      BS_INVALID(0, 0),
      /**
       * <code>BS_BUY = 1;</code>
       *
       * <pre>
       *买入
       * </pre>
       */
      BS_BUY(1, 1),
      /**
       * <code>BS_SELL = 2;</code>
       *
       * <pre>
       *卖出
       * </pre>
       */
      BS_SELL(2, 2),
      /**
       * <code>BS_BOTH = 3;</code>
       */
      BS_BOTH(3, 3),
      /**
       * <code>BS_PURCHASE = 4;</code>
       *
       * <pre>
       *申购
       * </pre>
       */
      BS_PURCHASE(4, 4),
      /**
       * <code>BS_REDEEM = 5;</code>
       *
       * <pre>
       *赎回
       * </pre>
       */
      BS_REDEEM(5, 5),
      /**
       * <code>BS_BWT_MKT_PURCHASE = 6;</code>
       */
      BS_BWT_MKT_PURCHASE(6, 6),
      /**
       * <code>BS_BWT_MKT_REDEEM = 7;</code>
       */
      BS_BWT_MKT_REDEEM(7, 7),
      /**
       * <code>BS_BWT_ENV_PURCHASE = 8;</code>
       */
      BS_BWT_ENV_PURCHASE(8, 8),
      /**
       * <code>BS_BWT_ENV_REDEEM = 9;</code>
       */
      BS_BWT_ENV_REDEEM(9, 9),
      /**
       * <code>BS_FS_CO_BUY = 10;</code>
       *
       * <pre>
       * 担保品买入
       * </pre>
       */
      BS_FS_CO_BUY(10, 10),
      /**
       * <code>BS_FS_CO_SELL = 11;</code>
       *
       * <pre>
       * 担保品卖出
       * </pre>
       */
      BS_FS_CO_SELL(11, 11),
      /**
       * <code>BS_FS_FL_BUY = 12;</code>
       *
       * <pre>
       * 融资买入
       * </pre>
       */
      BS_FS_FL_BUY(12, 12),
      /**
       * <code>BS_FS_FL_SELL = 13;</code>
       *
       * <pre>
       * 卖券还款
       * </pre>
       */
      BS_FS_FL_SELL(13, 13),
      /**
       * <code>BS_FS_SL_BUY = 14;</code>
       *
       * <pre>
       * 买券还券
       * </pre>
       */
      BS_FS_SL_BUY(14, 14),
      /**
       * <code>BS_FS_SL_SELL = 15;</code>
       *
       * <pre>
       * 融券卖出
       * </pre>
       */
      BS_FS_SL_SELL(15, 15),
      /**
       * <code>BS_BUY_OPEN = 16;</code>
       *
       * <pre>
       * 开多
       * </pre>
       */
      BS_BUY_OPEN(16, 16),
      /**
       * <code>BS_SELL_CLOSE = 17;</code>
       *
       * <pre>
       * 平空
       * </pre>
       */
      BS_SELL_CLOSE(17, 17),
      /**
       * <code>BS_SELL_OPEN = 18;</code>
       *
       * <pre>
       * 开空
       * </pre>
       */
      BS_SELL_OPEN(18, 18),
      /**
       * <code>BS_BUY_CLOSE = 19;</code>
       *
       * <pre>
       * 平多
       * </pre>
       */
      BS_BUY_CLOSE(19, 19),
      /**
       * <code>BS_OPT_BUY_OPEN = 20;</code>
       *
       * <pre>
       * 期权买入开仓	
       * </pre>
       */
      BS_OPT_BUY_OPEN(20, 20),
      /**
       * <code>BS_OPT_SELL_CLOSE = 21;</code>
       *
       * <pre>
       * 期权卖出平仓
       * </pre>
       */
      BS_OPT_SELL_CLOSE(21, 21),
      /**
       * <code>BS_OPT_SELL_OPEN = 22;</code>
       *
       * <pre>
       * 期权卖出开仓
       * </pre>
       */
      BS_OPT_SELL_OPEN(22, 22),
      /**
       * <code>BS_OPT_BUY_CLOSE = 23;</code>
       *
       * <pre>
       * 期权买入平仓
       * </pre>
       */
      BS_OPT_BUY_CLOSE(23, 23),
      /**
       * <code>BS_OPT_CVD_OPEN = 24;</code>
       *
       * <pre>
       * 期权备兑开仓
       * </pre>
       */
      BS_OPT_CVD_OPEN(24, 24),
      /**
       * <code>BS_OPT_CVD_CLOSE = 25;</code>
       *
       * <pre>
       * 期权备兑平仓
       * </pre>
       */
      BS_OPT_CVD_CLOSE(25, 25),
      /**
       * <code>BS_OPT_RIGHT_GET = 26;</code>
       *
       * <pre>
       * 期权认购行权
       * </pre>
       */
      BS_OPT_RIGHT_GET(26, 26),
      /**
       * <code>BS_OPT_RIGHT_PUT = 27;</code>
       *
       * <pre>
       * 期权认沽行权
       * </pre>
       */
      BS_OPT_RIGHT_PUT(27, 27),
      /**
       * <code>BS_REPO_FL = 28;</code>
       *
       * <pre>
       * 融资回购
       * </pre>
       */
      BS_REPO_FL(28, 28),
      /**
       * <code>BS_REPO_SL = 29;</code>
       *
       * <pre>
       * 融券回购
       * </pre>
       */
      BS_REPO_SL(29, 29),
      ;

      /**
       * <code>BS_INVALID = 0;</code>
       */
      public static final int BS_INVALID_VALUE = 0;
      /**
       * <code>BS_BUY = 1;</code>
       *
       * <pre>
       *买入
       * </pre>
       */
      public static final int BS_BUY_VALUE = 1;
      /**
       * <code>BS_SELL = 2;</code>
       *
       * <pre>
       *卖出
       * </pre>
       */
      public static final int BS_SELL_VALUE = 2;
      /**
       * <code>BS_BOTH = 3;</code>
       */
      public static final int BS_BOTH_VALUE = 3;
      /**
       * <code>BS_PURCHASE = 4;</code>
       *
       * <pre>
       *申购
       * </pre>
       */
      public static final int BS_PURCHASE_VALUE = 4;
      /**
       * <code>BS_REDEEM = 5;</code>
       *
       * <pre>
       *赎回
       * </pre>
       */
      public static final int BS_REDEEM_VALUE = 5;
      /**
       * <code>BS_BWT_MKT_PURCHASE = 6;</code>
       */
      public static final int BS_BWT_MKT_PURCHASE_VALUE = 6;
      /**
       * <code>BS_BWT_MKT_REDEEM = 7;</code>
       */
      public static final int BS_BWT_MKT_REDEEM_VALUE = 7;
      /**
       * <code>BS_BWT_ENV_PURCHASE = 8;</code>
       */
      public static final int BS_BWT_ENV_PURCHASE_VALUE = 8;
      /**
       * <code>BS_BWT_ENV_REDEEM = 9;</code>
       */
      public static final int BS_BWT_ENV_REDEEM_VALUE = 9;
      /**
       * <code>BS_FS_CO_BUY = 10;</code>
       *
       * <pre>
       * 担保品买入
       * </pre>
       */
      public static final int BS_FS_CO_BUY_VALUE = 10;
      /**
       * <code>BS_FS_CO_SELL = 11;</code>
       *
       * <pre>
       * 担保品卖出
       * </pre>
       */
      public static final int BS_FS_CO_SELL_VALUE = 11;
      /**
       * <code>BS_FS_FL_BUY = 12;</code>
       *
       * <pre>
       * 融资买入
       * </pre>
       */
      public static final int BS_FS_FL_BUY_VALUE = 12;
      /**
       * <code>BS_FS_FL_SELL = 13;</code>
       *
       * <pre>
       * 卖券还款
       * </pre>
       */
      public static final int BS_FS_FL_SELL_VALUE = 13;
      /**
       * <code>BS_FS_SL_BUY = 14;</code>
       *
       * <pre>
       * 买券还券
       * </pre>
       */
      public static final int BS_FS_SL_BUY_VALUE = 14;
      /**
       * <code>BS_FS_SL_SELL = 15;</code>
       *
       * <pre>
       * 融券卖出
       * </pre>
       */
      public static final int BS_FS_SL_SELL_VALUE = 15;
      /**
       * <code>BS_BUY_OPEN = 16;</code>
       *
       * <pre>
       * 开多
       * </pre>
       */
      public static final int BS_BUY_OPEN_VALUE = 16;
      /**
       * <code>BS_SELL_CLOSE = 17;</code>
       *
       * <pre>
       * 平空
       * </pre>
       */
      public static final int BS_SELL_CLOSE_VALUE = 17;
      /**
       * <code>BS_SELL_OPEN = 18;</code>
       *
       * <pre>
       * 开空
       * </pre>
       */
      public static final int BS_SELL_OPEN_VALUE = 18;
      /**
       * <code>BS_BUY_CLOSE = 19;</code>
       *
       * <pre>
       * 平多
       * </pre>
       */
      public static final int BS_BUY_CLOSE_VALUE = 19;
      /**
       * <code>BS_OPT_BUY_OPEN = 20;</code>
       *
       * <pre>
       * 期权买入开仓	
       * </pre>
       */
      public static final int BS_OPT_BUY_OPEN_VALUE = 20;
      /**
       * <code>BS_OPT_SELL_CLOSE = 21;</code>
       *
       * <pre>
       * 期权卖出平仓
       * </pre>
       */
      public static final int BS_OPT_SELL_CLOSE_VALUE = 21;
      /**
       * <code>BS_OPT_SELL_OPEN = 22;</code>
       *
       * <pre>
       * 期权卖出开仓
       * </pre>
       */
      public static final int BS_OPT_SELL_OPEN_VALUE = 22;
      /**
       * <code>BS_OPT_BUY_CLOSE = 23;</code>
       *
       * <pre>
       * 期权买入平仓
       * </pre>
       */
      public static final int BS_OPT_BUY_CLOSE_VALUE = 23;
      /**
       * <code>BS_OPT_CVD_OPEN = 24;</code>
       *
       * <pre>
       * 期权备兑开仓
       * </pre>
       */
      public static final int BS_OPT_CVD_OPEN_VALUE = 24;
      /**
       * <code>BS_OPT_CVD_CLOSE = 25;</code>
       *
       * <pre>
       * 期权备兑平仓
       * </pre>
       */
      public static final int BS_OPT_CVD_CLOSE_VALUE = 25;
      /**
       * <code>BS_OPT_RIGHT_GET = 26;</code>
       *
       * <pre>
       * 期权认购行权
       * </pre>
       */
      public static final int BS_OPT_RIGHT_GET_VALUE = 26;
      /**
       * <code>BS_OPT_RIGHT_PUT = 27;</code>
       *
       * <pre>
       * 期权认沽行权
       * </pre>
       */
      public static final int BS_OPT_RIGHT_PUT_VALUE = 27;
      /**
       * <code>BS_REPO_FL = 28;</code>
       *
       * <pre>
       * 融资回购
       * </pre>
       */
      public static final int BS_REPO_FL_VALUE = 28;
      /**
       * <code>BS_REPO_SL = 29;</code>
       *
       * <pre>
       * 融券回购
       * </pre>
       */
      public static final int BS_REPO_SL_VALUE = 29;


      public final int getNumber() { return value; }

      public static BuySell valueOf(int value) {
        switch (value) {
          case 0: return BS_INVALID;
          case 1: return BS_BUY;
          case 2: return BS_SELL;
          case 3: return BS_BOTH;
          case 4: return BS_PURCHASE;
          case 5: return BS_REDEEM;
          case 6: return BS_BWT_MKT_PURCHASE;
          case 7: return BS_BWT_MKT_REDEEM;
          case 8: return BS_BWT_ENV_PURCHASE;
          case 9: return BS_BWT_ENV_REDEEM;
          case 10: return BS_FS_CO_BUY;
          case 11: return BS_FS_CO_SELL;
          case 12: return BS_FS_FL_BUY;
          case 13: return BS_FS_FL_SELL;
          case 14: return BS_FS_SL_BUY;
          case 15: return BS_FS_SL_SELL;
          case 16: return BS_BUY_OPEN;
          case 17: return BS_SELL_CLOSE;
          case 18: return BS_SELL_OPEN;
          case 19: return BS_BUY_CLOSE;
          case 20: return BS_OPT_BUY_OPEN;
          case 21: return BS_OPT_SELL_CLOSE;
          case 22: return BS_OPT_SELL_OPEN;
          case 23: return BS_OPT_BUY_CLOSE;
          case 24: return BS_OPT_CVD_OPEN;
          case 25: return BS_OPT_CVD_CLOSE;
          case 26: return BS_OPT_RIGHT_GET;
          case 27: return BS_OPT_RIGHT_PUT;
          case 28: return BS_REPO_FL;
          case 29: return BS_REPO_SL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BuySell>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<BuySell>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BuySell>() {
              public BuySell findValueByNumber(int number) {
                return BuySell.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(14);
      }

      private static final BuySell[] VALUES = values();

      public static BuySell valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private BuySell(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.BuySell)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OpenCloseType}
     */
    public enum OpenCloseType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OC_UNKNOWN = -1;</code>
       */
      OC_UNKNOWN(0, -1),
      /**
       * <code>OPEN = 0;</code>
       */
      OPEN(1, 0),
      /**
       * <code>CLOSE = 1;</code>
       */
      CLOSE(2, 1),
      /**
       * <code>CLOSE_TODAY = 2;</code>
       */
      CLOSE_TODAY(3, 2),
      /**
       * <code>CLOSE_YESTODAY = 3;</code>
       */
      CLOSE_YESTODAY(4, 3),
      /**
       * <code>FORCE_CLOSE = 4;</code>
       */
      FORCE_CLOSE(5, 4),
      ;

      /**
       * <code>OC_UNKNOWN = -1;</code>
       */
      public static final int OC_UNKNOWN_VALUE = -1;
      /**
       * <code>OPEN = 0;</code>
       */
      public static final int OPEN_VALUE = 0;
      /**
       * <code>CLOSE = 1;</code>
       */
      public static final int CLOSE_VALUE = 1;
      /**
       * <code>CLOSE_TODAY = 2;</code>
       */
      public static final int CLOSE_TODAY_VALUE = 2;
      /**
       * <code>CLOSE_YESTODAY = 3;</code>
       */
      public static final int CLOSE_YESTODAY_VALUE = 3;
      /**
       * <code>FORCE_CLOSE = 4;</code>
       */
      public static final int FORCE_CLOSE_VALUE = 4;


      public final int getNumber() { return value; }

      public static OpenCloseType valueOf(int value) {
        switch (value) {
          case -1: return OC_UNKNOWN;
          case 0: return OPEN;
          case 1: return CLOSE;
          case 2: return CLOSE_TODAY;
          case 3: return CLOSE_YESTODAY;
          case 4: return FORCE_CLOSE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OpenCloseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OpenCloseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OpenCloseType>() {
              public OpenCloseType findValueByNumber(int number) {
                return OpenCloseType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(15);
      }

      private static final OpenCloseType[] VALUES = values();

      public static OpenCloseType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OpenCloseType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OpenCloseType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.HedgeType}
     */
    public enum HedgeType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HEDGE_UNKNOWN = 0;</code>
       */
      HEDGE_UNKNOWN(0, 0),
      /**
       * <code>SPECULATION = 1;</code>
       */
      SPECULATION(1, 1),
      /**
       * <code>ARBITRAGE = 2;</code>
       */
      ARBITRAGE(2, 2),
      /**
       * <code>HEDGE = 3;</code>
       */
      HEDGE(3, 3),
      ;

      /**
       * <code>HEDGE_UNKNOWN = 0;</code>
       */
      public static final int HEDGE_UNKNOWN_VALUE = 0;
      /**
       * <code>SPECULATION = 1;</code>
       */
      public static final int SPECULATION_VALUE = 1;
      /**
       * <code>ARBITRAGE = 2;</code>
       */
      public static final int ARBITRAGE_VALUE = 2;
      /**
       * <code>HEDGE = 3;</code>
       */
      public static final int HEDGE_VALUE = 3;


      public final int getNumber() { return value; }

      public static HedgeType valueOf(int value) {
        switch (value) {
          case 0: return HEDGE_UNKNOWN;
          case 1: return SPECULATION;
          case 2: return ARBITRAGE;
          case 3: return HEDGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<HedgeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<HedgeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<HedgeType>() {
              public HedgeType findValueByNumber(int number) {
                return HedgeType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(16);
      }

      private static final HedgeType[] VALUES = values();

      public static HedgeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private HedgeType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.HedgeType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.PriceModeType}
     */
    public enum PriceModeType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PM_UNKNOWN = 0;</code>
       */
      PM_UNKNOWN(0, 0),
      /**
       * <code>LIMIT_PRICE = 1;</code>
       */
      LIMIT_PRICE(1, 1),
      /**
       * <code>LAST_PRICE = 2;</code>
       */
      LAST_PRICE(2, 2),
      /**
       * <code>MARKET_PRICE = 3;</code>
       */
      MARKET_PRICE(3, 3),
      /**
       * <code>MARKET_PRICE_THIS_SIDE = 4;</code>
       */
      MARKET_PRICE_THIS_SIDE(4, 4),
      /**
       * <code>MARKET_PRICE_THAT_SIDE = 5;</code>
       */
      MARKET_PRICE_THAT_SIDE(5, 5),
      /**
       * <code>MARKET_PRICE_CANCEL_REST = 6;</code>
       */
      MARKET_PRICE_CANCEL_REST(6, 6),
      /**
       * <code>MARKET_PRICE_LIMITED_REST = 7;</code>
       */
      MARKET_PRICE_LIMITED_REST(7, 7),
      ;

      /**
       * <code>PM_UNKNOWN = 0;</code>
       */
      public static final int PM_UNKNOWN_VALUE = 0;
      /**
       * <code>LIMIT_PRICE = 1;</code>
       */
      public static final int LIMIT_PRICE_VALUE = 1;
      /**
       * <code>LAST_PRICE = 2;</code>
       */
      public static final int LAST_PRICE_VALUE = 2;
      /**
       * <code>MARKET_PRICE = 3;</code>
       */
      public static final int MARKET_PRICE_VALUE = 3;
      /**
       * <code>MARKET_PRICE_THIS_SIDE = 4;</code>
       */
      public static final int MARKET_PRICE_THIS_SIDE_VALUE = 4;
      /**
       * <code>MARKET_PRICE_THAT_SIDE = 5;</code>
       */
      public static final int MARKET_PRICE_THAT_SIDE_VALUE = 5;
      /**
       * <code>MARKET_PRICE_CANCEL_REST = 6;</code>
       */
      public static final int MARKET_PRICE_CANCEL_REST_VALUE = 6;
      /**
       * <code>MARKET_PRICE_LIMITED_REST = 7;</code>
       */
      public static final int MARKET_PRICE_LIMITED_REST_VALUE = 7;


      public final int getNumber() { return value; }

      public static PriceModeType valueOf(int value) {
        switch (value) {
          case 0: return PM_UNKNOWN;
          case 1: return LIMIT_PRICE;
          case 2: return LAST_PRICE;
          case 3: return MARKET_PRICE;
          case 4: return MARKET_PRICE_THIS_SIDE;
          case 5: return MARKET_PRICE_THAT_SIDE;
          case 6: return MARKET_PRICE_CANCEL_REST;
          case 7: return MARKET_PRICE_LIMITED_REST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PriceModeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PriceModeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PriceModeType>() {
              public PriceModeType findValueByNumber(int number) {
                return PriceModeType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(17);
      }

      private static final PriceModeType[] VALUES = values();

      public static PriceModeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PriceModeType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.PriceModeType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.ReqStatus}
     */
    public enum ReqStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REQ_UNKNOWN = 0;</code>
       */
      REQ_UNKNOWN(0, 0),
      /**
       * <code>SUCCESS = 1;</code>
       */
      SUCCESS(1, 1),
      /**
       * <code>FAILURE = 2;</code>
       */
      FAILURE(2, 2),
      ;

      /**
       * <code>REQ_UNKNOWN = 0;</code>
       */
      public static final int REQ_UNKNOWN_VALUE = 0;
      /**
       * <code>SUCCESS = 1;</code>
       */
      public static final int SUCCESS_VALUE = 1;
      /**
       * <code>FAILURE = 2;</code>
       */
      public static final int FAILURE_VALUE = 2;


      public final int getNumber() { return value; }

      public static ReqStatus valueOf(int value) {
        switch (value) {
          case 0: return REQ_UNKNOWN;
          case 1: return SUCCESS;
          case 2: return FAILURE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ReqStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ReqStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ReqStatus>() {
              public ReqStatus findValueByNumber(int number) {
                return ReqStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(18);
      }

      private static final ReqStatus[] VALUES = values();

      public static ReqStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ReqStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.ReqStatus)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OrderStatus}
     */
    public enum OrderStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>STATUS_UNKNOWN = 1;</code>
       */
      STATUS_UNKNOWN(0, 1),
      /**
       * <code>PENDING = 2;</code>
       *
       * <pre>
       *挂单
       * </pre>
       */
      PENDING(1, 2),
      /**
       * <code>PARTTRADED = 3;</code>
       *
       * <pre>
       *部成
       * </pre>
       */
      PARTTRADED(2, 3),
      /**
       * <code>CANCELLED = 4;</code>
       *
       * <pre>
       *撤单
       * </pre>
       */
      CANCELLED(3, 4),
      /**
       * <code>REJECTED = 5;</code>
       *
       * <pre>
       *废单
       * </pre>
       */
      REJECTED(4, 5),
      /**
       * <code>ALLTRADED = 6;</code>
       *
       * <pre>
       *全部成交
       * </pre>
       */
      ALLTRADED(5, 6),
      /**
       * <code>ONTRADED = 7;</code>
       */
      ONTRADED(6, 7),
      /**
       * <code>INSERT_FAILED = 8;</code>
       */
      INSERT_FAILED(7, 8),
      /**
       * <code>INSERT_REJECT = 9;</code>
       */
      INSERT_REJECT(8, 9),
      /**
       * <code>CANCELLING = 10;</code>
       *
       * <pre>
       *正在撤单
       * </pre>
       */
      CANCELLING(9, 10),
      /**
       * <code>INSERTED = 11;</code>
       */
      INSERTED(10, 11),
      ;

      /**
       * <code>STATUS_UNKNOWN = 1;</code>
       */
      public static final int STATUS_UNKNOWN_VALUE = 1;
      /**
       * <code>PENDING = 2;</code>
       *
       * <pre>
       *挂单
       * </pre>
       */
      public static final int PENDING_VALUE = 2;
      /**
       * <code>PARTTRADED = 3;</code>
       *
       * <pre>
       *部成
       * </pre>
       */
      public static final int PARTTRADED_VALUE = 3;
      /**
       * <code>CANCELLED = 4;</code>
       *
       * <pre>
       *撤单
       * </pre>
       */
      public static final int CANCELLED_VALUE = 4;
      /**
       * <code>REJECTED = 5;</code>
       *
       * <pre>
       *废单
       * </pre>
       */
      public static final int REJECTED_VALUE = 5;
      /**
       * <code>ALLTRADED = 6;</code>
       *
       * <pre>
       *全部成交
       * </pre>
       */
      public static final int ALLTRADED_VALUE = 6;
      /**
       * <code>ONTRADED = 7;</code>
       */
      public static final int ONTRADED_VALUE = 7;
      /**
       * <code>INSERT_FAILED = 8;</code>
       */
      public static final int INSERT_FAILED_VALUE = 8;
      /**
       * <code>INSERT_REJECT = 9;</code>
       */
      public static final int INSERT_REJECT_VALUE = 9;
      /**
       * <code>CANCELLING = 10;</code>
       *
       * <pre>
       *正在撤单
       * </pre>
       */
      public static final int CANCELLING_VALUE = 10;
      /**
       * <code>INSERTED = 11;</code>
       */
      public static final int INSERTED_VALUE = 11;


      public final int getNumber() { return value; }

      public static OrderStatus valueOf(int value) {
        switch (value) {
          case 1: return STATUS_UNKNOWN;
          case 2: return PENDING;
          case 3: return PARTTRADED;
          case 4: return CANCELLED;
          case 5: return REJECTED;
          case 6: return ALLTRADED;
          case 7: return ONTRADED;
          case 8: return INSERT_FAILED;
          case 9: return INSERT_REJECT;
          case 10: return CANCELLING;
          case 11: return INSERTED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OrderStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OrderStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OrderStatus>() {
              public OrderStatus findValueByNumber(int number) {
                return OrderStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(19);
      }

      private static final OrderStatus[] VALUES = values();

      public static OrderStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OrderStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OrderStatus)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.MarketDataType}
     */
    public enum MarketDataType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MD_UNKNOWN = 1;</code>
       */
      MD_UNKNOWN(0, 1),
      /**
       * <code>ALL = 2;</code>
       */
      ALL(1, 2),
      /**
       * <code>UPDATE = 3;</code>
       */
      UPDATE(2, 3),
      ;

      /**
       * <code>MD_UNKNOWN = 1;</code>
       */
      public static final int MD_UNKNOWN_VALUE = 1;
      /**
       * <code>ALL = 2;</code>
       */
      public static final int ALL_VALUE = 2;
      /**
       * <code>UPDATE = 3;</code>
       */
      public static final int UPDATE_VALUE = 3;


      public final int getNumber() { return value; }

      public static MarketDataType valueOf(int value) {
        switch (value) {
          case 1: return MD_UNKNOWN;
          case 2: return ALL;
          case 3: return UPDATE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MarketDataType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MarketDataType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MarketDataType>() {
              public MarketDataType findValueByNumber(int number) {
                return MarketDataType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(20);
      }

      private static final MarketDataType[] VALUES = values();

      public static MarketDataType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private MarketDataType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.MarketDataType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.SecurityStatus}
     */
    public enum SecurityStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SECURITY_READY = 1;</code>
       */
      SECURITY_READY(0, 1),
      /**
       * <code>SECURITY_UPLIMIT = 2;</code>
       */
      SECURITY_UPLIMIT(1, 2),
      /**
       * <code>SECURITY_DOWNLIMIT = 3;</code>
       */
      SECURITY_DOWNLIMIT(2, 3),
      /**
       * <code>SECURITY_SUSPENDED = 4;</code>
       */
      SECURITY_SUSPENDED(3, 4),
      ;

      /**
       * <code>SECURITY_READY = 1;</code>
       */
      public static final int SECURITY_READY_VALUE = 1;
      /**
       * <code>SECURITY_UPLIMIT = 2;</code>
       */
      public static final int SECURITY_UPLIMIT_VALUE = 2;
      /**
       * <code>SECURITY_DOWNLIMIT = 3;</code>
       */
      public static final int SECURITY_DOWNLIMIT_VALUE = 3;
      /**
       * <code>SECURITY_SUSPENDED = 4;</code>
       */
      public static final int SECURITY_SUSPENDED_VALUE = 4;


      public final int getNumber() { return value; }

      public static SecurityStatus valueOf(int value) {
        switch (value) {
          case 1: return SECURITY_READY;
          case 2: return SECURITY_UPLIMIT;
          case 3: return SECURITY_DOWNLIMIT;
          case 4: return SECURITY_SUSPENDED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SecurityStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SecurityStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SecurityStatus>() {
              public SecurityStatus findValueByNumber(int number) {
                return SecurityStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(21);
      }

      private static final SecurityStatus[] VALUES = values();

      public static SecurityStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SecurityStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.SecurityStatus)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.TraderCommandType}
     */
    public enum TraderCommandType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TC_UNKNOWN = -1;</code>
       */
      TC_UNKNOWN(0, -1),
      /**
       * <code>PAUSEJOB = 0;</code>
       */
      PAUSEJOB(1, 0),
      /**
       * <code>REPLAYJOB = 1;</code>
       */
      REPLAYJOB(2, 1),
      /**
       * <code>ENDJOB = 2;</code>
       */
      ENDJOB(3, 2),
      /**
       * <code>ACCEPT_APPROVE = 3;</code>
       *
       * <pre>
       * 审批通过
       * </pre>
       */
      ACCEPT_APPROVE(4, 3),
      /**
       * <code>REJECT_APPROVE = 4;</code>
       *
       * <pre>
       * 审批驳回
       * </pre>
       */
      REJECT_APPROVE(5, 4),
      /**
       * <code>CONFIRM_EXECUTE = 5;</code>
       *
       * <pre>
       * 确认执行
       * </pre>
       */
      CONFIRM_EXECUTE(6, 5),
      /**
       * <code>REJECT_EXECUTE = 6;</code>
       *
       * <pre>
       * 拒绝执行
       * </pre>
       */
      REJECT_EXECUTE(7, 6),
      ;

      /**
       * <code>TC_UNKNOWN = -1;</code>
       */
      public static final int TC_UNKNOWN_VALUE = -1;
      /**
       * <code>PAUSEJOB = 0;</code>
       */
      public static final int PAUSEJOB_VALUE = 0;
      /**
       * <code>REPLAYJOB = 1;</code>
       */
      public static final int REPLAYJOB_VALUE = 1;
      /**
       * <code>ENDJOB = 2;</code>
       */
      public static final int ENDJOB_VALUE = 2;
      /**
       * <code>ACCEPT_APPROVE = 3;</code>
       *
       * <pre>
       * 审批通过
       * </pre>
       */
      public static final int ACCEPT_APPROVE_VALUE = 3;
      /**
       * <code>REJECT_APPROVE = 4;</code>
       *
       * <pre>
       * 审批驳回
       * </pre>
       */
      public static final int REJECT_APPROVE_VALUE = 4;
      /**
       * <code>CONFIRM_EXECUTE = 5;</code>
       *
       * <pre>
       * 确认执行
       * </pre>
       */
      public static final int CONFIRM_EXECUTE_VALUE = 5;
      /**
       * <code>REJECT_EXECUTE = 6;</code>
       *
       * <pre>
       * 拒绝执行
       * </pre>
       */
      public static final int REJECT_EXECUTE_VALUE = 6;


      public final int getNumber() { return value; }

      public static TraderCommandType valueOf(int value) {
        switch (value) {
          case -1: return TC_UNKNOWN;
          case 0: return PAUSEJOB;
          case 1: return REPLAYJOB;
          case 2: return ENDJOB;
          case 3: return ACCEPT_APPROVE;
          case 4: return REJECT_APPROVE;
          case 5: return CONFIRM_EXECUTE;
          case 6: return REJECT_EXECUTE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TraderCommandType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TraderCommandType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TraderCommandType>() {
              public TraderCommandType findValueByNumber(int number) {
                return TraderCommandType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(22);
      }

      private static final TraderCommandType[] VALUES = values();

      public static TraderCommandType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TraderCommandType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.TraderCommandType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.SecurityProviderEnum}
     */
    public enum SecurityProviderEnum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PROVIDER_UNKNOWN = 0;</code>
       */
      PROVIDER_UNKNOWN(0, 0),
      /**
       * <code>PROVIDER_CTP_FUTURES = 1;</code>
       *
       * <pre>
       *CTP
       * </pre>
       */
      PROVIDER_CTP_FUTURES(1, 1),
      /**
       * <code>PROVIDER_XTP_SECURITIES = 2;</code>
       *
       * <pre>
       *中泰XTP
       * </pre>
       */
      PROVIDER_XTP_SECURITIES(2, 2),
      /**
       * <code>PROVIDER_EVERBRIGHT_FUTURES = 3;</code>
       */
      PROVIDER_EVERBRIGHT_FUTURES(3, 3),
      /**
       * <code>PROVIDER_JINZHENG_SECURITIES = 4;</code>
       *
       * <pre>
       *金证
       * </pre>
       */
      PROVIDER_JINZHENG_SECURITIES(4, 4),
      /**
       * <code>PROVIDER_GALAXY_FUTURES = 5;</code>
       */
      PROVIDER_GALAXY_FUTURES(5, 5),
      /**
       * <code>PROVIDER_APEX_SECURITIES = 6;</code>
       *
       * <pre>
       *顶点
       * </pre>
       */
      PROVIDER_APEX_SECURITIES(6, 6),
      /**
       * <code>PROVIDER_ZHONGRONG = 7;</code>
       */
      PROVIDER_ZHONGRONG(7, 7),
      /**
       * <code>PROVIDER_HANDSUN = 8;</code>
       *
       * <pre>
       *恒生o32
       * </pre>
       */
      PROVIDER_HANDSUN(8, 8),
      /**
       * <code>PROVIDER_MINGCE = 9;</code>
       *
       * <pre>
       *名策模拟
       * </pre>
       */
      PROVIDER_MINGCE(9, 9),
      /**
       * <code>PROVIDER_MINGCE_FUTURES = 10;</code>
       *
       * <pre>
       *名策期货模拟
       * </pre>
       */
      PROVIDER_MINGCE_FUTURES(10, 10),
      /**
       * <code>PROVIDER_SHZHENG_SECURITIES = 11;</code>
       *
       * <pre>
       *深圳通
       * </pre>
       */
      PROVIDER_SHZHENG_SECURITIES(11, 11),
      /**
       * <code>PROVIDER_GUANGDA_SECURITIES = 12;</code>
       *
       * <pre>
       *光大
       * </pre>
       */
      PROVIDER_GUANGDA_SECURITIES(12, 12),
      /**
       * <code>PROVIDER_HUIANKINGDOM_SECURITIES = 13;</code>
       *
       * <pre>
       *金证惠安
       * </pre>
       */
      PROVIDER_HUIANKINGDOM_SECURITIES(13, 13),
      /**
       * <code>PROVIDER_EBROKER_SECURITIES = 14;</code>
       */
      PROVIDER_EBROKER_SECURITIES(14, 14),
      /**
       * <code>PROVIDER_JINZHENG_CREDIT = 15;</code>
       *
       * <pre>
       *金证信用
       * </pre>
       */
      PROVIDER_JINZHENG_CREDIT(15, 15),
      /**
       * <code>PROVIDER_HANDSUN08 = 16;</code>
       *
       * <pre>
       *恒生UFX
       * </pre>
       */
      PROVIDER_HANDSUN08(16, 16),
      /**
       * <code>PROVIDER_APEX_CREDIT = 17;</code>
       *
       * <pre>
       *顶点信用
       * </pre>
       */
      PROVIDER_APEX_CREDIT(17, 17),
      /**
       * <code>PROVIDER_JINZHENG_OPTION = 18;</code>
       *
       * <pre>
       *金证期权
       * </pre>
       */
      PROVIDER_JINZHENG_OPTION(18, 18),
      /**
       * <code>PROVIDER_SYNCBP_TOPTRADE = 19;</code>
       *
       * <pre>
       *同步BP名策模拟
       * </pre>
       */
      PROVIDER_SYNCBP_TOPTRADE(19, 19),
      /**
       * <code>PROVIDER_HANDSUN08_OPTION = 20;</code>
       *
       * <pre>
       *恒生UFX期权
       * </pre>
       */
      PROVIDER_HANDSUN08_OPTION(20, 20),
      /**
       * <code>PROVIDER_HANDSUN08_CREDIT = 21;</code>
       *
       * <pre>
       *恒生UFX信用
       * </pre>
       */
      PROVIDER_HANDSUN08_CREDIT(21, 21),
      /**
       * <code>PROVIDER_HANDSUN_PBOX = 22;</code>
       *
       * <pre>
       *恒生Pbox
       * </pre>
       */
      PROVIDER_HANDSUN_PBOX(22, 22),
      /**
       * <code>PROVIDER_CTP_MINI2_FUTURES = 23;</code>
       *
       * <pre>
       *CTP_MINI2期货
       * </pre>
       */
      PROVIDER_CTP_MINI2_FUTURES(23, 23),
      ;

      /**
       * <code>PROVIDER_UNKNOWN = 0;</code>
       */
      public static final int PROVIDER_UNKNOWN_VALUE = 0;
      /**
       * <code>PROVIDER_CTP_FUTURES = 1;</code>
       *
       * <pre>
       *CTP
       * </pre>
       */
      public static final int PROVIDER_CTP_FUTURES_VALUE = 1;
      /**
       * <code>PROVIDER_XTP_SECURITIES = 2;</code>
       *
       * <pre>
       *中泰XTP
       * </pre>
       */
      public static final int PROVIDER_XTP_SECURITIES_VALUE = 2;
      /**
       * <code>PROVIDER_EVERBRIGHT_FUTURES = 3;</code>
       */
      public static final int PROVIDER_EVERBRIGHT_FUTURES_VALUE = 3;
      /**
       * <code>PROVIDER_JINZHENG_SECURITIES = 4;</code>
       *
       * <pre>
       *金证
       * </pre>
       */
      public static final int PROVIDER_JINZHENG_SECURITIES_VALUE = 4;
      /**
       * <code>PROVIDER_GALAXY_FUTURES = 5;</code>
       */
      public static final int PROVIDER_GALAXY_FUTURES_VALUE = 5;
      /**
       * <code>PROVIDER_APEX_SECURITIES = 6;</code>
       *
       * <pre>
       *顶点
       * </pre>
       */
      public static final int PROVIDER_APEX_SECURITIES_VALUE = 6;
      /**
       * <code>PROVIDER_ZHONGRONG = 7;</code>
       */
      public static final int PROVIDER_ZHONGRONG_VALUE = 7;
      /**
       * <code>PROVIDER_HANDSUN = 8;</code>
       *
       * <pre>
       *恒生o32
       * </pre>
       */
      public static final int PROVIDER_HANDSUN_VALUE = 8;
      /**
       * <code>PROVIDER_MINGCE = 9;</code>
       *
       * <pre>
       *名策模拟
       * </pre>
       */
      public static final int PROVIDER_MINGCE_VALUE = 9;
      /**
       * <code>PROVIDER_MINGCE_FUTURES = 10;</code>
       *
       * <pre>
       *名策期货模拟
       * </pre>
       */
      public static final int PROVIDER_MINGCE_FUTURES_VALUE = 10;
      /**
       * <code>PROVIDER_SHZHENG_SECURITIES = 11;</code>
       *
       * <pre>
       *深圳通
       * </pre>
       */
      public static final int PROVIDER_SHZHENG_SECURITIES_VALUE = 11;
      /**
       * <code>PROVIDER_GUANGDA_SECURITIES = 12;</code>
       *
       * <pre>
       *光大
       * </pre>
       */
      public static final int PROVIDER_GUANGDA_SECURITIES_VALUE = 12;
      /**
       * <code>PROVIDER_HUIANKINGDOM_SECURITIES = 13;</code>
       *
       * <pre>
       *金证惠安
       * </pre>
       */
      public static final int PROVIDER_HUIANKINGDOM_SECURITIES_VALUE = 13;
      /**
       * <code>PROVIDER_EBROKER_SECURITIES = 14;</code>
       */
      public static final int PROVIDER_EBROKER_SECURITIES_VALUE = 14;
      /**
       * <code>PROVIDER_JINZHENG_CREDIT = 15;</code>
       *
       * <pre>
       *金证信用
       * </pre>
       */
      public static final int PROVIDER_JINZHENG_CREDIT_VALUE = 15;
      /**
       * <code>PROVIDER_HANDSUN08 = 16;</code>
       *
       * <pre>
       *恒生UFX
       * </pre>
       */
      public static final int PROVIDER_HANDSUN08_VALUE = 16;
      /**
       * <code>PROVIDER_APEX_CREDIT = 17;</code>
       *
       * <pre>
       *顶点信用
       * </pre>
       */
      public static final int PROVIDER_APEX_CREDIT_VALUE = 17;
      /**
       * <code>PROVIDER_JINZHENG_OPTION = 18;</code>
       *
       * <pre>
       *金证期权
       * </pre>
       */
      public static final int PROVIDER_JINZHENG_OPTION_VALUE = 18;
      /**
       * <code>PROVIDER_SYNCBP_TOPTRADE = 19;</code>
       *
       * <pre>
       *同步BP名策模拟
       * </pre>
       */
      public static final int PROVIDER_SYNCBP_TOPTRADE_VALUE = 19;
      /**
       * <code>PROVIDER_HANDSUN08_OPTION = 20;</code>
       *
       * <pre>
       *恒生UFX期权
       * </pre>
       */
      public static final int PROVIDER_HANDSUN08_OPTION_VALUE = 20;
      /**
       * <code>PROVIDER_HANDSUN08_CREDIT = 21;</code>
       *
       * <pre>
       *恒生UFX信用
       * </pre>
       */
      public static final int PROVIDER_HANDSUN08_CREDIT_VALUE = 21;
      /**
       * <code>PROVIDER_HANDSUN_PBOX = 22;</code>
       *
       * <pre>
       *恒生Pbox
       * </pre>
       */
      public static final int PROVIDER_HANDSUN_PBOX_VALUE = 22;
      /**
       * <code>PROVIDER_CTP_MINI2_FUTURES = 23;</code>
       *
       * <pre>
       *CTP_MINI2期货
       * </pre>
       */
      public static final int PROVIDER_CTP_MINI2_FUTURES_VALUE = 23;


      public final int getNumber() { return value; }

      public static SecurityProviderEnum valueOf(int value) {
        switch (value) {
          case 0: return PROVIDER_UNKNOWN;
          case 1: return PROVIDER_CTP_FUTURES;
          case 2: return PROVIDER_XTP_SECURITIES;
          case 3: return PROVIDER_EVERBRIGHT_FUTURES;
          case 4: return PROVIDER_JINZHENG_SECURITIES;
          case 5: return PROVIDER_GALAXY_FUTURES;
          case 6: return PROVIDER_APEX_SECURITIES;
          case 7: return PROVIDER_ZHONGRONG;
          case 8: return PROVIDER_HANDSUN;
          case 9: return PROVIDER_MINGCE;
          case 10: return PROVIDER_MINGCE_FUTURES;
          case 11: return PROVIDER_SHZHENG_SECURITIES;
          case 12: return PROVIDER_GUANGDA_SECURITIES;
          case 13: return PROVIDER_HUIANKINGDOM_SECURITIES;
          case 14: return PROVIDER_EBROKER_SECURITIES;
          case 15: return PROVIDER_JINZHENG_CREDIT;
          case 16: return PROVIDER_HANDSUN08;
          case 17: return PROVIDER_APEX_CREDIT;
          case 18: return PROVIDER_JINZHENG_OPTION;
          case 19: return PROVIDER_SYNCBP_TOPTRADE;
          case 20: return PROVIDER_HANDSUN08_OPTION;
          case 21: return PROVIDER_HANDSUN08_CREDIT;
          case 22: return PROVIDER_HANDSUN_PBOX;
          case 23: return PROVIDER_CTP_MINI2_FUTURES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SecurityProviderEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SecurityProviderEnum>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SecurityProviderEnum>() {
              public SecurityProviderEnum findValueByNumber(int number) {
                return SecurityProviderEnum.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(23);
      }

      private static final SecurityProviderEnum[] VALUES = values();

      public static SecurityProviderEnum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SecurityProviderEnum(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.SecurityProviderEnum)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.SecurityType}
     */
    public enum SecurityType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SECURITY_UNKNOWN = 0;</code>
       */
      SECURITY_UNKNOWN(0, 0),
      /**
       * <code>SECURITY_FUTURE = 1;</code>
       *
       * <pre>
       *期货账户
       * </pre>
       */
      SECURITY_FUTURE(1, 1),
      /**
       * <code>SECURITY_STOCK = 2;</code>
       *
       * <pre>
       *股票账户
       * </pre>
       */
      SECURITY_STOCK(2, 2),
      /**
       * <code>SECURITY_CREDIT = 3;</code>
       *
       * <pre>
       *信用账户
       * </pre>
       */
      SECURITY_CREDIT(3, 3),
      /**
       * <code>SECURITY_OPTION = 4;</code>
       *
       * <pre>
       *期权账户
       * </pre>
       */
      SECURITY_OPTION(4, 4),
      ;

      /**
       * <code>SECURITY_UNKNOWN = 0;</code>
       */
      public static final int SECURITY_UNKNOWN_VALUE = 0;
      /**
       * <code>SECURITY_FUTURE = 1;</code>
       *
       * <pre>
       *期货账户
       * </pre>
       */
      public static final int SECURITY_FUTURE_VALUE = 1;
      /**
       * <code>SECURITY_STOCK = 2;</code>
       *
       * <pre>
       *股票账户
       * </pre>
       */
      public static final int SECURITY_STOCK_VALUE = 2;
      /**
       * <code>SECURITY_CREDIT = 3;</code>
       *
       * <pre>
       *信用账户
       * </pre>
       */
      public static final int SECURITY_CREDIT_VALUE = 3;
      /**
       * <code>SECURITY_OPTION = 4;</code>
       *
       * <pre>
       *期权账户
       * </pre>
       */
      public static final int SECURITY_OPTION_VALUE = 4;


      public final int getNumber() { return value; }

      public static SecurityType valueOf(int value) {
        switch (value) {
          case 0: return SECURITY_UNKNOWN;
          case 1: return SECURITY_FUTURE;
          case 2: return SECURITY_STOCK;
          case 3: return SECURITY_CREDIT;
          case 4: return SECURITY_OPTION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SecurityType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SecurityType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SecurityType>() {
              public SecurityType findValueByNumber(int number) {
                return SecurityType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(24);
      }

      private static final SecurityType[] VALUES = values();

      public static SecurityType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SecurityType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.SecurityType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.CurrencyType}
     */
    public enum CurrencyType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CURRENCY_UNKNOWN = 0;</code>
       */
      CURRENCY_UNKNOWN(0, 0),
      /**
       * <code>CURRENCY_RMB = 1;</code>
       */
      CURRENCY_RMB(1, 1),
      /**
       * <code>CURRENCY_US = 2;</code>
       */
      CURRENCY_US(2, 2),
      /**
       * <code>CURRENCY_HK = 3;</code>
       */
      CURRENCY_HK(3, 3),
      ;

      /**
       * <code>CURRENCY_UNKNOWN = 0;</code>
       */
      public static final int CURRENCY_UNKNOWN_VALUE = 0;
      /**
       * <code>CURRENCY_RMB = 1;</code>
       */
      public static final int CURRENCY_RMB_VALUE = 1;
      /**
       * <code>CURRENCY_US = 2;</code>
       */
      public static final int CURRENCY_US_VALUE = 2;
      /**
       * <code>CURRENCY_HK = 3;</code>
       */
      public static final int CURRENCY_HK_VALUE = 3;


      public final int getNumber() { return value; }

      public static CurrencyType valueOf(int value) {
        switch (value) {
          case 0: return CURRENCY_UNKNOWN;
          case 1: return CURRENCY_RMB;
          case 2: return CURRENCY_US;
          case 3: return CURRENCY_HK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CurrencyType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CurrencyType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CurrencyType>() {
              public CurrencyType findValueByNumber(int number) {
                return CurrencyType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(25);
      }

      private static final CurrencyType[] VALUES = values();

      public static CurrencyType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CurrencyType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.CurrencyType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.LongShortType}
     */
    public enum LongShortType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LONGSHORT_UNKNOWN = 0;</code>
       */
      LONGSHORT_UNKNOWN(0, 0),
      /**
       * <code>LONGSHORT_NET = 1;</code>
       */
      LONGSHORT_NET(1, 1),
      /**
       * <code>LONGSHORT_LONG = 2;</code>
       */
      LONGSHORT_LONG(2, 2),
      /**
       * <code>LONGSHORT_SHORT = 3;</code>
       */
      LONGSHORT_SHORT(3, 3),
      ;

      /**
       * <code>LONGSHORT_UNKNOWN = 0;</code>
       */
      public static final int LONGSHORT_UNKNOWN_VALUE = 0;
      /**
       * <code>LONGSHORT_NET = 1;</code>
       */
      public static final int LONGSHORT_NET_VALUE = 1;
      /**
       * <code>LONGSHORT_LONG = 2;</code>
       */
      public static final int LONGSHORT_LONG_VALUE = 2;
      /**
       * <code>LONGSHORT_SHORT = 3;</code>
       */
      public static final int LONGSHORT_SHORT_VALUE = 3;


      public final int getNumber() { return value; }

      public static LongShortType valueOf(int value) {
        switch (value) {
          case 0: return LONGSHORT_UNKNOWN;
          case 1: return LONGSHORT_NET;
          case 2: return LONGSHORT_LONG;
          case 3: return LONGSHORT_SHORT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LongShortType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LongShortType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LongShortType>() {
              public LongShortType findValueByNumber(int number) {
                return LongShortType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(26);
      }

      private static final LongShortType[] VALUES = values();

      public static LongShortType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private LongShortType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.LongShortType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.HedgeStateEnum}
     */
    public enum HedgeStateEnum
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HEDGESTATE_UNKNOWN = 0;</code>
       */
      HEDGESTATE_UNKNOWN(0, 0),
      /**
       * <code>HEDGESTATE_ERROR = 1;</code>
       */
      HEDGESTATE_ERROR(1, 1),
      /**
       * <code>HEDGESTATE_LONGEXPOSUREEXCESS = 2;</code>
       */
      HEDGESTATE_LONGEXPOSUREEXCESS(2, 2),
      /**
       * <code>HEDGESTATE_SHORTEXPOSUREEXCESS = 3;</code>
       */
      HEDGESTATE_SHORTEXPOSUREEXCESS(3, 3),
      /**
       * <code>HEDGESTATE_EXTENDFINISHED = 4;</code>
       */
      HEDGESTATE_EXTENDFINISHED(4, 4),
      /**
       * <code>HEDGESTATE_HEDGEFINISHED = 5;</code>
       */
      HEDGESTATE_HEDGEFINISHED(5, 5),
      /**
       * <code>HEDGESTATE_HEDGESTOP = 6;</code>
       */
      HEDGESTATE_HEDGESTOP(6, 6),
      ;

      /**
       * <code>HEDGESTATE_UNKNOWN = 0;</code>
       */
      public static final int HEDGESTATE_UNKNOWN_VALUE = 0;
      /**
       * <code>HEDGESTATE_ERROR = 1;</code>
       */
      public static final int HEDGESTATE_ERROR_VALUE = 1;
      /**
       * <code>HEDGESTATE_LONGEXPOSUREEXCESS = 2;</code>
       */
      public static final int HEDGESTATE_LONGEXPOSUREEXCESS_VALUE = 2;
      /**
       * <code>HEDGESTATE_SHORTEXPOSUREEXCESS = 3;</code>
       */
      public static final int HEDGESTATE_SHORTEXPOSUREEXCESS_VALUE = 3;
      /**
       * <code>HEDGESTATE_EXTENDFINISHED = 4;</code>
       */
      public static final int HEDGESTATE_EXTENDFINISHED_VALUE = 4;
      /**
       * <code>HEDGESTATE_HEDGEFINISHED = 5;</code>
       */
      public static final int HEDGESTATE_HEDGEFINISHED_VALUE = 5;
      /**
       * <code>HEDGESTATE_HEDGESTOP = 6;</code>
       */
      public static final int HEDGESTATE_HEDGESTOP_VALUE = 6;


      public final int getNumber() { return value; }

      public static HedgeStateEnum valueOf(int value) {
        switch (value) {
          case 0: return HEDGESTATE_UNKNOWN;
          case 1: return HEDGESTATE_ERROR;
          case 2: return HEDGESTATE_LONGEXPOSUREEXCESS;
          case 3: return HEDGESTATE_SHORTEXPOSUREEXCESS;
          case 4: return HEDGESTATE_EXTENDFINISHED;
          case 5: return HEDGESTATE_HEDGEFINISHED;
          case 6: return HEDGESTATE_HEDGESTOP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<HedgeStateEnum>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<HedgeStateEnum>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<HedgeStateEnum>() {
              public HedgeStateEnum findValueByNumber(int number) {
                return HedgeStateEnum.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(27);
      }

      private static final HedgeStateEnum[] VALUES = values();

      public static HedgeStateEnum valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private HedgeStateEnum(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.HedgeStateEnum)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.ErrorType}
     */
    public enum ErrorType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ERROR_UNKNOWN = 0;</code>
       */
      ERROR_UNKNOWN(0, 0),
      /**
       * <code>ERROR_NONE = 1;</code>
       */
      ERROR_NONE(1, 1),
      /**
       * <code>ERROR_CONNECTION_DOWN = 2;</code>
       */
      ERROR_CONNECTION_DOWN(2, 2),
      /**
       * <code>ERROR_FAILED_TO_SEND = 3;</code>
       */
      ERROR_FAILED_TO_SEND(3, 3),
      /**
       * <code>ERROR_FAILED_TO_DECODE_PROTOBUF = 4;</code>
       */
      ERROR_FAILED_TO_DECODE_PROTOBUF(4, 4),
      /**
       * <code>ERROR_NO_ORDER_NO = 5;</code>
       */
      ERROR_NO_ORDER_NO(5, 5),
      /**
       * <code>ERROR_WRONG_PARAMETER = 7;</code>
       */
      ERROR_WRONG_PARAMETER(6, 7),
      /**
       * <code>ERROR_WRONG_PARAMETER_INVALID_VOL = 8;</code>
       */
      ERROR_WRONG_PARAMETER_INVALID_VOL(7, 8),
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_ACCOUNTINFO = 9;</code>
       */
      ERROR_WRONG_PARAMETER_NO_ACCOUNTINFO(8, 9),
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_PASSWORD = 10;</code>
       */
      ERROR_WRONG_PARAMETER_NO_PASSWORD(9, 10),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_PASSWORD = 11;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_PASSWORD(10, 11),
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_SEC_TYPE = 12;</code>
       */
      ERROR_WRONG_PARAMETER_NO_SEC_TYPE(11, 12),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_SEC_TYPE = 13;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_SEC_TYPE(12, 13),
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_SEC_PROVIDER = 14;</code>
       */
      ERROR_WRONG_PARAMETER_NO_SEC_PROVIDER(13, 14),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER = 15;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER(14, 15),
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_NO = 16;</code>
       */
      ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_NO(15, 16),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_SEC_BRANCH_NO = 17;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_SEC_BRANCH_NO(16, 17),
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_STK_ACCOUNT = 18;</code>
       */
      ERROR_WRONG_PARAMETER_NO_STK_ACCOUNT(17, 18),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_STK_ACCOUNT = 19;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_STK_ACCOUNT(18, 19),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_BUYSELL = 20;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_BUYSELL(19, 20),
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE = 21;</code>
       */
      ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE(20, 21),
      /**
       * <code>ERROR_NOT_LOGIN = 30;</code>
       */
      ERROR_NOT_LOGIN(23, 30),
      /**
       * <code>ERROR_UNSUPPOTED = 31;</code>
       */
      ERROR_UNSUPPOTED(24, 31),
      /**
       * <code>ERROR_NOT_AVAILABLE = 32;</code>
       */
      ERROR_NOT_AVAILABLE(25, 32),
      /**
       * <code>ERROR_RISK_ORDER_CHECK_FAILED = 33;</code>
       */
      ERROR_RISK_ORDER_CHECK_FAILED(26, 33),
      /**
       * <code>ERROR_FAILED_TO_CANCELORDER = 34;</code>
       */
      ERROR_FAILED_TO_CANCELORDER(27, 34),
      /**
       * <code>ERROR_FAILED_TO_INSERTORDER = 35;</code>
       */
      ERROR_FAILED_TO_INSERTORDER(28, 35),
      /**
       * <code>ERROR_FAILED_TO_QUERYORDER = 36;</code>
       */
      ERROR_FAILED_TO_QUERYORDER(29, 36),
      /**
       * <code>ERROR_FAILED_TO_QUERYTRADE = 37;</code>
       */
      ERROR_FAILED_TO_QUERYTRADE(30, 37),
      /**
       * <code>ERROR_FAILED_TO_QUERYACCOUNT = 38;</code>
       */
      ERROR_FAILED_TO_QUERYACCOUNT(31, 38),
      /**
       * <code>ERROR_FAILED_TO_QUERYPOSITION = 39;</code>
       */
      ERROR_FAILED_TO_QUERYPOSITION(32, 39),
      /**
       * <code>ERROR_NO_DIVIDE_STOCK_DATA = 40;</code>
       */
      ERROR_NO_DIVIDE_STOCK_DATA(33, 40),
      ;

      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_ORDERSETTINGS = 21;</code>
       */
      public static final ErrorType ERROR_WRONG_PARAMETER_WRONG_ORDERSETTINGS = ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_ALGO_TYPE = 21;</code>
       */
      public static final ErrorType ERROR_WRONG_PARAMETER_WRONG_ALGO_TYPE = ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE;
      /**
       * <code>ERROR_UNKNOWN = 0;</code>
       */
      public static final int ERROR_UNKNOWN_VALUE = 0;
      /**
       * <code>ERROR_NONE = 1;</code>
       */
      public static final int ERROR_NONE_VALUE = 1;
      /**
       * <code>ERROR_CONNECTION_DOWN = 2;</code>
       */
      public static final int ERROR_CONNECTION_DOWN_VALUE = 2;
      /**
       * <code>ERROR_FAILED_TO_SEND = 3;</code>
       */
      public static final int ERROR_FAILED_TO_SEND_VALUE = 3;
      /**
       * <code>ERROR_FAILED_TO_DECODE_PROTOBUF = 4;</code>
       */
      public static final int ERROR_FAILED_TO_DECODE_PROTOBUF_VALUE = 4;
      /**
       * <code>ERROR_NO_ORDER_NO = 5;</code>
       */
      public static final int ERROR_NO_ORDER_NO_VALUE = 5;
      /**
       * <code>ERROR_WRONG_PARAMETER = 7;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_VALUE = 7;
      /**
       * <code>ERROR_WRONG_PARAMETER_INVALID_VOL = 8;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_INVALID_VOL_VALUE = 8;
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_ACCOUNTINFO = 9;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_NO_ACCOUNTINFO_VALUE = 9;
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_PASSWORD = 10;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_NO_PASSWORD_VALUE = 10;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_PASSWORD = 11;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_PASSWORD_VALUE = 11;
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_SEC_TYPE = 12;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_NO_SEC_TYPE_VALUE = 12;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_SEC_TYPE = 13;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_SEC_TYPE_VALUE = 13;
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_SEC_PROVIDER = 14;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_NO_SEC_PROVIDER_VALUE = 14;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER = 15;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER_VALUE = 15;
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_NO = 16;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_NO_VALUE = 16;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_SEC_BRANCH_NO = 17;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_SEC_BRANCH_NO_VALUE = 17;
      /**
       * <code>ERROR_WRONG_PARAMETER_NO_STK_ACCOUNT = 18;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_NO_STK_ACCOUNT_VALUE = 18;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_STK_ACCOUNT = 19;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_STK_ACCOUNT_VALUE = 19;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_BUYSELL = 20;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_BUYSELL_VALUE = 20;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE = 21;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE_VALUE = 21;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_ORDERSETTINGS = 21;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_ORDERSETTINGS_VALUE = 21;
      /**
       * <code>ERROR_WRONG_PARAMETER_WRONG_ALGO_TYPE = 21;</code>
       */
      public static final int ERROR_WRONG_PARAMETER_WRONG_ALGO_TYPE_VALUE = 21;
      /**
       * <code>ERROR_NOT_LOGIN = 30;</code>
       */
      public static final int ERROR_NOT_LOGIN_VALUE = 30;
      /**
       * <code>ERROR_UNSUPPOTED = 31;</code>
       */
      public static final int ERROR_UNSUPPOTED_VALUE = 31;
      /**
       * <code>ERROR_NOT_AVAILABLE = 32;</code>
       */
      public static final int ERROR_NOT_AVAILABLE_VALUE = 32;
      /**
       * <code>ERROR_RISK_ORDER_CHECK_FAILED = 33;</code>
       */
      public static final int ERROR_RISK_ORDER_CHECK_FAILED_VALUE = 33;
      /**
       * <code>ERROR_FAILED_TO_CANCELORDER = 34;</code>
       */
      public static final int ERROR_FAILED_TO_CANCELORDER_VALUE = 34;
      /**
       * <code>ERROR_FAILED_TO_INSERTORDER = 35;</code>
       */
      public static final int ERROR_FAILED_TO_INSERTORDER_VALUE = 35;
      /**
       * <code>ERROR_FAILED_TO_QUERYORDER = 36;</code>
       */
      public static final int ERROR_FAILED_TO_QUERYORDER_VALUE = 36;
      /**
       * <code>ERROR_FAILED_TO_QUERYTRADE = 37;</code>
       */
      public static final int ERROR_FAILED_TO_QUERYTRADE_VALUE = 37;
      /**
       * <code>ERROR_FAILED_TO_QUERYACCOUNT = 38;</code>
       */
      public static final int ERROR_FAILED_TO_QUERYACCOUNT_VALUE = 38;
      /**
       * <code>ERROR_FAILED_TO_QUERYPOSITION = 39;</code>
       */
      public static final int ERROR_FAILED_TO_QUERYPOSITION_VALUE = 39;
      /**
       * <code>ERROR_NO_DIVIDE_STOCK_DATA = 40;</code>
       */
      public static final int ERROR_NO_DIVIDE_STOCK_DATA_VALUE = 40;


      public final int getNumber() { return value; }

      public static ErrorType valueOf(int value) {
        switch (value) {
          case 0: return ERROR_UNKNOWN;
          case 1: return ERROR_NONE;
          case 2: return ERROR_CONNECTION_DOWN;
          case 3: return ERROR_FAILED_TO_SEND;
          case 4: return ERROR_FAILED_TO_DECODE_PROTOBUF;
          case 5: return ERROR_NO_ORDER_NO;
          case 7: return ERROR_WRONG_PARAMETER;
          case 8: return ERROR_WRONG_PARAMETER_INVALID_VOL;
          case 9: return ERROR_WRONG_PARAMETER_NO_ACCOUNTINFO;
          case 10: return ERROR_WRONG_PARAMETER_NO_PASSWORD;
          case 11: return ERROR_WRONG_PARAMETER_WRONG_PASSWORD;
          case 12: return ERROR_WRONG_PARAMETER_NO_SEC_TYPE;
          case 13: return ERROR_WRONG_PARAMETER_WRONG_SEC_TYPE;
          case 14: return ERROR_WRONG_PARAMETER_NO_SEC_PROVIDER;
          case 15: return ERROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER;
          case 16: return ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_NO;
          case 17: return ERROR_WRONG_PARAMETER_WRONG_SEC_BRANCH_NO;
          case 18: return ERROR_WRONG_PARAMETER_NO_STK_ACCOUNT;
          case 19: return ERROR_WRONG_PARAMETER_WRONG_STK_ACCOUNT;
          case 20: return ERROR_WRONG_PARAMETER_WRONG_BUYSELL;
          case 21: return ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE;
          case 30: return ERROR_NOT_LOGIN;
          case 31: return ERROR_UNSUPPOTED;
          case 32: return ERROR_NOT_AVAILABLE;
          case 33: return ERROR_RISK_ORDER_CHECK_FAILED;
          case 34: return ERROR_FAILED_TO_CANCELORDER;
          case 35: return ERROR_FAILED_TO_INSERTORDER;
          case 36: return ERROR_FAILED_TO_QUERYORDER;
          case 37: return ERROR_FAILED_TO_QUERYTRADE;
          case 38: return ERROR_FAILED_TO_QUERYACCOUNT;
          case 39: return ERROR_FAILED_TO_QUERYPOSITION;
          case 40: return ERROR_NO_DIVIDE_STOCK_DATA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ErrorType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ErrorType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ErrorType>() {
              public ErrorType findValueByNumber(int number) {
                return ErrorType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(28);
      }

      private static final ErrorType[] VALUES = {
        ERROR_UNKNOWN, ERROR_NONE, ERROR_CONNECTION_DOWN, ERROR_FAILED_TO_SEND, ERROR_FAILED_TO_DECODE_PROTOBUF, ERROR_NO_ORDER_NO, ERROR_WRONG_PARAMETER, ERROR_WRONG_PARAMETER_INVALID_VOL, ERROR_WRONG_PARAMETER_NO_ACCOUNTINFO, ERROR_WRONG_PARAMETER_NO_PASSWORD, ERROR_WRONG_PARAMETER_WRONG_PASSWORD, ERROR_WRONG_PARAMETER_NO_SEC_TYPE, ERROR_WRONG_PARAMETER_WRONG_SEC_TYPE, ERROR_WRONG_PARAMETER_NO_SEC_PROVIDER, ERROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER, ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_NO, ERROR_WRONG_PARAMETER_WRONG_SEC_BRANCH_NO, ERROR_WRONG_PARAMETER_NO_STK_ACCOUNT, ERROR_WRONG_PARAMETER_WRONG_STK_ACCOUNT, ERROR_WRONG_PARAMETER_WRONG_BUYSELL, ERROR_WRONG_PARAMETER_WRONG_OPENCLOSE, ERROR_WRONG_PARAMETER_WRONG_ORDERSETTINGS, ERROR_WRONG_PARAMETER_WRONG_ALGO_TYPE, ERROR_NOT_LOGIN, ERROR_UNSUPPOTED, ERROR_NOT_AVAILABLE, ERROR_RISK_ORDER_CHECK_FAILED, ERROR_FAILED_TO_CANCELORDER, ERROR_FAILED_TO_INSERTORDER, ERROR_FAILED_TO_QUERYORDER, ERROR_FAILED_TO_QUERYTRADE, ERROR_FAILED_TO_QUERYACCOUNT, ERROR_FAILED_TO_QUERYPOSITION, ERROR_NO_DIVIDE_STOCK_DATA, 
      };

      public static ErrorType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ErrorType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.ErrorType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.AlgoType}
     */
    public enum AlgoType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ALGO_UNKNOWN = 0;</code>
       */
      ALGO_UNKNOWN(0, 0),
      /**
       * <code>ALGO_TWAP = 1;</code>
       */
      ALGO_TWAP(1, 1),
      /**
       * <code>ALGO_VWAP = 2;</code>
       */
      ALGO_VWAP(2, 2),
      ;

      /**
       * <code>ALGO_UNKNOWN = 0;</code>
       */
      public static final int ALGO_UNKNOWN_VALUE = 0;
      /**
       * <code>ALGO_TWAP = 1;</code>
       */
      public static final int ALGO_TWAP_VALUE = 1;
      /**
       * <code>ALGO_VWAP = 2;</code>
       */
      public static final int ALGO_VWAP_VALUE = 2;


      public final int getNumber() { return value; }

      public static AlgoType valueOf(int value) {
        switch (value) {
          case 0: return ALGO_UNKNOWN;
          case 1: return ALGO_TWAP;
          case 2: return ALGO_VWAP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AlgoType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AlgoType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AlgoType>() {
              public AlgoType findValueByNumber(int number) {
                return AlgoType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(29);
      }

      private static final AlgoType[] VALUES = values();

      public static AlgoType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private AlgoType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.AlgoType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.SpeedOpionType}
     */
    public enum SpeedOpionType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SPEEDOPTION_UNKNOWN = -1;</code>
       */
      SPEEDOPTION_UNKNOWN(0, -1),
      /**
       * <code>SPEEDOPTION_NORMAL = 0;</code>
       */
      SPEEDOPTION_NORMAL(1, 0),
      /**
       * <code>SPEEDOPTION_AIM = 1;</code>
       */
      SPEEDOPTION_AIM(2, 1),
      /**
       * <code>SPEEDOPTION_PIM = 2;</code>
       */
      SPEEDOPTION_PIM(3, 2),
      ;

      /**
       * <code>SPEEDOPTION_UNKNOWN = -1;</code>
       */
      public static final int SPEEDOPTION_UNKNOWN_VALUE = -1;
      /**
       * <code>SPEEDOPTION_NORMAL = 0;</code>
       */
      public static final int SPEEDOPTION_NORMAL_VALUE = 0;
      /**
       * <code>SPEEDOPTION_AIM = 1;</code>
       */
      public static final int SPEEDOPTION_AIM_VALUE = 1;
      /**
       * <code>SPEEDOPTION_PIM = 2;</code>
       */
      public static final int SPEEDOPTION_PIM_VALUE = 2;


      public final int getNumber() { return value; }

      public static SpeedOpionType valueOf(int value) {
        switch (value) {
          case -1: return SPEEDOPTION_UNKNOWN;
          case 0: return SPEEDOPTION_NORMAL;
          case 1: return SPEEDOPTION_AIM;
          case 2: return SPEEDOPTION_PIM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SpeedOpionType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SpeedOpionType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SpeedOpionType>() {
              public SpeedOpionType findValueByNumber(int number) {
                return SpeedOpionType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(30);
      }

      private static final SpeedOpionType[] VALUES = values();

      public static SpeedOpionType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SpeedOpionType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.SpeedOpionType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.MarketStyleType}
     */
    public enum MarketStyleType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_MARKET_STYLE = 0;</code>
       */
      UNKNOWN_MARKET_STYLE(0, 0),
      /**
       * <code>LARGER_CAP_SHARE = 1;</code>
       */
      LARGER_CAP_SHARE(1, 1),
      /**
       * <code>SMALL_MEDIUM_CAP_SHARE = 2;</code>
       */
      SMALL_MEDIUM_CAP_SHARE(2, 2),
      ;

      /**
       * <code>UNKNOWN_MARKET_STYLE = 0;</code>
       */
      public static final int UNKNOWN_MARKET_STYLE_VALUE = 0;
      /**
       * <code>LARGER_CAP_SHARE = 1;</code>
       */
      public static final int LARGER_CAP_SHARE_VALUE = 1;
      /**
       * <code>SMALL_MEDIUM_CAP_SHARE = 2;</code>
       */
      public static final int SMALL_MEDIUM_CAP_SHARE_VALUE = 2;


      public final int getNumber() { return value; }

      public static MarketStyleType valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_MARKET_STYLE;
          case 1: return LARGER_CAP_SHARE;
          case 2: return SMALL_MEDIUM_CAP_SHARE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MarketStyleType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MarketStyleType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MarketStyleType>() {
              public MarketStyleType findValueByNumber(int number) {
                return MarketStyleType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(31);
      }

      private static final MarketStyleType[] VALUES = values();

      public static MarketStyleType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private MarketStyleType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.MarketStyleType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.IndexStatusType}
     */
    public enum IndexStatusType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OpenHighGoHighSoleUp = 1;</code>
       */
      OpenHighGoHighSoleUp(0, 1),
      /**
       * <code>OpenLowGoHighCloseHigher = 2;</code>
       */
      OpenLowGoHighCloseHigher(1, 2),
      /**
       * <code>OpenHighGoLowCloseHigher = 3;</code>
       */
      OpenHighGoLowCloseHigher(2, 3),
      /**
       * <code>OpenLowUnderBaseCloseLower = 4;</code>
       */
      OpenLowUnderBaseCloseLower(3, 4),
      /**
       * <code>OpenHighGoLowCloseLower = 5;</code>
       */
      OpenHighGoLowCloseLower(4, 5),
      /**
       * <code>OpenLowGoLowSoleDown = 6;</code>
       */
      OpenLowGoLowSoleDown(5, 6),
      ;

      /**
       * <code>OpenHighGoHighSoleUp = 1;</code>
       */
      public static final int OpenHighGoHighSoleUp_VALUE = 1;
      /**
       * <code>OpenLowGoHighCloseHigher = 2;</code>
       */
      public static final int OpenLowGoHighCloseHigher_VALUE = 2;
      /**
       * <code>OpenHighGoLowCloseHigher = 3;</code>
       */
      public static final int OpenHighGoLowCloseHigher_VALUE = 3;
      /**
       * <code>OpenLowUnderBaseCloseLower = 4;</code>
       */
      public static final int OpenLowUnderBaseCloseLower_VALUE = 4;
      /**
       * <code>OpenHighGoLowCloseLower = 5;</code>
       */
      public static final int OpenHighGoLowCloseLower_VALUE = 5;
      /**
       * <code>OpenLowGoLowSoleDown = 6;</code>
       */
      public static final int OpenLowGoLowSoleDown_VALUE = 6;


      public final int getNumber() { return value; }

      public static IndexStatusType valueOf(int value) {
        switch (value) {
          case 1: return OpenHighGoHighSoleUp;
          case 2: return OpenLowGoHighCloseHigher;
          case 3: return OpenHighGoLowCloseHigher;
          case 4: return OpenLowUnderBaseCloseLower;
          case 5: return OpenHighGoLowCloseLower;
          case 6: return OpenLowGoLowSoleDown;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<IndexStatusType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<IndexStatusType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<IndexStatusType>() {
              public IndexStatusType findValueByNumber(int number) {
                return IndexStatusType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(32);
      }

      private static final IndexStatusType[] VALUES = values();

      public static IndexStatusType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private IndexStatusType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.IndexStatusType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.JobStatusType}
     */
    public enum JobStatusType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>JOBSTATUS_UNKNOWN = -1;</code>
       */
      JOBSTATUS_UNKNOWN(0, -1),
      /**
       * <code>JOBSTATUS_WAIT_RISK = 0;</code>
       */
      JOBSTATUS_WAIT_RISK(1, 0),
      /**
       * <code>JOBSTATUS_READY = 1;</code>
       *
       * <pre>
       *ready but not started
       * </pre>
       */
      JOBSTATUS_READY(2, 1),
      /**
       * <code>JOBSTATUS_RUNNING = 2;</code>
       *
       * <pre>
       * </pre>
       */
      JOBSTATUS_RUNNING(3, 2),
      /**
       * <code>JOBSTATUS_PAUSE_TRADER = 3;</code>
       *
       * <pre>
       *paused by trader
       * </pre>
       */
      JOBSTATUS_PAUSE_TRADER(4, 3),
      /**
       * <code>JOBSTATUS_PAUSE_NOON = 4;</code>
       *
       * <pre>
       *paused from 11:30am-1:00pm
       * </pre>
       */
      JOBSTATUS_PAUSE_NOON(5, 4),
      /**
       * <code>JOBSTATUS_PAUSE_SUSPENDED = 5;</code>
       *
       * <pre>
       *paused due to suspension
       * </pre>
       */
      JOBSTATUS_PAUSE_SUSPENDED(6, 5),
      /**
       * <code>JOBSTATUS_PAUSE_UPLIMIT = 6;</code>
       *
       * <pre>
       *paused due to reaching up limit
       * </pre>
       */
      JOBSTATUS_PAUSE_UPLIMIT(7, 6),
      /**
       * <code>JOBSTATUS_PAUSE_DOWNLIMIT = 7;</code>
       *
       * <pre>
       *paused due to reaching low limit
       * </pre>
       */
      JOBSTATUS_PAUSE_DOWNLIMIT(8, 7),
      /**
       * <code>JOBSTATUS_STOP = 8;</code>
       *
       * <pre>
       *stopped by trader
       * </pre>
       */
      JOBSTATUS_STOP(9, 8),
      /**
       * <code>JOBSTATUS_END = 9;</code>
       *
       * <pre>
       *ended due to reaching time limit
       * </pre>
       */
      JOBSTATUS_END(10, 9),
      /**
       * <code>JOBSTATUS_FINISHED = 10;</code>
       *
       * <pre>
       *planned volume is finished.
       * </pre>
       */
      JOBSTATUS_FINISHED(11, 10),
      /**
       * <code>JOBSTATUS_PENDING = 11;</code>
       *
       * <pre>
       *before the begin time, pending to check risk.		
       * </pre>
       */
      JOBSTATUS_PENDING(12, 11),
      /**
       * <code>JOBSTATUS_WAIT_OI_SIGNAL = 12;</code>
       *
       * <pre>
       * wait for oi signal	// discard
       * </pre>
       */
      JOBSTATUS_WAIT_OI_SIGNAL(13, 12),
      /**
       * <code>JOBSTATUS_WAIT_APPROVE = 13;</code>
       *
       * <pre>
       * wait approve
       * </pre>
       */
      JOBSTATUS_WAIT_APPROVE(14, 13),
      /**
       * <code>JOBSTATUS_APPROVE_REJECTED = 14;</code>
       *
       * <pre>
       * approve rejected
       * </pre>
       */
      JOBSTATUS_APPROVE_REJECTED(15, 14),
      /**
       * <code>JOBSTATUS_WAIT_EXECUTE = 15;</code>
       *
       * <pre>
       * wair for execute
       * </pre>
       */
      JOBSTATUS_WAIT_EXECUTE(16, 15),
      /**
       * <code>JOBSTATUS_EXECUTE_REJECTED = 16;</code>
       *
       * <pre>
       * execute rejected
       * </pre>
       */
      JOBSTATUS_EXECUTE_REJECTED(17, 16),
      ;

      /**
       * <code>JOBSTATUS_UNKNOWN = -1;</code>
       */
      public static final int JOBSTATUS_UNKNOWN_VALUE = -1;
      /**
       * <code>JOBSTATUS_WAIT_RISK = 0;</code>
       */
      public static final int JOBSTATUS_WAIT_RISK_VALUE = 0;
      /**
       * <code>JOBSTATUS_READY = 1;</code>
       *
       * <pre>
       *ready but not started
       * </pre>
       */
      public static final int JOBSTATUS_READY_VALUE = 1;
      /**
       * <code>JOBSTATUS_RUNNING = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public static final int JOBSTATUS_RUNNING_VALUE = 2;
      /**
       * <code>JOBSTATUS_PAUSE_TRADER = 3;</code>
       *
       * <pre>
       *paused by trader
       * </pre>
       */
      public static final int JOBSTATUS_PAUSE_TRADER_VALUE = 3;
      /**
       * <code>JOBSTATUS_PAUSE_NOON = 4;</code>
       *
       * <pre>
       *paused from 11:30am-1:00pm
       * </pre>
       */
      public static final int JOBSTATUS_PAUSE_NOON_VALUE = 4;
      /**
       * <code>JOBSTATUS_PAUSE_SUSPENDED = 5;</code>
       *
       * <pre>
       *paused due to suspension
       * </pre>
       */
      public static final int JOBSTATUS_PAUSE_SUSPENDED_VALUE = 5;
      /**
       * <code>JOBSTATUS_PAUSE_UPLIMIT = 6;</code>
       *
       * <pre>
       *paused due to reaching up limit
       * </pre>
       */
      public static final int JOBSTATUS_PAUSE_UPLIMIT_VALUE = 6;
      /**
       * <code>JOBSTATUS_PAUSE_DOWNLIMIT = 7;</code>
       *
       * <pre>
       *paused due to reaching low limit
       * </pre>
       */
      public static final int JOBSTATUS_PAUSE_DOWNLIMIT_VALUE = 7;
      /**
       * <code>JOBSTATUS_STOP = 8;</code>
       *
       * <pre>
       *stopped by trader
       * </pre>
       */
      public static final int JOBSTATUS_STOP_VALUE = 8;
      /**
       * <code>JOBSTATUS_END = 9;</code>
       *
       * <pre>
       *ended due to reaching time limit
       * </pre>
       */
      public static final int JOBSTATUS_END_VALUE = 9;
      /**
       * <code>JOBSTATUS_FINISHED = 10;</code>
       *
       * <pre>
       *planned volume is finished.
       * </pre>
       */
      public static final int JOBSTATUS_FINISHED_VALUE = 10;
      /**
       * <code>JOBSTATUS_PENDING = 11;</code>
       *
       * <pre>
       *before the begin time, pending to check risk.		
       * </pre>
       */
      public static final int JOBSTATUS_PENDING_VALUE = 11;
      /**
       * <code>JOBSTATUS_WAIT_OI_SIGNAL = 12;</code>
       *
       * <pre>
       * wait for oi signal	// discard
       * </pre>
       */
      public static final int JOBSTATUS_WAIT_OI_SIGNAL_VALUE = 12;
      /**
       * <code>JOBSTATUS_WAIT_APPROVE = 13;</code>
       *
       * <pre>
       * wait approve
       * </pre>
       */
      public static final int JOBSTATUS_WAIT_APPROVE_VALUE = 13;
      /**
       * <code>JOBSTATUS_APPROVE_REJECTED = 14;</code>
       *
       * <pre>
       * approve rejected
       * </pre>
       */
      public static final int JOBSTATUS_APPROVE_REJECTED_VALUE = 14;
      /**
       * <code>JOBSTATUS_WAIT_EXECUTE = 15;</code>
       *
       * <pre>
       * wair for execute
       * </pre>
       */
      public static final int JOBSTATUS_WAIT_EXECUTE_VALUE = 15;
      /**
       * <code>JOBSTATUS_EXECUTE_REJECTED = 16;</code>
       *
       * <pre>
       * execute rejected
       * </pre>
       */
      public static final int JOBSTATUS_EXECUTE_REJECTED_VALUE = 16;


      public final int getNumber() { return value; }

      public static JobStatusType valueOf(int value) {
        switch (value) {
          case -1: return JOBSTATUS_UNKNOWN;
          case 0: return JOBSTATUS_WAIT_RISK;
          case 1: return JOBSTATUS_READY;
          case 2: return JOBSTATUS_RUNNING;
          case 3: return JOBSTATUS_PAUSE_TRADER;
          case 4: return JOBSTATUS_PAUSE_NOON;
          case 5: return JOBSTATUS_PAUSE_SUSPENDED;
          case 6: return JOBSTATUS_PAUSE_UPLIMIT;
          case 7: return JOBSTATUS_PAUSE_DOWNLIMIT;
          case 8: return JOBSTATUS_STOP;
          case 9: return JOBSTATUS_END;
          case 10: return JOBSTATUS_FINISHED;
          case 11: return JOBSTATUS_PENDING;
          case 12: return JOBSTATUS_WAIT_OI_SIGNAL;
          case 13: return JOBSTATUS_WAIT_APPROVE;
          case 14: return JOBSTATUS_APPROVE_REJECTED;
          case 15: return JOBSTATUS_WAIT_EXECUTE;
          case 16: return JOBSTATUS_EXECUTE_REJECTED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<JobStatusType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<JobStatusType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<JobStatusType>() {
              public JobStatusType findValueByNumber(int number) {
                return JobStatusType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(33);
      }

      private static final JobStatusType[] VALUES = values();

      public static JobStatusType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private JobStatusType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.JobStatusType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.HedgeStatusType}
     */
    public enum HedgeStatusType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HEDGESTATUS_UNKNOWN = -1;</code>
       */
      HEDGESTATUS_UNKNOWN(0, -1),
      /**
       * <code>HEDGESTATUS_STOP = 0;</code>
       */
      HEDGESTATUS_STOP(1, 0),
      /**
       * <code>HEDGESTATUS_START = 1;</code>
       */
      HEDGESTATUS_START(2, 1),
      ;

      /**
       * <code>HEDGESTATUS_UNKNOWN = -1;</code>
       */
      public static final int HEDGESTATUS_UNKNOWN_VALUE = -1;
      /**
       * <code>HEDGESTATUS_STOP = 0;</code>
       */
      public static final int HEDGESTATUS_STOP_VALUE = 0;
      /**
       * <code>HEDGESTATUS_START = 1;</code>
       */
      public static final int HEDGESTATUS_START_VALUE = 1;


      public final int getNumber() { return value; }

      public static HedgeStatusType valueOf(int value) {
        switch (value) {
          case -1: return HEDGESTATUS_UNKNOWN;
          case 0: return HEDGESTATUS_STOP;
          case 1: return HEDGESTATUS_START;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<HedgeStatusType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<HedgeStatusType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<HedgeStatusType>() {
              public HedgeStatusType findValueByNumber(int number) {
                return HedgeStatusType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(34);
      }

      private static final HedgeStatusType[] VALUES = values();

      public static HedgeStatusType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private HedgeStatusType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.HedgeStatusType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.HedgeParamType}
     */
    public enum HedgeParamType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HEDGEPARAM_UNKNOWN = -1;</code>
       */
      HEDGEPARAM_UNKNOWN(0, -1),
      /**
       * <code>HEDGEPARAM_HEDGE = 0;</code>
       */
      HEDGEPARAM_HEDGE(1, 0),
      /**
       * <code>HEDGEPARAM_STOCKACC = 1;</code>
       */
      HEDGEPARAM_STOCKACC(2, 1),
      /**
       * <code>HEDGEPARAM_FUTACC = 2;</code>
       */
      HEDGEPARAM_FUTACC(3, 2),
      ;

      /**
       * <code>HEDGEPARAM_UNKNOWN = -1;</code>
       */
      public static final int HEDGEPARAM_UNKNOWN_VALUE = -1;
      /**
       * <code>HEDGEPARAM_HEDGE = 0;</code>
       */
      public static final int HEDGEPARAM_HEDGE_VALUE = 0;
      /**
       * <code>HEDGEPARAM_STOCKACC = 1;</code>
       */
      public static final int HEDGEPARAM_STOCKACC_VALUE = 1;
      /**
       * <code>HEDGEPARAM_FUTACC = 2;</code>
       */
      public static final int HEDGEPARAM_FUTACC_VALUE = 2;


      public final int getNumber() { return value; }

      public static HedgeParamType valueOf(int value) {
        switch (value) {
          case -1: return HEDGEPARAM_UNKNOWN;
          case 0: return HEDGEPARAM_HEDGE;
          case 1: return HEDGEPARAM_STOCKACC;
          case 2: return HEDGEPARAM_FUTACC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<HedgeParamType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<HedgeParamType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<HedgeParamType>() {
              public HedgeParamType findValueByNumber(int number) {
                return HedgeParamType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(35);
      }

      private static final HedgeParamType[] VALUES = values();

      public static HedgeParamType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private HedgeParamType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.HedgeParamType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.FlagType}
     */
    public enum FlagType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_FLAG = 0;</code>
       */
      UNKNOWN_FLAG(0, 0),
      /**
       * <code>ST_STAR = 13005;</code>
       */
      ST_STAR(1, 13005),
      /**
       * <code>ST = 13004;</code>
       */
      ST(2, 13004),
      /**
       * <code>ISSUE_FAILED = 13009;</code>
       */
      ISSUE_FAILED(3, 13009),
      /**
       * <code>UNEXAMINE = 13008;</code>
       */
      UNEXAMINE(4, 13008),
      /**
       * <code>DEFER_ISSUE = 13011;</code>
       */
      DEFER_ISSUE(5, 13011),
      /**
       * <code>SUSPEND_IPO = 13003;</code>
       */
      SUSPEND_IPO(6, 13003),
      /**
       * <code>NORMAL_IPO = 13001;</code>
       */
      NORMAL_IPO(7, 13001),
      /**
       * <code>DELIST_IPO = 13002;</code>
       */
      DELIST_IPO(8, 13002),
      /**
       * <code>ISSUED_UNLISTED = 13006;</code>
       */
      ISSUED_UNLISTED(9, 13006),
      /**
       * <code>PRE_ANNOUNCEMENT = 13007;</code>
       */
      PRE_ANNOUNCEMENT(10, 13007),
      /**
       * <code>CLEANING_FOR_DELISTING = 13010;</code>
       */
      CLEANING_FOR_DELISTING(11, 13010),
      ;

      /**
       * <code>UNKNOWN_FLAG = 0;</code>
       */
      public static final int UNKNOWN_FLAG_VALUE = 0;
      /**
       * <code>ST_STAR = 13005;</code>
       */
      public static final int ST_STAR_VALUE = 13005;
      /**
       * <code>ST = 13004;</code>
       */
      public static final int ST_VALUE = 13004;
      /**
       * <code>ISSUE_FAILED = 13009;</code>
       */
      public static final int ISSUE_FAILED_VALUE = 13009;
      /**
       * <code>UNEXAMINE = 13008;</code>
       */
      public static final int UNEXAMINE_VALUE = 13008;
      /**
       * <code>DEFER_ISSUE = 13011;</code>
       */
      public static final int DEFER_ISSUE_VALUE = 13011;
      /**
       * <code>SUSPEND_IPO = 13003;</code>
       */
      public static final int SUSPEND_IPO_VALUE = 13003;
      /**
       * <code>NORMAL_IPO = 13001;</code>
       */
      public static final int NORMAL_IPO_VALUE = 13001;
      /**
       * <code>DELIST_IPO = 13002;</code>
       */
      public static final int DELIST_IPO_VALUE = 13002;
      /**
       * <code>ISSUED_UNLISTED = 13006;</code>
       */
      public static final int ISSUED_UNLISTED_VALUE = 13006;
      /**
       * <code>PRE_ANNOUNCEMENT = 13007;</code>
       */
      public static final int PRE_ANNOUNCEMENT_VALUE = 13007;
      /**
       * <code>CLEANING_FOR_DELISTING = 13010;</code>
       */
      public static final int CLEANING_FOR_DELISTING_VALUE = 13010;


      public final int getNumber() { return value; }

      public static FlagType valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_FLAG;
          case 13005: return ST_STAR;
          case 13004: return ST;
          case 13009: return ISSUE_FAILED;
          case 13008: return UNEXAMINE;
          case 13011: return DEFER_ISSUE;
          case 13003: return SUSPEND_IPO;
          case 13001: return NORMAL_IPO;
          case 13002: return DELIST_IPO;
          case 13006: return ISSUED_UNLISTED;
          case 13007: return PRE_ANNOUNCEMENT;
          case 13010: return CLEANING_FOR_DELISTING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FlagType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FlagType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FlagType>() {
              public FlagType findValueByNumber(int number) {
                return FlagType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(36);
      }

      private static final FlagType[] VALUES = values();

      public static FlagType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FlagType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.FlagType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.DetailSecurityType}
     */
    public enum DetailSecurityType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_SECURITY_TYPE = 0;</code>
       */
      UNKNOWN_SECURITY_TYPE(0, 0),
      /**
       * <code>A_SHARES = 1001;</code>
       */
      A_SHARES(1, 1001),
      /**
       * <code>B_SHARES = 1002;</code>
       */
      B_SHARES(2, 1002),
      /**
       * <code>CLOSED_END_FUND = 3001;</code>
       */
      CLOSED_END_FUND(3, 3001),
      /**
       * <code>OPENED_END_FUND = 3002;</code>
       */
      OPENED_END_FUND(4, 3002),
      /**
       * <code>LOF = 3003;</code>
       */
      LOF(5, 3003),
      /**
       * <code>ETF = 3004;</code>
       */
      ETF(6, 3004),
      /**
       * <code>COMPREHENSIVE_INDEX = 4001;</code>
       */
      COMPREHENSIVE_INDEX(7, 4001),
      /**
       * <code>COMPONENT_INDEX = 4002;</code>
       */
      COMPONENT_INDEX(8, 4002),
      /**
       * <code>SECTOR_INDEX = 4003;</code>
       */
      SECTOR_INDEX(9, 4003),
      /**
       * <code>STOCK_INDEX = 4004;</code>
       */
      STOCK_INDEX(10, 4004),
      /**
       * <code>BOND_INDEX = 4005;</code>
       */
      BOND_INDEX(11, 4005),
      /**
       * <code>FUND_INDEX = 4006;</code>
       */
      FUND_INDEX(12, 4006),
      /**
       * <code>THEME_INDEX = 4007;</code>
       */
      THEME_INDEX(13, 4007),
      /**
       * <code>STYLE_INDEX = 4008;</code>
       */
      STYLE_INDEX(14, 4008),
      /**
       * <code>STRATEGY_INDEX = 4010;</code>
       */
      STRATEGY_INDEX(15, 4010),
      /**
       * <code>REST_INDEX = 4012;</code>
       */
      REST_INDEX(16, 4012),
      /**
       * <code>STOCK_WARRANT = 5001;</code>
       */
      STOCK_WARRANT(17, 5001),
      ;

      /**
       * <code>UNKNOWN_SECURITY_TYPE = 0;</code>
       */
      public static final int UNKNOWN_SECURITY_TYPE_VALUE = 0;
      /**
       * <code>A_SHARES = 1001;</code>
       */
      public static final int A_SHARES_VALUE = 1001;
      /**
       * <code>B_SHARES = 1002;</code>
       */
      public static final int B_SHARES_VALUE = 1002;
      /**
       * <code>CLOSED_END_FUND = 3001;</code>
       */
      public static final int CLOSED_END_FUND_VALUE = 3001;
      /**
       * <code>OPENED_END_FUND = 3002;</code>
       */
      public static final int OPENED_END_FUND_VALUE = 3002;
      /**
       * <code>LOF = 3003;</code>
       */
      public static final int LOF_VALUE = 3003;
      /**
       * <code>ETF = 3004;</code>
       */
      public static final int ETF_VALUE = 3004;
      /**
       * <code>COMPREHENSIVE_INDEX = 4001;</code>
       */
      public static final int COMPREHENSIVE_INDEX_VALUE = 4001;
      /**
       * <code>COMPONENT_INDEX = 4002;</code>
       */
      public static final int COMPONENT_INDEX_VALUE = 4002;
      /**
       * <code>SECTOR_INDEX = 4003;</code>
       */
      public static final int SECTOR_INDEX_VALUE = 4003;
      /**
       * <code>STOCK_INDEX = 4004;</code>
       */
      public static final int STOCK_INDEX_VALUE = 4004;
      /**
       * <code>BOND_INDEX = 4005;</code>
       */
      public static final int BOND_INDEX_VALUE = 4005;
      /**
       * <code>FUND_INDEX = 4006;</code>
       */
      public static final int FUND_INDEX_VALUE = 4006;
      /**
       * <code>THEME_INDEX = 4007;</code>
       */
      public static final int THEME_INDEX_VALUE = 4007;
      /**
       * <code>STYLE_INDEX = 4008;</code>
       */
      public static final int STYLE_INDEX_VALUE = 4008;
      /**
       * <code>STRATEGY_INDEX = 4010;</code>
       */
      public static final int STRATEGY_INDEX_VALUE = 4010;
      /**
       * <code>REST_INDEX = 4012;</code>
       */
      public static final int REST_INDEX_VALUE = 4012;
      /**
       * <code>STOCK_WARRANT = 5001;</code>
       */
      public static final int STOCK_WARRANT_VALUE = 5001;


      public final int getNumber() { return value; }

      public static DetailSecurityType valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_SECURITY_TYPE;
          case 1001: return A_SHARES;
          case 1002: return B_SHARES;
          case 3001: return CLOSED_END_FUND;
          case 3002: return OPENED_END_FUND;
          case 3003: return LOF;
          case 3004: return ETF;
          case 4001: return COMPREHENSIVE_INDEX;
          case 4002: return COMPONENT_INDEX;
          case 4003: return SECTOR_INDEX;
          case 4004: return STOCK_INDEX;
          case 4005: return BOND_INDEX;
          case 4006: return FUND_INDEX;
          case 4007: return THEME_INDEX;
          case 4008: return STYLE_INDEX;
          case 4010: return STRATEGY_INDEX;
          case 4012: return REST_INDEX;
          case 5001: return STOCK_WARRANT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DetailSecurityType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DetailSecurityType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DetailSecurityType>() {
              public DetailSecurityType findValueByNumber(int number) {
                return DetailSecurityType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(37);
      }

      private static final DetailSecurityType[] VALUES = values();

      public static DetailSecurityType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DetailSecurityType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.DetailSecurityType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.SectorType}
     */
    public enum SectorType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ST_UNKNOWN_SECTOR_TYPE = 0;</code>
       */
      ST_UNKNOWN_SECTOR_TYPE(0, 0),
      /**
       * <code>ST_CONCEPT_OF_PLATE = 1;</code>
       */
      ST_CONCEPT_OF_PLATE(1, 1),
      /**
       * <code>ST_NEW_SW_LEVEL_INDUSTRY = 2;</code>
       */
      ST_NEW_SW_LEVEL_INDUSTRY(2, 2),
      /**
       * <code>ST_STYLE_INDEX = 3;</code>
       */
      ST_STYLE_INDEX(3, 3),
      ;

      /**
       * <code>ST_UNKNOWN_SECTOR_TYPE = 0;</code>
       */
      public static final int ST_UNKNOWN_SECTOR_TYPE_VALUE = 0;
      /**
       * <code>ST_CONCEPT_OF_PLATE = 1;</code>
       */
      public static final int ST_CONCEPT_OF_PLATE_VALUE = 1;
      /**
       * <code>ST_NEW_SW_LEVEL_INDUSTRY = 2;</code>
       */
      public static final int ST_NEW_SW_LEVEL_INDUSTRY_VALUE = 2;
      /**
       * <code>ST_STYLE_INDEX = 3;</code>
       */
      public static final int ST_STYLE_INDEX_VALUE = 3;


      public final int getNumber() { return value; }

      public static SectorType valueOf(int value) {
        switch (value) {
          case 0: return ST_UNKNOWN_SECTOR_TYPE;
          case 1: return ST_CONCEPT_OF_PLATE;
          case 2: return ST_NEW_SW_LEVEL_INDUSTRY;
          case 3: return ST_STYLE_INDEX;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SectorType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SectorType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SectorType>() {
              public SectorType findValueByNumber(int number) {
                return SectorType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(38);
      }

      private static final SectorType[] VALUES = values();

      public static SectorType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SectorType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.SectorType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.PositionPriceType}
     */
    public enum PositionPriceType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PPT_UNKNOWN_TYPE = -1;</code>
       */
      PPT_UNKNOWN_TYPE(0, -1),
      /**
       * <code>PPT_NEWEST_PRICE = 0;</code>
       */
      PPT_NEWEST_PRICE(1, 0),
      /**
       * <code>PPT_BENCHMARK_PRICE = 1;</code>
       */
      PPT_BENCHMARK_PRICE(2, 1),
      /**
       * <code>PPT_LIMIT_PRICE = 2;</code>
       */
      PPT_LIMIT_PRICE(3, 2),
      ;

      /**
       * <code>PPT_UNKNOWN_TYPE = -1;</code>
       */
      public static final int PPT_UNKNOWN_TYPE_VALUE = -1;
      /**
       * <code>PPT_NEWEST_PRICE = 0;</code>
       */
      public static final int PPT_NEWEST_PRICE_VALUE = 0;
      /**
       * <code>PPT_BENCHMARK_PRICE = 1;</code>
       */
      public static final int PPT_BENCHMARK_PRICE_VALUE = 1;
      /**
       * <code>PPT_LIMIT_PRICE = 2;</code>
       */
      public static final int PPT_LIMIT_PRICE_VALUE = 2;


      public final int getNumber() { return value; }

      public static PositionPriceType valueOf(int value) {
        switch (value) {
          case -1: return PPT_UNKNOWN_TYPE;
          case 0: return PPT_NEWEST_PRICE;
          case 1: return PPT_BENCHMARK_PRICE;
          case 2: return PPT_LIMIT_PRICE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PositionPriceType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PositionPriceType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PositionPriceType>() {
              public PositionPriceType findValueByNumber(int number) {
                return PositionPriceType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(39);
      }

      private static final PositionPriceType[] VALUES = values();

      public static PositionPriceType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PositionPriceType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.PositionPriceType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OpenSlippageType}
     */
    public enum OpenSlippageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OST_UNKNOWN_TYPE = -1;</code>
       */
      OST_UNKNOWN_TYPE(0, -1),
      /**
       * <code>OST_ZERO = 0;</code>
       */
      OST_ZERO(1, 0),
      /**
       * <code>OST_SELL_ONE_PRICE = 1;</code>
       */
      OST_SELL_ONE_PRICE(2, 1),
      /**
       * <code>OST_SELL_TWO_PRICE = 2;</code>
       */
      OST_SELL_TWO_PRICE(3, 2),
      /**
       * <code>OST_SELL_THREE_PRICE = 3;</code>
       */
      OST_SELL_THREE_PRICE(4, 3),
      /**
       * <code>OST_SELL_FOUR_PRICE = 4;</code>
       */
      OST_SELL_FOUR_PRICE(5, 4),
      /**
       * <code>OST_SELL_FIVE_PRICE = 5;</code>
       */
      OST_SELL_FIVE_PRICE(6, 5),
      /**
       * <code>OST_SELL_SIX_PRICE = 6;</code>
       */
      OST_SELL_SIX_PRICE(7, 6),
      /**
       * <code>OST_SELL_SEVEN_PRICE = 7;</code>
       */
      OST_SELL_SEVEN_PRICE(8, 7),
      /**
       * <code>OST_SELL_EIGHT_PRICE = 8;</code>
       */
      OST_SELL_EIGHT_PRICE(9, 8),
      /**
       * <code>OST_SELL_NINE_PRICE = 9;</code>
       */
      OST_SELL_NINE_PRICE(10, 9),
      /**
       * <code>OST_SELL_TEN_PRICE = 10;</code>
       */
      OST_SELL_TEN_PRICE(11, 10),
      /**
       * <code>OST_BID_ONE_PRICE = 11;</code>
       */
      OST_BID_ONE_PRICE(12, 11),
      /**
       * <code>OST_BID_TWO_PRICE = 12;</code>
       */
      OST_BID_TWO_PRICE(13, 12),
      /**
       * <code>OST_BID_THREE_PRICE = 13;</code>
       */
      OST_BID_THREE_PRICE(14, 13),
      /**
       * <code>OST_BID_FOUR_PRICE = 14;</code>
       */
      OST_BID_FOUR_PRICE(15, 14),
      /**
       * <code>OST_BID_FIVE_PRICE = 15;</code>
       */
      OST_BID_FIVE_PRICE(16, 15),
      /**
       * <code>OST_BID_SIX_PRICE = 16;</code>
       */
      OST_BID_SIX_PRICE(17, 16),
      /**
       * <code>OST_BID_SEVEN_PRICE = 17;</code>
       */
      OST_BID_SEVEN_PRICE(18, 17),
      /**
       * <code>OST_BID_EIGHT_PRICE = 18;</code>
       */
      OST_BID_EIGHT_PRICE(19, 18),
      /**
       * <code>OST_BID_NINE_PRICE = 19;</code>
       */
      OST_BID_NINE_PRICE(20, 19),
      /**
       * <code>OST_BID_TEN_PRICE = 20;</code>
       */
      OST_BID_TEN_PRICE(21, 20),
      /**
       * <code>OST_LIMITED_HIGH_PRICE = 21;</code>
       *
       * <pre>
       *涨停价
       * </pre>
       */
      OST_LIMITED_HIGH_PRICE(22, 21),
      /**
       * <code>OST_CURR_PRICE = 22;</code>
       */
      OST_CURR_PRICE(23, 22),
      /**
       * <code>OST_LIMITED_LOW_PRICE = 23;</code>
       *
       * <pre>
       *跌停价
       * </pre>
       */
      OST_LIMITED_LOW_PRICE(24, 23),
      ;

      /**
       * <code>OST_UNKNOWN_TYPE = -1;</code>
       */
      public static final int OST_UNKNOWN_TYPE_VALUE = -1;
      /**
       * <code>OST_ZERO = 0;</code>
       */
      public static final int OST_ZERO_VALUE = 0;
      /**
       * <code>OST_SELL_ONE_PRICE = 1;</code>
       */
      public static final int OST_SELL_ONE_PRICE_VALUE = 1;
      /**
       * <code>OST_SELL_TWO_PRICE = 2;</code>
       */
      public static final int OST_SELL_TWO_PRICE_VALUE = 2;
      /**
       * <code>OST_SELL_THREE_PRICE = 3;</code>
       */
      public static final int OST_SELL_THREE_PRICE_VALUE = 3;
      /**
       * <code>OST_SELL_FOUR_PRICE = 4;</code>
       */
      public static final int OST_SELL_FOUR_PRICE_VALUE = 4;
      /**
       * <code>OST_SELL_FIVE_PRICE = 5;</code>
       */
      public static final int OST_SELL_FIVE_PRICE_VALUE = 5;
      /**
       * <code>OST_SELL_SIX_PRICE = 6;</code>
       */
      public static final int OST_SELL_SIX_PRICE_VALUE = 6;
      /**
       * <code>OST_SELL_SEVEN_PRICE = 7;</code>
       */
      public static final int OST_SELL_SEVEN_PRICE_VALUE = 7;
      /**
       * <code>OST_SELL_EIGHT_PRICE = 8;</code>
       */
      public static final int OST_SELL_EIGHT_PRICE_VALUE = 8;
      /**
       * <code>OST_SELL_NINE_PRICE = 9;</code>
       */
      public static final int OST_SELL_NINE_PRICE_VALUE = 9;
      /**
       * <code>OST_SELL_TEN_PRICE = 10;</code>
       */
      public static final int OST_SELL_TEN_PRICE_VALUE = 10;
      /**
       * <code>OST_BID_ONE_PRICE = 11;</code>
       */
      public static final int OST_BID_ONE_PRICE_VALUE = 11;
      /**
       * <code>OST_BID_TWO_PRICE = 12;</code>
       */
      public static final int OST_BID_TWO_PRICE_VALUE = 12;
      /**
       * <code>OST_BID_THREE_PRICE = 13;</code>
       */
      public static final int OST_BID_THREE_PRICE_VALUE = 13;
      /**
       * <code>OST_BID_FOUR_PRICE = 14;</code>
       */
      public static final int OST_BID_FOUR_PRICE_VALUE = 14;
      /**
       * <code>OST_BID_FIVE_PRICE = 15;</code>
       */
      public static final int OST_BID_FIVE_PRICE_VALUE = 15;
      /**
       * <code>OST_BID_SIX_PRICE = 16;</code>
       */
      public static final int OST_BID_SIX_PRICE_VALUE = 16;
      /**
       * <code>OST_BID_SEVEN_PRICE = 17;</code>
       */
      public static final int OST_BID_SEVEN_PRICE_VALUE = 17;
      /**
       * <code>OST_BID_EIGHT_PRICE = 18;</code>
       */
      public static final int OST_BID_EIGHT_PRICE_VALUE = 18;
      /**
       * <code>OST_BID_NINE_PRICE = 19;</code>
       */
      public static final int OST_BID_NINE_PRICE_VALUE = 19;
      /**
       * <code>OST_BID_TEN_PRICE = 20;</code>
       */
      public static final int OST_BID_TEN_PRICE_VALUE = 20;
      /**
       * <code>OST_LIMITED_HIGH_PRICE = 21;</code>
       *
       * <pre>
       *涨停价
       * </pre>
       */
      public static final int OST_LIMITED_HIGH_PRICE_VALUE = 21;
      /**
       * <code>OST_CURR_PRICE = 22;</code>
       */
      public static final int OST_CURR_PRICE_VALUE = 22;
      /**
       * <code>OST_LIMITED_LOW_PRICE = 23;</code>
       *
       * <pre>
       *跌停价
       * </pre>
       */
      public static final int OST_LIMITED_LOW_PRICE_VALUE = 23;


      public final int getNumber() { return value; }

      public static OpenSlippageType valueOf(int value) {
        switch (value) {
          case -1: return OST_UNKNOWN_TYPE;
          case 0: return OST_ZERO;
          case 1: return OST_SELL_ONE_PRICE;
          case 2: return OST_SELL_TWO_PRICE;
          case 3: return OST_SELL_THREE_PRICE;
          case 4: return OST_SELL_FOUR_PRICE;
          case 5: return OST_SELL_FIVE_PRICE;
          case 6: return OST_SELL_SIX_PRICE;
          case 7: return OST_SELL_SEVEN_PRICE;
          case 8: return OST_SELL_EIGHT_PRICE;
          case 9: return OST_SELL_NINE_PRICE;
          case 10: return OST_SELL_TEN_PRICE;
          case 11: return OST_BID_ONE_PRICE;
          case 12: return OST_BID_TWO_PRICE;
          case 13: return OST_BID_THREE_PRICE;
          case 14: return OST_BID_FOUR_PRICE;
          case 15: return OST_BID_FIVE_PRICE;
          case 16: return OST_BID_SIX_PRICE;
          case 17: return OST_BID_SEVEN_PRICE;
          case 18: return OST_BID_EIGHT_PRICE;
          case 19: return OST_BID_NINE_PRICE;
          case 20: return OST_BID_TEN_PRICE;
          case 21: return OST_LIMITED_HIGH_PRICE;
          case 22: return OST_CURR_PRICE;
          case 23: return OST_LIMITED_LOW_PRICE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OpenSlippageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OpenSlippageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OpenSlippageType>() {
              public OpenSlippageType findValueByNumber(int number) {
                return OpenSlippageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(40);
      }

      private static final OpenSlippageType[] VALUES = values();

      public static OpenSlippageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OpenSlippageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OpenSlippageType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.CloseSlippageType}
     */
    public enum CloseSlippageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CST_UNKNOWN_TYPE = -1;</code>
       */
      CST_UNKNOWN_TYPE(0, -1),
      /**
       * <code>CST_ZERO = 0;</code>
       */
      CST_ZERO(1, 0),
      /**
       * <code>CST_BID_ONE_PRICE = 1;</code>
       */
      CST_BID_ONE_PRICE(2, 1),
      /**
       * <code>CST_BID_TWO_PRICE = 2;</code>
       */
      CST_BID_TWO_PRICE(3, 2),
      /**
       * <code>CST_BID_THREE_PRICE = 3;</code>
       */
      CST_BID_THREE_PRICE(4, 3),
      /**
       * <code>CST_BID_FOUR_PRICE = 4;</code>
       */
      CST_BID_FOUR_PRICE(5, 4),
      /**
       * <code>CST_BID_FIVE_PRICE = 5;</code>
       */
      CST_BID_FIVE_PRICE(6, 5),
      /**
       * <code>CST_BID_SIX_PRICE = 6;</code>
       */
      CST_BID_SIX_PRICE(7, 6),
      /**
       * <code>CST_BID_SEVEN_PRICE = 7;</code>
       */
      CST_BID_SEVEN_PRICE(8, 7),
      /**
       * <code>CST_BID_EIGHT_PRICE = 8;</code>
       */
      CST_BID_EIGHT_PRICE(9, 8),
      /**
       * <code>CST_BID_NINE_PRICE = 9;</code>
       */
      CST_BID_NINE_PRICE(10, 9),
      /**
       * <code>CST_BID_TEN_PRICE = 10;</code>
       */
      CST_BID_TEN_PRICE(11, 10),
      /**
       * <code>CST_SELL_ONE_PRICE = 11;</code>
       */
      CST_SELL_ONE_PRICE(12, 11),
      /**
       * <code>CST_SELL_TWO_PRICE = 12;</code>
       */
      CST_SELL_TWO_PRICE(13, 12),
      /**
       * <code>CST_SELL_THREE_PRICE = 13;</code>
       */
      CST_SELL_THREE_PRICE(14, 13),
      /**
       * <code>CST_SELL_FOUR_PRICE = 14;</code>
       */
      CST_SELL_FOUR_PRICE(15, 14),
      /**
       * <code>CST_SELL_FIVE_PRICE = 15;</code>
       */
      CST_SELL_FIVE_PRICE(16, 15),
      /**
       * <code>CST_SELL_SIX_PRICE = 16;</code>
       */
      CST_SELL_SIX_PRICE(17, 16),
      /**
       * <code>CST_SELL_SEVEN_PRICE = 17;</code>
       */
      CST_SELL_SEVEN_PRICE(18, 17),
      /**
       * <code>CST_SELL_EIGHT_PRICE = 18;</code>
       */
      CST_SELL_EIGHT_PRICE(19, 18),
      /**
       * <code>CST_SELL_NINE_PRICE = 19;</code>
       */
      CST_SELL_NINE_PRICE(20, 19),
      /**
       * <code>CST_SELL_TEN_PRICE = 20;</code>
       */
      CST_SELL_TEN_PRICE(21, 20),
      /**
       * <code>CST_LIMITED_HIGH_PRICE = 21;</code>
       *
       * <pre>
       *涨停价
       * </pre>
       */
      CST_LIMITED_HIGH_PRICE(22, 21),
      /**
       * <code>CST_CURR_PRICE = 22;</code>
       */
      CST_CURR_PRICE(23, 22),
      /**
       * <code>CST_LIMITED_LOW_PRICE = 23;</code>
       *
       * <pre>
       *跌停价
       * </pre>
       */
      CST_LIMITED_LOW_PRICE(24, 23),
      ;

      /**
       * <code>CST_UNKNOWN_TYPE = -1;</code>
       */
      public static final int CST_UNKNOWN_TYPE_VALUE = -1;
      /**
       * <code>CST_ZERO = 0;</code>
       */
      public static final int CST_ZERO_VALUE = 0;
      /**
       * <code>CST_BID_ONE_PRICE = 1;</code>
       */
      public static final int CST_BID_ONE_PRICE_VALUE = 1;
      /**
       * <code>CST_BID_TWO_PRICE = 2;</code>
       */
      public static final int CST_BID_TWO_PRICE_VALUE = 2;
      /**
       * <code>CST_BID_THREE_PRICE = 3;</code>
       */
      public static final int CST_BID_THREE_PRICE_VALUE = 3;
      /**
       * <code>CST_BID_FOUR_PRICE = 4;</code>
       */
      public static final int CST_BID_FOUR_PRICE_VALUE = 4;
      /**
       * <code>CST_BID_FIVE_PRICE = 5;</code>
       */
      public static final int CST_BID_FIVE_PRICE_VALUE = 5;
      /**
       * <code>CST_BID_SIX_PRICE = 6;</code>
       */
      public static final int CST_BID_SIX_PRICE_VALUE = 6;
      /**
       * <code>CST_BID_SEVEN_PRICE = 7;</code>
       */
      public static final int CST_BID_SEVEN_PRICE_VALUE = 7;
      /**
       * <code>CST_BID_EIGHT_PRICE = 8;</code>
       */
      public static final int CST_BID_EIGHT_PRICE_VALUE = 8;
      /**
       * <code>CST_BID_NINE_PRICE = 9;</code>
       */
      public static final int CST_BID_NINE_PRICE_VALUE = 9;
      /**
       * <code>CST_BID_TEN_PRICE = 10;</code>
       */
      public static final int CST_BID_TEN_PRICE_VALUE = 10;
      /**
       * <code>CST_SELL_ONE_PRICE = 11;</code>
       */
      public static final int CST_SELL_ONE_PRICE_VALUE = 11;
      /**
       * <code>CST_SELL_TWO_PRICE = 12;</code>
       */
      public static final int CST_SELL_TWO_PRICE_VALUE = 12;
      /**
       * <code>CST_SELL_THREE_PRICE = 13;</code>
       */
      public static final int CST_SELL_THREE_PRICE_VALUE = 13;
      /**
       * <code>CST_SELL_FOUR_PRICE = 14;</code>
       */
      public static final int CST_SELL_FOUR_PRICE_VALUE = 14;
      /**
       * <code>CST_SELL_FIVE_PRICE = 15;</code>
       */
      public static final int CST_SELL_FIVE_PRICE_VALUE = 15;
      /**
       * <code>CST_SELL_SIX_PRICE = 16;</code>
       */
      public static final int CST_SELL_SIX_PRICE_VALUE = 16;
      /**
       * <code>CST_SELL_SEVEN_PRICE = 17;</code>
       */
      public static final int CST_SELL_SEVEN_PRICE_VALUE = 17;
      /**
       * <code>CST_SELL_EIGHT_PRICE = 18;</code>
       */
      public static final int CST_SELL_EIGHT_PRICE_VALUE = 18;
      /**
       * <code>CST_SELL_NINE_PRICE = 19;</code>
       */
      public static final int CST_SELL_NINE_PRICE_VALUE = 19;
      /**
       * <code>CST_SELL_TEN_PRICE = 20;</code>
       */
      public static final int CST_SELL_TEN_PRICE_VALUE = 20;
      /**
       * <code>CST_LIMITED_HIGH_PRICE = 21;</code>
       *
       * <pre>
       *涨停价
       * </pre>
       */
      public static final int CST_LIMITED_HIGH_PRICE_VALUE = 21;
      /**
       * <code>CST_CURR_PRICE = 22;</code>
       */
      public static final int CST_CURR_PRICE_VALUE = 22;
      /**
       * <code>CST_LIMITED_LOW_PRICE = 23;</code>
       *
       * <pre>
       *跌停价
       * </pre>
       */
      public static final int CST_LIMITED_LOW_PRICE_VALUE = 23;


      public final int getNumber() { return value; }

      public static CloseSlippageType valueOf(int value) {
        switch (value) {
          case -1: return CST_UNKNOWN_TYPE;
          case 0: return CST_ZERO;
          case 1: return CST_BID_ONE_PRICE;
          case 2: return CST_BID_TWO_PRICE;
          case 3: return CST_BID_THREE_PRICE;
          case 4: return CST_BID_FOUR_PRICE;
          case 5: return CST_BID_FIVE_PRICE;
          case 6: return CST_BID_SIX_PRICE;
          case 7: return CST_BID_SEVEN_PRICE;
          case 8: return CST_BID_EIGHT_PRICE;
          case 9: return CST_BID_NINE_PRICE;
          case 10: return CST_BID_TEN_PRICE;
          case 11: return CST_SELL_ONE_PRICE;
          case 12: return CST_SELL_TWO_PRICE;
          case 13: return CST_SELL_THREE_PRICE;
          case 14: return CST_SELL_FOUR_PRICE;
          case 15: return CST_SELL_FIVE_PRICE;
          case 16: return CST_SELL_SIX_PRICE;
          case 17: return CST_SELL_SEVEN_PRICE;
          case 18: return CST_SELL_EIGHT_PRICE;
          case 19: return CST_SELL_NINE_PRICE;
          case 20: return CST_SELL_TEN_PRICE;
          case 21: return CST_LIMITED_HIGH_PRICE;
          case 22: return CST_CURR_PRICE;
          case 23: return CST_LIMITED_LOW_PRICE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CloseSlippageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CloseSlippageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CloseSlippageType>() {
              public CloseSlippageType findValueByNumber(int number) {
                return CloseSlippageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(41);
      }

      private static final CloseSlippageType[] VALUES = values();

      public static CloseSlippageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CloseSlippageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.CloseSlippageType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.LFSignalType}
     */
    public enum LFSignalType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LFST_UNKNOWN_TYPE = -1;</code>
       */
      LFST_UNKNOWN_TYPE(0, -1),
      /**
       * <code>LFST_INDEX = 0;</code>
       */
      LFST_INDEX(1, 0),
      /**
       * <code>LFST_STOCK = 1;</code>
       */
      LFST_STOCK(2, 1),
      ;

      /**
       * <code>LFST_UNKNOWN_TYPE = -1;</code>
       */
      public static final int LFST_UNKNOWN_TYPE_VALUE = -1;
      /**
       * <code>LFST_INDEX = 0;</code>
       */
      public static final int LFST_INDEX_VALUE = 0;
      /**
       * <code>LFST_STOCK = 1;</code>
       */
      public static final int LFST_STOCK_VALUE = 1;


      public final int getNumber() { return value; }

      public static LFSignalType valueOf(int value) {
        switch (value) {
          case -1: return LFST_UNKNOWN_TYPE;
          case 0: return LFST_INDEX;
          case 1: return LFST_STOCK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LFSignalType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LFSignalType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LFSignalType>() {
              public LFSignalType findValueByNumber(int number) {
                return LFSignalType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(42);
      }

      private static final LFSignalType[] VALUES = values();

      public static LFSignalType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private LFSignalType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.LFSignalType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.TradeType}
     */
    public enum TradeType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TT_UNKNOWN = 0;</code>
       */
      TT_UNKNOWN(0, 0),
      /**
       * <code>TT_ENTRUST = 1;</code>
       */
      TT_ENTRUST(1, 1),
      /**
       * <code>TT_CANCEL = 2;</code>
       */
      TT_CANCEL(2, 2),
      ;

      /**
       * <code>TT_UNKNOWN = 0;</code>
       */
      public static final int TT_UNKNOWN_VALUE = 0;
      /**
       * <code>TT_ENTRUST = 1;</code>
       */
      public static final int TT_ENTRUST_VALUE = 1;
      /**
       * <code>TT_CANCEL = 2;</code>
       */
      public static final int TT_CANCEL_VALUE = 2;


      public final int getNumber() { return value; }

      public static TradeType valueOf(int value) {
        switch (value) {
          case 0: return TT_UNKNOWN;
          case 1: return TT_ENTRUST;
          case 2: return TT_CANCEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TradeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TradeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TradeType>() {
              public TradeType findValueByNumber(int number) {
                return TradeType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(43);
      }

      private static final TradeType[] VALUES = values();

      public static TradeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TradeType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.TradeType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.FSLend_SecurityType}
     */
    public enum FSLend_SecurityType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FSLST_UNKNOWN = -1;</code>
       */
      FSLST_UNKNOWN(0, -1),
      /**
       * <code>FSLST_FINANCING = 0;</code>
       *
       * <pre>
       *融资标的券
       * </pre>
       */
      FSLST_FINANCING(1, 0),
      /**
       * <code>FSLST_SECURITIES = 1;</code>
       *
       * <pre>
       *融券标的券
       * </pre>
       */
      FSLST_SECURITIES(2, 1),
      /**
       * <code>FSLST_COLLATERAL = 2;</code>
       *
       * <pre>
       *担保券
       * </pre>
       */
      FSLST_COLLATERAL(3, 2),
      ;

      /**
       * <code>FSLST_UNKNOWN = -1;</code>
       */
      public static final int FSLST_UNKNOWN_VALUE = -1;
      /**
       * <code>FSLST_FINANCING = 0;</code>
       *
       * <pre>
       *融资标的券
       * </pre>
       */
      public static final int FSLST_FINANCING_VALUE = 0;
      /**
       * <code>FSLST_SECURITIES = 1;</code>
       *
       * <pre>
       *融券标的券
       * </pre>
       */
      public static final int FSLST_SECURITIES_VALUE = 1;
      /**
       * <code>FSLST_COLLATERAL = 2;</code>
       *
       * <pre>
       *担保券
       * </pre>
       */
      public static final int FSLST_COLLATERAL_VALUE = 2;


      public final int getNumber() { return value; }

      public static FSLend_SecurityType valueOf(int value) {
        switch (value) {
          case -1: return FSLST_UNKNOWN;
          case 0: return FSLST_FINANCING;
          case 1: return FSLST_SECURITIES;
          case 2: return FSLST_COLLATERAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FSLend_SecurityType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FSLend_SecurityType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FSLend_SecurityType>() {
              public FSLend_SecurityType findValueByNumber(int number) {
                return FSLend_SecurityType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(44);
      }

      private static final FSLend_SecurityType[] VALUES = values();

      public static FSLend_SecurityType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FSLend_SecurityType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.FSLend_SecurityType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.FSLend_ContractType}
     */
    public enum FSLend_ContractType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FSLCT_UNKNOWN = -1;</code>
       */
      FSLCT_UNKNOWN(0, -1),
      /**
       * <code>FSLCT_FINANCING = 0;</code>
       *
       * <pre>
       *融资
       * </pre>
       */
      FSLCT_FINANCING(1, 0),
      /**
       * <code>FSLCT_SECURITIES = 1;</code>
       *
       * <pre>
       *融券
       * </pre>
       */
      FSLCT_SECURITIES(2, 1),
      ;

      /**
       * <code>FSLCT_UNKNOWN = -1;</code>
       */
      public static final int FSLCT_UNKNOWN_VALUE = -1;
      /**
       * <code>FSLCT_FINANCING = 0;</code>
       *
       * <pre>
       *融资
       * </pre>
       */
      public static final int FSLCT_FINANCING_VALUE = 0;
      /**
       * <code>FSLCT_SECURITIES = 1;</code>
       *
       * <pre>
       *融券
       * </pre>
       */
      public static final int FSLCT_SECURITIES_VALUE = 1;


      public final int getNumber() { return value; }

      public static FSLend_ContractType valueOf(int value) {
        switch (value) {
          case -1: return FSLCT_UNKNOWN;
          case 0: return FSLCT_FINANCING;
          case 1: return FSLCT_SECURITIES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractType>() {
              public FSLend_ContractType findValueByNumber(int number) {
                return FSLend_ContractType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(45);
      }

      private static final FSLend_ContractType[] VALUES = values();

      public static FSLend_ContractType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FSLend_ContractType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.FSLend_ContractType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.FSLend_ContractEditType}
     */
    public enum FSLend_ContractEditType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FSLCET_UNKNOWN = -1;</code>
       */
      FSLCET_UNKNOWN(0, -1),
      /**
       * <code>FSLCET_ADD = 0;</code>
       *
       * <pre>
       *添加
       * </pre>
       */
      FSLCET_ADD(1, 0),
      /**
       * <code>FSLCET_DEL = 1;</code>
       *
       * <pre>
       *删除
       * </pre>
       */
      FSLCET_DEL(2, 1),
      /**
       * <code>FSLCET_MDFY = 2;</code>
       *
       * <pre>
       *更改
       * </pre>
       */
      FSLCET_MDFY(3, 2),
      ;

      /**
       * <code>FSLCET_UNKNOWN = -1;</code>
       */
      public static final int FSLCET_UNKNOWN_VALUE = -1;
      /**
       * <code>FSLCET_ADD = 0;</code>
       *
       * <pre>
       *添加
       * </pre>
       */
      public static final int FSLCET_ADD_VALUE = 0;
      /**
       * <code>FSLCET_DEL = 1;</code>
       *
       * <pre>
       *删除
       * </pre>
       */
      public static final int FSLCET_DEL_VALUE = 1;
      /**
       * <code>FSLCET_MDFY = 2;</code>
       *
       * <pre>
       *更改
       * </pre>
       */
      public static final int FSLCET_MDFY_VALUE = 2;


      public final int getNumber() { return value; }

      public static FSLend_ContractEditType valueOf(int value) {
        switch (value) {
          case -1: return FSLCET_UNKNOWN;
          case 0: return FSLCET_ADD;
          case 1: return FSLCET_DEL;
          case 2: return FSLCET_MDFY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractEditType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractEditType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractEditType>() {
              public FSLend_ContractEditType findValueByNumber(int number) {
                return FSLend_ContractEditType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(46);
      }

      private static final FSLend_ContractEditType[] VALUES = values();

      public static FSLend_ContractEditType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FSLend_ContractEditType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.FSLend_ContractEditType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.FSLend_ContractStatus}
     */
    public enum FSLend_ContractStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FSLCS_UNKNOWN = -1;</code>
       */
      FSLCS_UNKNOWN(0, -1),
      /**
       * <code>FSLCS_NOTREPAY = 0;</code>
       *
       * <pre>
       *开仓未归还
       * </pre>
       */
      FSLCS_NOTREPAY(1, 0),
      /**
       * <code>FSLCS_PARTIALREPAY = 1;</code>
       *
       * <pre>
       *部分归还
       * </pre>
       */
      FSLCS_PARTIALREPAY(2, 1),
      /**
       * <code>FSLCS_EXPIRED = 2;</code>
       *
       * <pre>
       *合约已过期
       * </pre>
       */
      FSLCS_EXPIRED(3, 2),
      /**
       * <code>FSLCS_AUTOCLOSE = 3;</code>
       *
       * <pre>
       *主动了结
       * </pre>
       */
      FSLCS_AUTOCLOSE(4, 3),
      /**
       * <code>FSLCS_MANUALCLOSE = 4;</code>
       *
       * <pre>
       *手工了结
       * </pre>
       */
      FSLCS_MANUALCLOSE(5, 4),
      /**
       * <code>FSLCS_REALTIME = 5;</code>
       *
       * <pre>
       *实时合约
       * </pre>
       */
      FSLCS_REALTIME(6, 5),
      ;

      /**
       * <code>FSLCS_UNKNOWN = -1;</code>
       */
      public static final int FSLCS_UNKNOWN_VALUE = -1;
      /**
       * <code>FSLCS_NOTREPAY = 0;</code>
       *
       * <pre>
       *开仓未归还
       * </pre>
       */
      public static final int FSLCS_NOTREPAY_VALUE = 0;
      /**
       * <code>FSLCS_PARTIALREPAY = 1;</code>
       *
       * <pre>
       *部分归还
       * </pre>
       */
      public static final int FSLCS_PARTIALREPAY_VALUE = 1;
      /**
       * <code>FSLCS_EXPIRED = 2;</code>
       *
       * <pre>
       *合约已过期
       * </pre>
       */
      public static final int FSLCS_EXPIRED_VALUE = 2;
      /**
       * <code>FSLCS_AUTOCLOSE = 3;</code>
       *
       * <pre>
       *主动了结
       * </pre>
       */
      public static final int FSLCS_AUTOCLOSE_VALUE = 3;
      /**
       * <code>FSLCS_MANUALCLOSE = 4;</code>
       *
       * <pre>
       *手工了结
       * </pre>
       */
      public static final int FSLCS_MANUALCLOSE_VALUE = 4;
      /**
       * <code>FSLCS_REALTIME = 5;</code>
       *
       * <pre>
       *实时合约
       * </pre>
       */
      public static final int FSLCS_REALTIME_VALUE = 5;


      public final int getNumber() { return value; }

      public static FSLend_ContractStatus valueOf(int value) {
        switch (value) {
          case -1: return FSLCS_UNKNOWN;
          case 0: return FSLCS_NOTREPAY;
          case 1: return FSLCS_PARTIALREPAY;
          case 2: return FSLCS_EXPIRED;
          case 3: return FSLCS_AUTOCLOSE;
          case 4: return FSLCS_MANUALCLOSE;
          case 5: return FSLCS_REALTIME;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FSLend_ContractStatus>() {
              public FSLend_ContractStatus findValueByNumber(int number) {
                return FSLend_ContractStatus.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(47);
      }

      private static final FSLend_ContractStatus[] VALUES = values();

      public static FSLend_ContractStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FSLend_ContractStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.FSLend_ContractStatus)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.ProductManageType}
     *
     * <pre>
     * 产品管理类型
     * </pre>
     */
    public enum ProductManageType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PRODUCT_MT_SELFMANAGE = 0;</code>
       *
       * <pre>
       * 自主管理
       * </pre>
       */
      PRODUCT_MT_SELFMANAGE(0, 0),
      /**
       * <code>PRODUCT_MT_INVESTADVISER = 1;</code>
       *
       * <pre>
       * 投顾模式
       * </pre>
       */
      PRODUCT_MT_INVESTADVISER(1, 1),
      ;

      /**
       * <code>PRODUCT_MT_SELFMANAGE = 0;</code>
       *
       * <pre>
       * 自主管理
       * </pre>
       */
      public static final int PRODUCT_MT_SELFMANAGE_VALUE = 0;
      /**
       * <code>PRODUCT_MT_INVESTADVISER = 1;</code>
       *
       * <pre>
       * 投顾模式
       * </pre>
       */
      public static final int PRODUCT_MT_INVESTADVISER_VALUE = 1;


      public final int getNumber() { return value; }

      public static ProductManageType valueOf(int value) {
        switch (value) {
          case 0: return PRODUCT_MT_SELFMANAGE;
          case 1: return PRODUCT_MT_INVESTADVISER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ProductManageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ProductManageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ProductManageType>() {
              public ProductManageType findValueByNumber(int number) {
                return ProductManageType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(48);
      }

      private static final ProductManageType[] VALUES = values();

      public static ProductManageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ProductManageType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.ProductManageType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.DeltaOptimizeType}
     *
     * <pre>
     *期权Delta最优化原则
     * </pre>
     */
    public enum DeltaOptimizeType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DOT_BEST_FLUIDITY = 0;</code>
       *
       * <pre>
       *流动性最优
       * </pre>
       */
      DOT_BEST_FLUIDITY(0, 0),
      /**
       * <code>DOT_MAX_PREMIUM = 1;</code>
       *
       * <pre>
       *权利金最大
       * </pre>
       */
      DOT_MAX_PREMIUM(1, 1),
      /**
       * <code>DOT_MIN_VOLATILITY = 2;</code>
       *
       * <pre>
       *波动率最小
       * </pre>
       */
      DOT_MIN_VOLATILITY(2, 2),
      /**
       * <code>DOT_MIN_MARGIN = 3;</code>
       *
       * <pre>
       *保证金最小
       * </pre>
       */
      DOT_MIN_MARGIN(3, 3),
      /**
       * <code>DOT_MAX_GAMMA = 4;</code>
       *
       * <pre>
       *Gamma最大
       * </pre>
       */
      DOT_MAX_GAMMA(4, 4),
      /**
       * <code>DOT_MIN_GAMMA = 5;</code>
       *
       * <pre>
       *Gamma最小
       * </pre>
       */
      DOT_MIN_GAMMA(5, 5),
      ;

      /**
       * <code>DOT_BEST_FLUIDITY = 0;</code>
       *
       * <pre>
       *流动性最优
       * </pre>
       */
      public static final int DOT_BEST_FLUIDITY_VALUE = 0;
      /**
       * <code>DOT_MAX_PREMIUM = 1;</code>
       *
       * <pre>
       *权利金最大
       * </pre>
       */
      public static final int DOT_MAX_PREMIUM_VALUE = 1;
      /**
       * <code>DOT_MIN_VOLATILITY = 2;</code>
       *
       * <pre>
       *波动率最小
       * </pre>
       */
      public static final int DOT_MIN_VOLATILITY_VALUE = 2;
      /**
       * <code>DOT_MIN_MARGIN = 3;</code>
       *
       * <pre>
       *保证金最小
       * </pre>
       */
      public static final int DOT_MIN_MARGIN_VALUE = 3;
      /**
       * <code>DOT_MAX_GAMMA = 4;</code>
       *
       * <pre>
       *Gamma最大
       * </pre>
       */
      public static final int DOT_MAX_GAMMA_VALUE = 4;
      /**
       * <code>DOT_MIN_GAMMA = 5;</code>
       *
       * <pre>
       *Gamma最小
       * </pre>
       */
      public static final int DOT_MIN_GAMMA_VALUE = 5;


      public final int getNumber() { return value; }

      public static DeltaOptimizeType valueOf(int value) {
        switch (value) {
          case 0: return DOT_BEST_FLUIDITY;
          case 1: return DOT_MAX_PREMIUM;
          case 2: return DOT_MIN_VOLATILITY;
          case 3: return DOT_MIN_MARGIN;
          case 4: return DOT_MAX_GAMMA;
          case 5: return DOT_MIN_GAMMA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DeltaOptimizeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DeltaOptimizeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DeltaOptimizeType>() {
              public DeltaOptimizeType findValueByNumber(int number) {
                return DeltaOptimizeType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(49);
      }

      private static final DeltaOptimizeType[] VALUES = values();

      public static DeltaOptimizeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DeltaOptimizeType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.DeltaOptimizeType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OptHedgeType}
     *
     * <pre>
     *期权Hedge原则
     * </pre>
     */
    public enum OptHedgeType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OHT_PRIORITY_USE_MARGIN = 0;</code>
       *
       * <pre>
       *优先使用保证金
       * </pre>
       */
      OHT_PRIORITY_USE_MARGIN(0, 0),
      /**
       * <code>OHT_MIN_PREMIUM = 1;</code>
       *
       * <pre>
       *权利金最小
       * </pre>
       */
      OHT_MIN_PREMIUM(1, 1),
      /**
       * <code>OHT_BEST_FLUIDITY = 2;</code>
       *
       * <pre>
       *流动性最优
       * </pre>
       */
      OHT_BEST_FLUIDITY(2, 2),
      /**
       * <code>OHT_MAX_PREMIUM = 3;</code>
       *
       * <pre>
       *权利金最大
       * </pre>
       */
      OHT_MAX_PREMIUM(3, 3),
      /**
       * <code>OHT_MIN_VOLATILITY = 4;</code>
       *
       * <pre>
       *波动率最小
       * </pre>
       */
      OHT_MIN_VOLATILITY(4, 4),
      /**
       * <code>OHT_MAX_GAMMA = 5;</code>
       *
       * <pre>
       *Gamma最大
       * </pre>
       */
      OHT_MAX_GAMMA(5, 5),
      /**
       * <code>OHT_MIN_GAMMA = 6;</code>
       *
       * <pre>
       *Gamma最小
       * </pre>
       */
      OHT_MIN_GAMMA(6, 6),
      ;

      /**
       * <code>OHT_PRIORITY_USE_MARGIN = 0;</code>
       *
       * <pre>
       *优先使用保证金
       * </pre>
       */
      public static final int OHT_PRIORITY_USE_MARGIN_VALUE = 0;
      /**
       * <code>OHT_MIN_PREMIUM = 1;</code>
       *
       * <pre>
       *权利金最小
       * </pre>
       */
      public static final int OHT_MIN_PREMIUM_VALUE = 1;
      /**
       * <code>OHT_BEST_FLUIDITY = 2;</code>
       *
       * <pre>
       *流动性最优
       * </pre>
       */
      public static final int OHT_BEST_FLUIDITY_VALUE = 2;
      /**
       * <code>OHT_MAX_PREMIUM = 3;</code>
       *
       * <pre>
       *权利金最大
       * </pre>
       */
      public static final int OHT_MAX_PREMIUM_VALUE = 3;
      /**
       * <code>OHT_MIN_VOLATILITY = 4;</code>
       *
       * <pre>
       *波动率最小
       * </pre>
       */
      public static final int OHT_MIN_VOLATILITY_VALUE = 4;
      /**
       * <code>OHT_MAX_GAMMA = 5;</code>
       *
       * <pre>
       *Gamma最大
       * </pre>
       */
      public static final int OHT_MAX_GAMMA_VALUE = 5;
      /**
       * <code>OHT_MIN_GAMMA = 6;</code>
       *
       * <pre>
       *Gamma最小
       * </pre>
       */
      public static final int OHT_MIN_GAMMA_VALUE = 6;


      public final int getNumber() { return value; }

      public static OptHedgeType valueOf(int value) {
        switch (value) {
          case 0: return OHT_PRIORITY_USE_MARGIN;
          case 1: return OHT_MIN_PREMIUM;
          case 2: return OHT_BEST_FLUIDITY;
          case 3: return OHT_MAX_PREMIUM;
          case 4: return OHT_MIN_VOLATILITY;
          case 5: return OHT_MAX_GAMMA;
          case 6: return OHT_MIN_GAMMA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OptHedgeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OptHedgeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OptHedgeType>() {
              public OptHedgeType findValueByNumber(int number) {
                return OptHedgeType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(50);
      }

      private static final OptHedgeType[] VALUES = values();

      public static OptHedgeType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OptHedgeType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OptHedgeType)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OptionStrategyState}
     *
     * <pre>
     *期权策略状态
     * </pre>
     */
    public enum OptionStrategyState
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OSS_UNKNOWN = 0;</code>
       */
      OSS_UNKNOWN(0, 0),
      /**
       * <code>OSS_READY = 1;</code>
       *
       * <pre>
       *准备运行
       * </pre>
       */
      OSS_READY(1, 1),
      /**
       * <code>OSS_RUNNING = 2;</code>
       *
       * <pre>
       *运行中
       * </pre>
       */
      OSS_RUNNING(2, 2),
      /**
       * <code>OSS_SUSPEND = 3;</code>
       *
       * <pre>
       *暂停
       * </pre>
       */
      OSS_SUSPEND(3, 3),
      /**
       * <code>OSS_TERMINATED = 4;</code>
       *
       * <pre>
       *终止
       * </pre>
       */
      OSS_TERMINATED(4, 4),
      /**
       * <code>OSS_CANCELED = 5;</code>
       *
       * <pre>
       *撤单
       * </pre>
       */
      OSS_CANCELED(5, 5),
      /**
       * <code>OSS_COMPLETE = 6;</code>
       *
       * <pre>
       *完成
       * </pre>
       */
      OSS_COMPLETE(6, 6),
      ;

      /**
       * <code>OSS_UNKNOWN = 0;</code>
       */
      public static final int OSS_UNKNOWN_VALUE = 0;
      /**
       * <code>OSS_READY = 1;</code>
       *
       * <pre>
       *准备运行
       * </pre>
       */
      public static final int OSS_READY_VALUE = 1;
      /**
       * <code>OSS_RUNNING = 2;</code>
       *
       * <pre>
       *运行中
       * </pre>
       */
      public static final int OSS_RUNNING_VALUE = 2;
      /**
       * <code>OSS_SUSPEND = 3;</code>
       *
       * <pre>
       *暂停
       * </pre>
       */
      public static final int OSS_SUSPEND_VALUE = 3;
      /**
       * <code>OSS_TERMINATED = 4;</code>
       *
       * <pre>
       *终止
       * </pre>
       */
      public static final int OSS_TERMINATED_VALUE = 4;
      /**
       * <code>OSS_CANCELED = 5;</code>
       *
       * <pre>
       *撤单
       * </pre>
       */
      public static final int OSS_CANCELED_VALUE = 5;
      /**
       * <code>OSS_COMPLETE = 6;</code>
       *
       * <pre>
       *完成
       * </pre>
       */
      public static final int OSS_COMPLETE_VALUE = 6;


      public final int getNumber() { return value; }

      public static OptionStrategyState valueOf(int value) {
        switch (value) {
          case 0: return OSS_UNKNOWN;
          case 1: return OSS_READY;
          case 2: return OSS_RUNNING;
          case 3: return OSS_SUSPEND;
          case 4: return OSS_TERMINATED;
          case 5: return OSS_CANCELED;
          case 6: return OSS_COMPLETE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OptionStrategyState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OptionStrategyState>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OptionStrategyState>() {
              public OptionStrategyState findValueByNumber(int number) {
                return OptionStrategyState.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(51);
      }

      private static final OptionStrategyState[] VALUES = values();

      public static OptionStrategyState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OptionStrategyState(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OptionStrategyState)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.OptionStrategyName}
     *
     * <pre>
     *期权策略名
     * </pre>
     */
    public enum OptionStrategyName
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OPT_COMBO = 1;</code>
       */
      OPT_COMBO(0, 1),
      /**
       * <code>OPT_DELTA_HEDGE = 2;</code>
       */
      OPT_DELTA_HEDGE(1, 2),
      ;

      /**
       * <code>OPT_COMBO = 1;</code>
       */
      public static final int OPT_COMBO_VALUE = 1;
      /**
       * <code>OPT_DELTA_HEDGE = 2;</code>
       */
      public static final int OPT_DELTA_HEDGE_VALUE = 2;


      public final int getNumber() { return value; }

      public static OptionStrategyName valueOf(int value) {
        switch (value) {
          case 1: return OPT_COMBO;
          case 2: return OPT_DELTA_HEDGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OptionStrategyName>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<OptionStrategyName>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OptionStrategyName>() {
              public OptionStrategyName findValueByNumber(int number) {
                return OptionStrategyName.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(52);
      }

      private static final OptionStrategyName[] VALUES = values();

      public static OptionStrategyName valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private OptionStrategyName(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.OptionStrategyName)
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.TypeDef.TransferInAndOutType}
     */
    public enum TransferInAndOutType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TIAOT_UNKNOWN_TYPE = -1;</code>
       */
      TIAOT_UNKNOWN_TYPE(0, -1),
      /**
       * <code>TIAOT_CAPITAL_IN = 0;</code>
       *
       * <pre>
       *客户资金调入
       * </pre>
       */
      TIAOT_CAPITAL_IN(1, 0),
      /**
       * <code>TIAOT_CAPITAL_OUT = 1;</code>
       *
       * <pre>
       *客户资金调出
       * </pre>
       */
      TIAOT_CAPITAL_OUT(2, 1),
      /**
       * <code>TIAOT_SECURITY_IN = 2;</code>
       *
       * <pre>
       *客户证券调入
       * </pre>
       */
      TIAOT_SECURITY_IN(3, 2),
      /**
       * <code>TIAOT_SECURITY_OUT = 3;</code>
       *
       * <pre>
       *客户证券调出
       * </pre>
       */
      TIAOT_SECURITY_OUT(4, 3),
      ;

      /**
       * <code>TIAOT_UNKNOWN_TYPE = -1;</code>
       */
      public static final int TIAOT_UNKNOWN_TYPE_VALUE = -1;
      /**
       * <code>TIAOT_CAPITAL_IN = 0;</code>
       *
       * <pre>
       *客户资金调入
       * </pre>
       */
      public static final int TIAOT_CAPITAL_IN_VALUE = 0;
      /**
       * <code>TIAOT_CAPITAL_OUT = 1;</code>
       *
       * <pre>
       *客户资金调出
       * </pre>
       */
      public static final int TIAOT_CAPITAL_OUT_VALUE = 1;
      /**
       * <code>TIAOT_SECURITY_IN = 2;</code>
       *
       * <pre>
       *客户证券调入
       * </pre>
       */
      public static final int TIAOT_SECURITY_IN_VALUE = 2;
      /**
       * <code>TIAOT_SECURITY_OUT = 3;</code>
       *
       * <pre>
       *客户证券调出
       * </pre>
       */
      public static final int TIAOT_SECURITY_OUT_VALUE = 3;


      public final int getNumber() { return value; }

      public static TransferInAndOutType valueOf(int value) {
        switch (value) {
          case -1: return TIAOT_UNKNOWN_TYPE;
          case 0: return TIAOT_CAPITAL_IN;
          case 1: return TIAOT_CAPITAL_OUT;
          case 2: return TIAOT_SECURITY_IN;
          case 3: return TIAOT_SECURITY_OUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TransferInAndOutType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TransferInAndOutType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TransferInAndOutType>() {
              public TransferInAndOutType findValueByNumber(int number) {
                return TransferInAndOutType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDescriptor().getEnumTypes().get(53);
      }

      private static final TransferInAndOutType[] VALUES = values();

      public static TransferInAndOutType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TransferInAndOutType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.TypeDef.TransferInAndOutType)
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.TypeDefClass.TypeDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sunquan.zmqproto.TypeDefClass.TypeDef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sunquan.zmqproto.TypeDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sunquan.zmqproto.TypeDef)
        com.sunquan.zmqproto.TypeDefClass.TypeDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sunquan.zmqproto.TypeDefClass.internal_static_com_sunquan_zmqproto_TypeDef_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sunquan.zmqproto.TypeDefClass.internal_static_com_sunquan_zmqproto_TypeDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sunquan.zmqproto.TypeDefClass.TypeDef.class, com.sunquan.zmqproto.TypeDefClass.TypeDef.Builder.class);
      }

      // Construct using com.sunquan.zmqproto.TypeDefClass.TypeDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sunquan.zmqproto.TypeDefClass.internal_static_com_sunquan_zmqproto_TypeDef_descriptor;
      }

      public com.sunquan.zmqproto.TypeDefClass.TypeDef getDefaultInstanceForType() {
        return com.sunquan.zmqproto.TypeDefClass.TypeDef.getDefaultInstance();
      }

      public com.sunquan.zmqproto.TypeDefClass.TypeDef build() {
        com.sunquan.zmqproto.TypeDefClass.TypeDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.sunquan.zmqproto.TypeDefClass.TypeDef buildPartial() {
        com.sunquan.zmqproto.TypeDefClass.TypeDef result = new com.sunquan.zmqproto.TypeDefClass.TypeDef(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sunquan.zmqproto.TypeDefClass.TypeDef) {
          return mergeFrom((com.sunquan.zmqproto.TypeDefClass.TypeDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sunquan.zmqproto.TypeDefClass.TypeDef other) {
        if (other == com.sunquan.zmqproto.TypeDefClass.TypeDef.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sunquan.zmqproto.TypeDefClass.TypeDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sunquan.zmqproto.TypeDefClass.TypeDef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sunquan.zmqproto.TypeDef)
    }

    static {
      defaultInstance = new TypeDef(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.sunquan.zmqproto.TypeDef)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sunquan_zmqproto_TypeDef_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sunquan_zmqproto_TypeDef_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rtypedef.proto\022\024com.sunquan.zmqproto\"\322L" +
      "\n\007TypeDef\",\n\010AuthType\022\n\n\006NORMAL\020\001\022\013\n\007WAR" +
      "NING\020\002\022\007\n\003END\020\003\"D\n\013EmsEditType\022\013\n\007EMS_AD" +
      "D\020\001\022\013\n\007EMS_DEL\020\002\022\013\n\007EMS_MDF\020\003\022\016\n\nEMS_MDF" +
      "PWD\020\004\"-\n\021PortfolioEditType\022\013\n\007PTE_ADD\020\001\022" +
      "\013\n\007PTE_DEL\020\002\"A\n\025PortfolioItemEditType\022\014\n" +
      "\010PTIE_ADD\020\001\022\014\n\010PTIE_DEL\020\002\022\014\n\010PTIE_MDF\020\003\"" +
      "*\n\nProfitType\022\r\n\tPT_SECOND\020\001\022\r\n\tPT_MINUT" +
      "E\020\002\"C\n\013ConnectType\022\017\n\013CT_STRAIGHT\020\001\022\023\n\017C" +
      "T_GATEWAYPROXY\020\002\022\016\n\nCT_UNKNOWN\020\003\"\304\001\n\010Use",
      "rRole\022\021\n\rUR_SUPERADMIN\020\000\022\014\n\010UR_ADMIN\020\001\022\r" +
      "\n\tUR_DEALER\020\002\022\022\n\016UR_RISKCHECKER\020\003\022\016\n\nUR_" +
      "MONITOR\020\004\022\025\n\021UR_INVEST_ADVISER\020\006\022\025\n\021UR_I" +
      "NVEST_MANAGER\020\007\022\016\n\nUR_T0ADMIN\020\010\022\026\n\022UR_SU" +
      "PERMAINTAINER\020\t\022\016\n\nUR_UNKNOWN\020\005\"8\n\nUserS" +
      "tatus\022\r\n\tUS_ACTIVE\020\001\022\r\n\tUS_FROZEN\020\002\022\014\n\010U" +
      "S_CLOSE\020\003\"J\n\017UserCertificate\022\016\n\nUC_UNKNO" +
      "WN\020\000\022\022\n\016UC_Certificate\020\001\022\023\n\017UC_ORGANIZAT" +
      "ION\020\002\"8\n\nProdStatus\022\r\n\tPS_ACTIVE\020\001\022\r\n\tPS" +
      "_FROZEN\020\002\022\014\n\010PS_CLOSE\020\003\"A\n\016QueryTradeTyp",
      "e\022\017\n\013QTT_ORDERNO\020\001\022\014\n\010QTT_TIME\020\002\022\020\n\014QTT_" +
      "QUERYPOS\020\003\",\n\017OptContractType\022\014\n\010OCT_CAL" +
      "L\020\001\022\013\n\007OCT_PUT\020\002\"B\n\tOptDirect\022\020\n\014OD_RIGH" +
      "T_POS\020\001\022\017\n\013OD_DUTY_POS\020\002\022\022\n\016OD_COVERED_P" +
      "OS\020\003\"|\n\010Exchange\022\016\n\nEX_UNKNOWN\020\000\022\t\n\005EX_S" +
      "H\020\001\022\t\n\005EX_SZ\020\002\022\t\n\005EX_CF\020\003\022\t\n\005EX_HK\020\007\022\013\n\007" +
      "EX_SHFE\020\004\022\n\n\006EX_DCE\020\005\022\013\n\007EX_CZCE\020\006\022\n\n\006EX" +
      "_CTP\020\010\032\002\020\001\"\311\004\n\007BuySell\022\016\n\nBS_INVALID\020\000\022\n" +
      "\n\006BS_BUY\020\001\022\013\n\007BS_SELL\020\002\022\013\n\007BS_BOTH\020\003\022\017\n\013" +
      "BS_PURCHASE\020\004\022\r\n\tBS_REDEEM\020\005\022\027\n\023BS_BWT_M",
      "KT_PURCHASE\020\006\022\025\n\021BS_BWT_MKT_REDEEM\020\007\022\027\n\023" +
      "BS_BWT_ENV_PURCHASE\020\010\022\025\n\021BS_BWT_ENV_REDE" +
      "EM\020\t\022\020\n\014BS_FS_CO_BUY\020\n\022\021\n\rBS_FS_CO_SELL\020" +
      "\013\022\020\n\014BS_FS_FL_BUY\020\014\022\021\n\rBS_FS_FL_SELL\020\r\022\020" +
      "\n\014BS_FS_SL_BUY\020\016\022\021\n\rBS_FS_SL_SELL\020\017\022\017\n\013B" +
      "S_BUY_OPEN\020\020\022\021\n\rBS_SELL_CLOSE\020\021\022\020\n\014BS_SE" +
      "LL_OPEN\020\022\022\020\n\014BS_BUY_CLOSE\020\023\022\023\n\017BS_OPT_BU" +
      "Y_OPEN\020\024\022\025\n\021BS_OPT_SELL_CLOSE\020\025\022\024\n\020BS_OP" +
      "T_SELL_OPEN\020\026\022\024\n\020BS_OPT_BUY_CLOSE\020\027\022\023\n\017B" +
      "S_OPT_CVD_OPEN\020\030\022\024\n\020BS_OPT_CVD_CLOSE\020\031\022\024",
      "\n\020BS_OPT_RIGHT_GET\020\032\022\024\n\020BS_OPT_RIGHT_PUT" +
      "\020\033\022\016\n\nBS_REPO_FL\020\034\022\016\n\nBS_REPO_SL\020\035\032\002\020\001\"w" +
      "\n\rOpenCloseType\022\027\n\nOC_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001" +
      "\022\010\n\004OPEN\020\000\022\t\n\005CLOSE\020\001\022\017\n\013CLOSE_TODAY\020\002\022\022" +
      "\n\016CLOSE_YESTODAY\020\003\022\017\n\013FORCE_CLOSE\020\004\032\002\020\001\"" +
      "M\n\tHedgeType\022\021\n\rHEDGE_UNKNOWN\020\000\022\017\n\013SPECU" +
      "LATION\020\001\022\r\n\tARBITRAGE\020\002\022\t\n\005HEDGE\020\003\032\002\020\001\"\313" +
      "\001\n\rPriceModeType\022\016\n\nPM_UNKNOWN\020\000\022\017\n\013LIMI" +
      "T_PRICE\020\001\022\016\n\nLAST_PRICE\020\002\022\020\n\014MARKET_PRIC" +
      "E\020\003\022\032\n\026MARKET_PRICE_THIS_SIDE\020\004\022\032\n\026MARKE",
      "T_PRICE_THAT_SIDE\020\005\022\034\n\030MARKET_PRICE_CANC" +
      "EL_REST\020\006\022\035\n\031MARKET_PRICE_LIMITED_REST\020\007" +
      "\032\002\020\001\":\n\tReqStatus\022\017\n\013REQ_UNKNOWN\020\000\022\013\n\007SU" +
      "CCESS\020\001\022\013\n\007FAILURE\020\002\032\002\020\001\"\300\001\n\013OrderStatus" +
      "\022\022\n\016STATUS_UNKNOWN\020\001\022\013\n\007PENDING\020\002\022\016\n\nPAR" +
      "TTRADED\020\003\022\r\n\tCANCELLED\020\004\022\014\n\010REJECTED\020\005\022\r" +
      "\n\tALLTRADED\020\006\022\014\n\010ONTRADED\020\007\022\021\n\rINSERT_FA" +
      "ILED\020\010\022\021\n\rINSERT_REJECT\020\t\022\016\n\nCANCELLING\020" +
      "\n\022\014\n\010INSERTED\020\013\032\002\020\001\"9\n\016MarketDataType\022\016\n" +
      "\nMD_UNKNOWN\020\001\022\007\n\003ALL\020\002\022\n\n\006UPDATE\020\003\032\002\020\001\"n",
      "\n\016SecurityStatus\022\022\n\016SECURITY_READY\020\001\022\024\n\020" +
      "SECURITY_UPLIMIT\020\002\022\026\n\022SECURITY_DOWNLIMIT" +
      "\020\003\022\026\n\022SECURITY_SUSPENDED\020\004\032\002\020\001\"\252\001\n\021Trade" +
      "rCommandType\022\027\n\nTC_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\014\n" +
      "\010PAUSEJOB\020\000\022\r\n\tREPLAYJOB\020\001\022\n\n\006ENDJOB\020\002\022\022" +
      "\n\016ACCEPT_APPROVE\020\003\022\022\n\016REJECT_APPROVE\020\004\022\023" +
      "\n\017CONFIRM_EXECUTE\020\005\022\022\n\016REJECT_EXECUTE\020\006\032" +
      "\002\020\001\"\323\005\n\024SecurityProviderEnum\022\024\n\020PROVIDER" +
      "_UNKNOWN\020\000\022\030\n\024PROVIDER_CTP_FUTURES\020\001\022\033\n\027" +
      "PROVIDER_XTP_SECURITIES\020\002\022\037\n\033PROVIDER_EV",
      "ERBRIGHT_FUTURES\020\003\022 \n\034PROVIDER_JINZHENG_" +
      "SECURITIES\020\004\022\033\n\027PROVIDER_GALAXY_FUTURES\020" +
      "\005\022\034\n\030PROVIDER_APEX_SECURITIES\020\006\022\026\n\022PROVI" +
      "DER_ZHONGRONG\020\007\022\024\n\020PROVIDER_HANDSUN\020\010\022\023\n" +
      "\017PROVIDER_MINGCE\020\t\022\033\n\027PROVIDER_MINGCE_FU" +
      "TURES\020\n\022\037\n\033PROVIDER_SHZHENG_SECURITIES\020\013" +
      "\022\037\n\033PROVIDER_GUANGDA_SECURITIES\020\014\022$\n PRO" +
      "VIDER_HUIANKINGDOM_SECURITIES\020\r\022\037\n\033PROVI" +
      "DER_EBROKER_SECURITIES\020\016\022\034\n\030PROVIDER_JIN" +
      "ZHENG_CREDIT\020\017\022\026\n\022PROVIDER_HANDSUN08\020\020\022\030",
      "\n\024PROVIDER_APEX_CREDIT\020\021\022\034\n\030PROVIDER_JIN" +
      "ZHENG_OPTION\020\022\022\034\n\030PROVIDER_SYNCBP_TOPTRA" +
      "DE\020\023\022\035\n\031PROVIDER_HANDSUN08_OPTION\020\024\022\035\n\031P" +
      "ROVIDER_HANDSUN08_CREDIT\020\025\022\031\n\025PROVIDER_H" +
      "ANDSUN_PBOX\020\026\022\036\n\032PROVIDER_CTP_MINI2_FUTU" +
      "RES\020\027\032\002\020\001\"{\n\014SecurityType\022\024\n\020SECURITY_UN" +
      "KNOWN\020\000\022\023\n\017SECURITY_FUTURE\020\001\022\022\n\016SECURITY" +
      "_STOCK\020\002\022\023\n\017SECURITY_CREDIT\020\003\022\023\n\017SECURIT" +
      "Y_OPTION\020\004\032\002\020\001\"\\\n\014CurrencyType\022\024\n\020CURREN" +
      "CY_UNKNOWN\020\000\022\020\n\014CURRENCY_RMB\020\001\022\017\n\013CURREN",
      "CY_US\020\002\022\017\n\013CURRENCY_HK\020\003\032\002\020\001\"f\n\rLongShor" +
      "tType\022\025\n\021LONGSHORT_UNKNOWN\020\000\022\021\n\rLONGSHOR" +
      "T_NET\020\001\022\022\n\016LONGSHORT_LONG\020\002\022\023\n\017LONGSHORT" +
      "_SHORT\020\003\032\002\020\001\"\340\001\n\016HedgeStateEnum\022\026\n\022HEDGE" +
      "STATE_UNKNOWN\020\000\022\024\n\020HEDGESTATE_ERROR\020\001\022!\n" +
      "\035HEDGESTATE_LONGEXPOSUREEXCESS\020\002\022\"\n\036HEDG" +
      "ESTATE_SHORTEXPOSUREEXCESS\020\003\022\035\n\031HEDGESTA" +
      "TE_EXTENDFINISHED\020\004\022\034\n\030HEDGESTATE_HEDGEF" +
      "INISHED\020\005\022\030\n\024HEDGESTATE_HEDGESTOP\020\006\032\002\020\001\"" +
      "\270\t\n\tErrorType\022\021\n\rERROR_UNKNOWN\020\000\022\016\n\nERRO",
      "R_NONE\020\001\022\031\n\025ERROR_CONNECTION_DOWN\020\002\022\030\n\024E" +
      "RROR_FAILED_TO_SEND\020\003\022#\n\037ERROR_FAILED_TO" +
      "_DECODE_PROTOBUF\020\004\022\025\n\021ERROR_NO_ORDER_NO\020" +
      "\005\022\031\n\025ERROR_WRONG_PARAMETER\020\007\022%\n!ERROR_WR" +
      "ONG_PARAMETER_INVALID_VOL\020\010\022(\n$ERROR_WRO" +
      "NG_PARAMETER_NO_ACCOUNTINFO\020\t\022%\n!ERROR_W" +
      "RONG_PARAMETER_NO_PASSWORD\020\n\022(\n$ERROR_WR" +
      "ONG_PARAMETER_WRONG_PASSWORD\020\013\022%\n!ERROR_" +
      "WRONG_PARAMETER_NO_SEC_TYPE\020\014\022(\n$ERROR_W" +
      "RONG_PARAMETER_WRONG_SEC_TYPE\020\r\022)\n%ERROR",
      "_WRONG_PARAMETER_NO_SEC_PROVIDER\020\016\022,\n(ER" +
      "ROR_WRONG_PARAMETER_WRONG_SEC_PROVIDER\020\017" +
      "\022*\n&ERROR_WRONG_PARAMETER_NO_SEC_BRANCH_" +
      "NO\020\020\022-\n)ERROR_WRONG_PARAMETER_WRONG_SEC_" +
      "BRANCH_NO\020\021\022(\n$ERROR_WRONG_PARAMETER_NO_" +
      "STK_ACCOUNT\020\022\022+\n\'ERROR_WRONG_PARAMETER_W" +
      "RONG_STK_ACCOUNT\020\023\022\'\n#ERROR_WRONG_PARAME" +
      "TER_WRONG_BUYSELL\020\024\022)\n%ERROR_WRONG_PARAM" +
      "ETER_WRONG_OPENCLOSE\020\025\022-\n)ERROR_WRONG_PA" +
      "RAMETER_WRONG_ORDERSETTINGS\020\025\022)\n%ERROR_W",
      "RONG_PARAMETER_WRONG_ALGO_TYPE\020\025\022\023\n\017ERRO" +
      "R_NOT_LOGIN\020\036\022\024\n\020ERROR_UNSUPPOTED\020\037\022\027\n\023E" +
      "RROR_NOT_AVAILABLE\020 \022!\n\035ERROR_RISK_ORDER" +
      "_CHECK_FAILED\020!\022\037\n\033ERROR_FAILED_TO_CANCE" +
      "LORDER\020\"\022\037\n\033ERROR_FAILED_TO_INSERTORDER\020" +
      "#\022\036\n\032ERROR_FAILED_TO_QUERYORDER\020$\022\036\n\032ERR" +
      "OR_FAILED_TO_QUERYTRADE\020%\022 \n\034ERROR_FAILE" +
      "D_TO_QUERYACCOUNT\020&\022!\n\035ERROR_FAILED_TO_Q" +
      "UERYPOSITION\020\'\022\036\n\032ERROR_NO_DIVIDE_STOCK_" +
      "DATA\020(\032\002\020\001\">\n\010AlgoType\022\020\n\014ALGO_UNKNOWN\020\000",
      "\022\r\n\tALGO_TWAP\020\001\022\r\n\tALGO_VWAP\020\002\032\002\020\001\"x\n\016Sp" +
      "eedOpionType\022 \n\023SPEEDOPTION_UNKNOWN\020\377\377\377\377" +
      "\377\377\377\377\377\001\022\026\n\022SPEEDOPTION_NORMAL\020\000\022\023\n\017SPEEDO" +
      "PTION_AIM\020\001\022\023\n\017SPEEDOPTION_PIM\020\002\032\002\020\001\"]\n\017" +
      "MarketStyleType\022\030\n\024UNKNOWN_MARKET_STYLE\020" +
      "\000\022\024\n\020LARGER_CAP_SHARE\020\001\022\032\n\026SMALL_MEDIUM_" +
      "CAP_SHARE\020\002\"\276\001\n\017IndexStatusType\022\030\n\024OpenH" +
      "ighGoHighSoleUp\020\001\022\034\n\030OpenLowGoHighCloseH" +
      "igher\020\002\022\034\n\030OpenHighGoLowCloseHigher\020\003\022\036\n" +
      "\032OpenLowUnderBaseCloseLower\020\004\022\033\n\027OpenHig",
      "hGoLowCloseLower\020\005\022\030\n\024OpenLowGoLowSoleDo" +
      "wn\020\006\"\365\003\n\rJobStatusType\022\036\n\021JOBSTATUS_UNKN" +
      "OWN\020\377\377\377\377\377\377\377\377\377\001\022\027\n\023JOBSTATUS_WAIT_RISK\020\000\022" +
      "\023\n\017JOBSTATUS_READY\020\001\022\025\n\021JOBSTATUS_RUNNIN" +
      "G\020\002\022\032\n\026JOBSTATUS_PAUSE_TRADER\020\003\022\030\n\024JOBST" +
      "ATUS_PAUSE_NOON\020\004\022\035\n\031JOBSTATUS_PAUSE_SUS" +
      "PENDED\020\005\022\033\n\027JOBSTATUS_PAUSE_UPLIMIT\020\006\022\035\n" +
      "\031JOBSTATUS_PAUSE_DOWNLIMIT\020\007\022\022\n\016JOBSTATU" +
      "S_STOP\020\010\022\021\n\rJOBSTATUS_END\020\t\022\026\n\022JOBSTATUS" +
      "_FINISHED\020\n\022\025\n\021JOBSTATUS_PENDING\020\013\022\034\n\030JO",
      "BSTATUS_WAIT_OI_SIGNAL\020\014\022\032\n\026JOBSTATUS_WA" +
      "IT_APPROVE\020\r\022\036\n\032JOBSTATUS_APPROVE_REJECT" +
      "ED\020\016\022\032\n\026JOBSTATUS_WAIT_EXECUTE\020\017\022\036\n\032JOBS" +
      "TATUS_EXECUTE_REJECTED\020\020\032\002\020\001\"d\n\017HedgeSta" +
      "tusType\022 \n\023HEDGESTATUS_UNKNOWN\020\377\377\377\377\377\377\377\377\377" +
      "\001\022\024\n\020HEDGESTATUS_STOP\020\000\022\025\n\021HEDGESTATUS_S" +
      "TART\020\001\032\002\020\001\"{\n\016HedgeParamType\022\037\n\022HEDGEPAR" +
      "AM_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\024\n\020HEDGEPARAM_HEDG" +
      "E\020\000\022\027\n\023HEDGEPARAM_STOCKACC\020\001\022\025\n\021HEDGEPAR" +
      "AM_FUTACC\020\002\032\002\020\001\"\346\001\n\010FlagType\022\020\n\014UNKNOWN_",
      "FLAG\020\000\022\014\n\007ST_STAR\020\315e\022\007\n\002ST\020\314e\022\021\n\014ISSUE_F" +
      "AILED\020\321e\022\016\n\tUNEXAMINE\020\320e\022\020\n\013DEFER_ISSUE\020" +
      "\323e\022\020\n\013SUSPEND_IPO\020\313e\022\017\n\nNORMAL_IPO\020\311e\022\017\n" +
      "\nDELIST_IPO\020\312e\022\024\n\017ISSUED_UNLISTED\020\316e\022\025\n\020" +
      "PRE_ANNOUNCEMENT\020\317e\022\033\n\026CLEANING_FOR_DELI" +
      "STING\020\322e\"\342\002\n\022DetailSecurityType\022\031\n\025UNKNO" +
      "WN_SECURITY_TYPE\020\000\022\r\n\010A_SHARES\020\351\007\022\r\n\010B_S" +
      "HARES\020\352\007\022\024\n\017CLOSED_END_FUND\020\271\027\022\024\n\017OPENED" +
      "_END_FUND\020\272\027\022\010\n\003LOF\020\273\027\022\010\n\003ETF\020\274\027\022\030\n\023COMP" +
      "REHENSIVE_INDEX\020\241\037\022\024\n\017COMPONENT_INDEX\020\242\037",
      "\022\021\n\014SECTOR_INDEX\020\243\037\022\020\n\013STOCK_INDEX\020\244\037\022\017\n" +
      "\nBOND_INDEX\020\245\037\022\017\n\nFUND_INDEX\020\246\037\022\020\n\013THEME" +
      "_INDEX\020\247\037\022\020\n\013STYLE_INDEX\020\250\037\022\023\n\016STRATEGY_" +
      "INDEX\020\252\037\022\017\n\nREST_INDEX\020\254\037\022\022\n\rSTOCK_WARRA" +
      "NT\020\211\'\"s\n\nSectorType\022\032\n\026ST_UNKNOWN_SECTOR" +
      "_TYPE\020\000\022\027\n\023ST_CONCEPT_OF_PLATE\020\001\022\034\n\030ST_N" +
      "EW_SW_LEVEL_INDUSTRY\020\002\022\022\n\016ST_STYLE_INDEX" +
      "\020\003\"v\n\021PositionPriceType\022\035\n\020PPT_UNKNOWN_T" +
      "YPE\020\377\377\377\377\377\377\377\377\377\001\022\024\n\020PPT_NEWEST_PRICE\020\000\022\027\n\023" +
      "PPT_BENCHMARK_PRICE\020\001\022\023\n\017PPT_LIMIT_PRICE",
      "\020\002\"\362\004\n\020OpenSlippageType\022\035\n\020OST_UNKNOWN_T" +
      "YPE\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010OST_ZERO\020\000\022\026\n\022OST_SELL" +
      "_ONE_PRICE\020\001\022\026\n\022OST_SELL_TWO_PRICE\020\002\022\030\n\024" +
      "OST_SELL_THREE_PRICE\020\003\022\027\n\023OST_SELL_FOUR_" +
      "PRICE\020\004\022\027\n\023OST_SELL_FIVE_PRICE\020\005\022\026\n\022OST_" +
      "SELL_SIX_PRICE\020\006\022\030\n\024OST_SELL_SEVEN_PRICE" +
      "\020\007\022\030\n\024OST_SELL_EIGHT_PRICE\020\010\022\027\n\023OST_SELL" +
      "_NINE_PRICE\020\t\022\026\n\022OST_SELL_TEN_PRICE\020\n\022\025\n" +
      "\021OST_BID_ONE_PRICE\020\013\022\025\n\021OST_BID_TWO_PRIC" +
      "E\020\014\022\027\n\023OST_BID_THREE_PRICE\020\r\022\026\n\022OST_BID_",
      "FOUR_PRICE\020\016\022\026\n\022OST_BID_FIVE_PRICE\020\017\022\025\n\021" +
      "OST_BID_SIX_PRICE\020\020\022\027\n\023OST_BID_SEVEN_PRI" +
      "CE\020\021\022\027\n\023OST_BID_EIGHT_PRICE\020\022\022\026\n\022OST_BID" +
      "_NINE_PRICE\020\023\022\025\n\021OST_BID_TEN_PRICE\020\024\022\032\n\026" +
      "OST_LIMITED_HIGH_PRICE\020\025\022\022\n\016OST_CURR_PRI" +
      "CE\020\026\022\031\n\025OST_LIMITED_LOW_PRICE\020\027\"\363\004\n\021Clos" +
      "eSlippageType\022\035\n\020CST_UNKNOWN_TYPE\020\377\377\377\377\377\377" +
      "\377\377\377\001\022\014\n\010CST_ZERO\020\000\022\025\n\021CST_BID_ONE_PRICE\020" +
      "\001\022\025\n\021CST_BID_TWO_PRICE\020\002\022\027\n\023CST_BID_THRE" +
      "E_PRICE\020\003\022\026\n\022CST_BID_FOUR_PRICE\020\004\022\026\n\022CST",
      "_BID_FIVE_PRICE\020\005\022\025\n\021CST_BID_SIX_PRICE\020\006" +
      "\022\027\n\023CST_BID_SEVEN_PRICE\020\007\022\027\n\023CST_BID_EIG" +
      "HT_PRICE\020\010\022\026\n\022CST_BID_NINE_PRICE\020\t\022\025\n\021CS" +
      "T_BID_TEN_PRICE\020\n\022\026\n\022CST_SELL_ONE_PRICE\020" +
      "\013\022\026\n\022CST_SELL_TWO_PRICE\020\014\022\030\n\024CST_SELL_TH" +
      "REE_PRICE\020\r\022\027\n\023CST_SELL_FOUR_PRICE\020\016\022\027\n\023" +
      "CST_SELL_FIVE_PRICE\020\017\022\026\n\022CST_SELL_SIX_PR" +
      "ICE\020\020\022\030\n\024CST_SELL_SEVEN_PRICE\020\021\022\030\n\024CST_S" +
      "ELL_EIGHT_PRICE\020\022\022\027\n\023CST_SELL_NINE_PRICE" +
      "\020\023\022\026\n\022CST_SELL_TEN_PRICE\020\024\022\032\n\026CST_LIMITE",
      "D_HIGH_PRICE\020\025\022\022\n\016CST_CURR_PRICE\020\026\022\031\n\025CS" +
      "T_LIMITED_LOW_PRICE\020\027\"N\n\014LFSignalType\022\036\n" +
      "\021LFST_UNKNOWN_TYPE\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nLFST_IN" +
      "DEX\020\000\022\016\n\nLFST_STOCK\020\001\":\n\tTradeType\022\016\n\nTT" +
      "_UNKNOWN\020\000\022\016\n\nTT_ENTRUST\020\001\022\r\n\tTT_CANCEL\020" +
      "\002\"r\n\023FSLend_SecurityType\022\032\n\rFSLST_UNKNOW" +
      "N\020\377\377\377\377\377\377\377\377\377\001\022\023\n\017FSLST_FINANCING\020\000\022\024\n\020FSL" +
      "ST_SECURITIES\020\001\022\024\n\020FSLST_COLLATERAL\020\002\"\\\n" +
      "\023FSLend_ContractType\022\032\n\rFSLCT_UNKNOWN\020\377\377" +
      "\377\377\377\377\377\377\377\001\022\023\n\017FSLCT_FINANCING\020\000\022\024\n\020FSLCT_S",
      "ECURITIES\020\001\"g\n\027FSLend_ContractEditType\022\033" +
      "\n\016FSLCET_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nFSLCET_AD" +
      "D\020\000\022\016\n\nFSLCET_DEL\020\001\022\017\n\013FSLCET_MDFY\020\002\"\262\001\n" +
      "\025FSLend_ContractStatus\022\032\n\rFSLCS_UNKNOWN\020" +
      "\377\377\377\377\377\377\377\377\377\001\022\022\n\016FSLCS_NOTREPAY\020\000\022\026\n\022FSLCS_" +
      "PARTIALREPAY\020\001\022\021\n\rFSLCS_EXPIRED\020\002\022\023\n\017FSL" +
      "CS_AUTOCLOSE\020\003\022\025\n\021FSLCS_MANUALCLOSE\020\004\022\022\n" +
      "\016FSLCS_REALTIME\020\005\"L\n\021ProductManageType\022\031" +
      "\n\025PRODUCT_MT_SELFMANAGE\020\000\022\034\n\030PRODUCT_MT_" +
      "INVESTADVISER\020\001\"\221\001\n\021DeltaOptimizeType\022\025\n",
      "\021DOT_BEST_FLUIDITY\020\000\022\023\n\017DOT_MAX_PREMIUM\020" +
      "\001\022\026\n\022DOT_MIN_VOLATILITY\020\002\022\022\n\016DOT_MIN_MAR" +
      "GIN\020\003\022\021\n\rDOT_MAX_GAMMA\020\004\022\021\n\rDOT_MIN_GAMM" +
      "A\020\005\"\252\001\n\014OptHedgeType\022\033\n\027OHT_PRIORITY_USE" +
      "_MARGIN\020\000\022\023\n\017OHT_MIN_PREMIUM\020\001\022\025\n\021OHT_BE" +
      "ST_FLUIDITY\020\002\022\023\n\017OHT_MAX_PREMIUM\020\003\022\026\n\022OH" +
      "T_MIN_VOLATILITY\020\004\022\021\n\rOHT_MAX_GAMMA\020\005\022\021\n" +
      "\rOHT_MIN_GAMMA\020\006\"\217\001\n\023OptionStrategyState" +
      "\022\017\n\013OSS_UNKNOWN\020\000\022\r\n\tOSS_READY\020\001\022\017\n\013OSS_" +
      "RUNNING\020\002\022\017\n\013OSS_SUSPEND\020\003\022\022\n\016OSS_TERMIN",
      "ATED\020\004\022\020\n\014OSS_CANCELED\020\005\022\020\n\014OSS_COMPLETE" +
      "\020\006\"8\n\022OptionStrategyName\022\r\n\tOPT_COMBO\020\001\022" +
      "\023\n\017OPT_DELTA_HEDGE\020\002\"\223\001\n\024TransferInAndOu" +
      "tType\022\037\n\022TIAOT_UNKNOWN_TYPE\020\377\377\377\377\377\377\377\377\377\001\022\024" +
      "\n\020TIAOT_CAPITAL_IN\020\000\022\025\n\021TIAOT_CAPITAL_OU" +
      "T\020\001\022\025\n\021TIAOT_SECURITY_IN\020\002\022\026\n\022TIAOT_SECU" +
      "RITY_OUT\020\003B$\n\024com.sunquan.zmqprotoB\014Type" +
      "DefClass"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_sunquan_zmqproto_TypeDef_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_sunquan_zmqproto_TypeDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sunquan_zmqproto_TypeDef_descriptor,
        new java.lang.String[] { });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
