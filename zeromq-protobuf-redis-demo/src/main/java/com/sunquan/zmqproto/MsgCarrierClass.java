// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgcarrier.proto

package com.sunquan.zmqproto;

public final class MsgCarrierClass {
  private MsgCarrierClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MsgCarrierOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sunquan.zmqproto.MsgCarrier)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int64 seqno = 1;</code>
     */
    boolean hasSeqno();
    /**
     * <code>optional int64 seqno = 1;</code>
     */
    long getSeqno();

    /**
     * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
     */
    com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType getType();

    /**
     * <code>optional bytes message = 3;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional bytes message = 3;</code>
     */
    com.google.protobuf.ByteString getMessage();

    /**
     * <code>optional int32 indicator = 4;</code>
     *
     * <pre>
     *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
     *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
     * </pre>
     */
    boolean hasIndicator();
    /**
     * <code>optional int32 indicator = 4;</code>
     *
     * <pre>
     *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
     *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
     * </pre>
     */
    int getIndicator();

    /**
     * <code>optional string jwt = 5;</code>
     *
     * <pre>
     * Json Web Token
     * </pre>
     */
    boolean hasJwt();
    /**
     * <code>optional string jwt = 5;</code>
     *
     * <pre>
     * Json Web Token
     * </pre>
     */
    java.lang.String getJwt();
    /**
     * <code>optional string jwt = 5;</code>
     *
     * <pre>
     * Json Web Token
     * </pre>
     */
    com.google.protobuf.ByteString
        getJwtBytes();

    /**
     * <code>optional bool authenticated = 6;</code>
     *
     * <pre>
     * jwt authenticate status
     * </pre>
     */
    boolean hasAuthenticated();
    /**
     * <code>optional bool authenticated = 6;</code>
     *
     * <pre>
     * jwt authenticate status
     * </pre>
     */
    boolean getAuthenticated();

    /**
     * <code>optional string service = 7;</code>
     *
     * <pre>
     *服务端属性字段，可能是服务名称或者端口号
     * </pre>
     */
    boolean hasService();
    /**
     * <code>optional string service = 7;</code>
     *
     * <pre>
     *服务端属性字段，可能是服务名称或者端口号
     * </pre>
     */
    java.lang.String getService();
    /**
     * <code>optional string service = 7;</code>
     *
     * <pre>
     *服务端属性字段，可能是服务名称或者端口号
     * </pre>
     */
    com.google.protobuf.ByteString
        getServiceBytes();

    /**
     * <code>optional string pubtopic = 8;</code>
     *
     * <pre>
     *用来保存 pub 消息时的主题字段
     * </pre>
     */
    boolean hasPubtopic();
    /**
     * <code>optional string pubtopic = 8;</code>
     *
     * <pre>
     *用来保存 pub 消息时的主题字段
     * </pre>
     */
    java.lang.String getPubtopic();
    /**
     * <code>optional string pubtopic = 8;</code>
     *
     * <pre>
     *用来保存 pub 消息时的主题字段
     * </pre>
     */
    com.google.protobuf.ByteString
        getPubtopicBytes();

    /**
     * <code>optional int64 msgid = 9;</code>
     */
    boolean hasMsgid();
    /**
     * <code>optional int64 msgid = 9;</code>
     */
    long getMsgid();

    /**
     * <code>optional bool iscompress = 10;</code>
     */
    boolean hasIscompress();
    /**
     * <code>optional bool iscompress = 10;</code>
     */
    boolean getIscompress();
  }
  /**
   * Protobuf type {@code com.sunquan.zmqproto.MsgCarrier}
   */
  public static final class MsgCarrier extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sunquan.zmqproto.MsgCarrier)
      MsgCarrierOrBuilder {
    // Use MsgCarrier.newBuilder() to construct.
    private MsgCarrier(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MsgCarrier(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MsgCarrier defaultInstance;
    public static MsgCarrier getDefaultInstance() {
      return defaultInstance;
    }

    public MsgCarrier getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MsgCarrier(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seqno_ = input.readInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType value = com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              message_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              indicator_ = input.readInt32();
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              jwt_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              authenticated_ = input.readBool();
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              service_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              pubtopic_ = bs;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              msgid_ = input.readInt64();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              iscompress_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarrier_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarrier_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.class, com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.Builder.class);
    }

    public static com.google.protobuf.Parser<MsgCarrier> PARSER =
        new com.google.protobuf.AbstractParser<MsgCarrier>() {
      public MsgCarrier parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MsgCarrier(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MsgCarrier> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code com.sunquan.zmqproto.MsgCarrier.MsgType}
     */
    public enum MsgType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MSG_UNKNOWN = -1;</code>
       */
      MSG_UNKNOWN(0, -1),
      /**
       * <code>INSERTORDER = 0;</code>
       */
      INSERTORDER(1, 0),
      /**
       * <code>INSERTORDERREP = 1;</code>
       */
      INSERTORDERREP(2, 1),
      /**
       * <code>CANCELORDER = 2;</code>
       */
      CANCELORDER(3, 2),
      /**
       * <code>CANCELORDERREP = 3;</code>
       */
      CANCELORDERREP(4, 3),
      /**
       * <code>QUERYORDER = 4;</code>
       */
      QUERYORDER(5, 4),
      /**
       * <code>QUERYORDERREP = 5;</code>
       */
      QUERYORDERREP(6, 5),
      /**
       * <code>QUERYPOSITION = 6;</code>
       */
      QUERYPOSITION(7, 6),
      /**
       * <code>QUERYPOSITIONREP = 7;</code>
       */
      QUERYPOSITIONREP(8, 7),
      /**
       * <code>QUERYACCOUNT = 8;</code>
       */
      QUERYACCOUNT(9, 8),
      /**
       * <code>QUERYACCOUNTREP = 9;</code>
       */
      QUERYACCOUNTREP(10, 9),
      /**
       * <code>QUERYTRADE = 10;</code>
       */
      QUERYTRADE(11, 10),
      /**
       * <code>QUERYTRADEREP = 11;</code>
       */
      QUERYTRADEREP(12, 11),
      /**
       * <code>ERRORTYPE = 12;</code>
       */
      ERRORTYPE(13, 12),
      /**
       * <code>INSERTJOB = 13;</code>
       *
       * <pre>
       *new trading job form the trader side.
       * </pre>
       */
      INSERTJOB(14, 13),
      /**
       * <code>INSERTJOBREP = 14;</code>
       */
      INSERTJOBREP(15, 14),
      /**
       * <code>JOBRISKCHECK = 15;</code>
       */
      JOBRISKCHECK(16, 15),
      /**
       * <code>JOBRISKCHECKREP = 16;</code>
       */
      JOBRISKCHECKREP(17, 16),
      /**
       * <code>PAUSEJOB = 17;</code>
       */
      PAUSEJOB(18, 17),
      /**
       * <code>PAUSEJOBREP = 18;</code>
       */
      PAUSEJOBREP(19, 18),
      /**
       * <code>RESTARTJOB = 19;</code>
       */
      RESTARTJOB(20, 19),
      /**
       * <code>RESTARTJOBREP = 20;</code>
       */
      RESTARTJOBREP(21, 20),
      /**
       * <code>STOPJOB = 21;</code>
       */
      STOPJOB(22, 21),
      /**
       * <code>STOPJOBREP = 22;</code>
       */
      STOPJOBREP(23, 22),
      /**
       * <code>RISKCHECK = 23;</code>
       */
      RISKCHECK(24, 23),
      /**
       * <code>RISKCHECKREP = 24;</code>
       */
      RISKCHECKREP(25, 24),
      /**
       * <code>SECURITYCODETABLE = 25;</code>
       */
      SECURITYCODETABLE(26, 25),
      /**
       * <code>SNAPSHOT = 26;</code>
       */
      SNAPSHOT(27, 26),
      /**
       * <code>TRANSACTION = 27;</code>
       */
      TRANSACTION(28, 27),
      /**
       * <code>QUERYCODETABLE = 28;</code>
       */
      QUERYCODETABLE(29, 28),
      /**
       * <code>QUERYSNAPSHOTALL = 29;</code>
       */
      QUERYSNAPSHOTALL(30, 29),
      /**
       * <code>JOBCOMMAND = 30;</code>
       *
       * <pre>
       *job pause, replay or end
       * </pre>
       */
      JOBCOMMAND(31, 30),
      /**
       * <code>LOGIN = 31;</code>
       */
      LOGIN(32, 31),
      /**
       * <code>LOGINREP = 32;</code>
       */
      LOGINREP(33, 32),
      /**
       * <code>USERAUTH = 33;</code>
       */
      USERAUTH(34, 33),
      /**
       * <code>USERAUTHREP = 34;</code>
       */
      USERAUTHREP(35, 34),
      /**
       * <code>BASICDATA = 35;</code>
       */
      BASICDATA(36, 35),
      /**
       * <code>PUB_JOBUPDATE = 36;</code>
       */
      PUB_JOBUPDATE(37, 36),
      /**
       * <code>PUB_ORDERUPDATE = 37;</code>
       */
      PUB_ORDERUPDATE(38, 37),
      /**
       * <code>ALGO_QUERYJOBALL = 38;</code>
       */
      ALGO_QUERYJOBALL(39, 38),
      /**
       * <code>ALGO_QUERYJOBS = 39;</code>
       */
      ALGO_QUERYJOBS(40, 39),
      /**
       * <code>ALGO_QUERYJOB4ACCOUNT = 40;</code>
       *
       * <pre>
       *all jobs for certain account
       * </pre>
       */
      ALGO_QUERYJOB4ACCOUNT(41, 40),
      /**
       * <code>ALGO_QUERYJOBALLREP = 41;</code>
       */
      ALGO_QUERYJOBALLREP(42, 41),
      /**
       * <code>ALGO_QUERYORDERALL = 42;</code>
       */
      ALGO_QUERYORDERALL(43, 42),
      /**
       * <code>ALGO_QUERYORDERS = 43;</code>
       */
      ALGO_QUERYORDERS(44, 43),
      /**
       * <code>ALGO_QUERYORDER4ACCOUNT = 44;</code>
       *
       * <pre>
       *all orders for certain account
       * </pre>
       */
      ALGO_QUERYORDER4ACCOUNT(45, 44),
      /**
       * <code>ALGO_QUERYORDER4JOB = 45;</code>
       *
       * <pre>
       *all orders for certain job
       * </pre>
       */
      ALGO_QUERYORDER4JOB(46, 45),
      /**
       * <code>ALGO_QUERYORDERALLREP = 46;</code>
       */
      ALGO_QUERYORDERALLREP(47, 46),
      /**
       * <code>BASICDATA_STOCKALPHABETA = 47;</code>
       */
      BASICDATA_STOCKALPHABETA(48, 47),
      /**
       * <code>BASICDATA_INDEXSTATUS = 48;</code>
       */
      BASICDATA_INDEXSTATUS(49, 48),
      /**
       * <code>BASICDATA_SECURITYCODETABLE = 49;</code>
       */
      BASICDATA_SECURITYCODETABLE(50, 49),
      /**
       * <code>BASICDATA_SECTORCODETABLE = 50;</code>
       */
      BASICDATA_SECTORCODETABLE(51, 50),
      /**
       * <code>BASICDATA_FUTUREFORECAST = 51;</code>
       */
      BASICDATA_FUTUREFORECAST(52, 51),
      /**
       * <code>BASICDATA_INDEXFORECAST = 52;</code>
       */
      BASICDATA_INDEXFORECAST(53, 52),
      /**
       * <code>BASICDATA_STOCKBASEINFO = 53;</code>
       */
      BASICDATA_STOCKBASEINFO(54, 53),
      /**
       * <code>BASICDATA_INDEXCONSTITUENTS = 54;</code>
       */
      BASICDATA_INDEXCONSTITUENTS(55, 54),
      /**
       * <code>BASICDATA_INDUSCONSTITUENTS = 55;</code>
       */
      BASICDATA_INDUSCONSTITUENTS(56, 55),
      /**
       * <code>BASICDATA_FUNDINDEXMAP = 56;</code>
       */
      BASICDATA_FUNDINDEXMAP(57, 56),
      /**
       * <code>BASICDATA_INDEXPRICEFORECAST = 57;</code>
       */
      BASICDATA_INDEXPRICEFORECAST(58, 57),
      /**
       * <code>BASICDATA_STOCKPRICEFORECAST = 58;</code>
       */
      BASICDATA_STOCKPRICEFORECAST(59, 58),
      /**
       * <code>BASICDATA_STOCKRISKVALUE = 59;</code>
       */
      BASICDATA_STOCKRISKVALUE(60, 59),
      /**
       * <code>BASICDATA_SECTORWEIGHT = 60;</code>
       */
      BASICDATA_SECTORWEIGHT(61, 60),
      /**
       * <code>BASICDATA_FUNDALPHABETA = 61;</code>
       */
      BASICDATA_FUNDALPHABETA(62, 61),
      /**
       * <code>ALGO_QUERYJOB4ACCOUNTREP = 62;</code>
       */
      ALGO_QUERYJOB4ACCOUNTREP(63, 62),
      /**
       * <code>ALGO_QUERYORDERSREP = 63;</code>
       */
      ALGO_QUERYORDERSREP(64, 63),
      /**
       * <code>ALGO_QUERYORDER4ACCOUNTREP = 64;</code>
       */
      ALGO_QUERYORDER4ACCOUNTREP(65, 64),
      /**
       * <code>ALGO_QUERYORDER4JOBREP = 65;</code>
       */
      ALGO_QUERYORDER4JOBREP(66, 65),
      /**
       * <code>USERHEARTBT = 66;</code>
       */
      USERHEARTBT(67, 66),
      /**
       * <code>PUBACCOUNTINFO = 70;</code>
       */
      PUBACCOUNTINFO(68, 70),
      /**
       * <code>PUBPOSITIONS = 73;</code>
       */
      PUBPOSITIONS(69, 73),
      /**
       * <code>QUERYPOSITIONSUMMARY = 74;</code>
       */
      QUERYPOSITIONSUMMARY(70, 74),
      /**
       * <code>QUERYPOSITIONSUMMARYREP = 75;</code>
       */
      QUERYPOSITIONSUMMARYREP(71, 75),
      /**
       * <code>PUBPOSITIONSUMMARY = 76;</code>
       */
      PUBPOSITIONSUMMARY(72, 76),
      /**
       * <code>PUBTRADES = 79;</code>
       */
      PUBTRADES(73, 79),
      /**
       * <code>PUBORDERS = 82;</code>
       */
      PUBORDERS(74, 82),
      /**
       * <code>QUERYTDPROFIT = 83;</code>
       */
      QUERYTDPROFIT(75, 83),
      /**
       * <code>QUERYTDPROFITREP = 84;</code>
       */
      QUERYTDPROFITREP(76, 84),
      /**
       * <code>PUBTDPROFIT = 85;</code>
       */
      PUBTDPROFIT(77, 85),
      /**
       * <code>ALGO_QUERYJOBSREP = 86;</code>
       */
      ALGO_QUERYJOBSREP(78, 86),
      /**
       * <code>JOBCOMMANDREP = 87;</code>
       */
      JOBCOMMANDREP(79, 87),
      /**
       * <code>CONFIG_QUERYPRODLIST = 88;</code>
       */
      CONFIG_QUERYPRODLIST(80, 88),
      /**
       * <code>CONFIG_QUERYPRODLISTREP = 89;</code>
       */
      CONFIG_QUERYPRODLISTREP(81, 89),
      /**
       * <code>CONFIG_QUERYACCOUNT4PROD = 90;</code>
       */
      CONFIG_QUERYACCOUNT4PROD(82, 90),
      /**
       * <code>CONFIG_QUERYACCOUNT4PRODREP = 91;</code>
       */
      CONFIG_QUERYACCOUNT4PRODREP(83, 91),
      /**
       * <code>BASICDATA_MARKETSTYLE = 92;</code>
       */
      BASICDATA_MARKETSTYLE(84, 92),
      /**
       * <code>SNAPSHOTS = 93;</code>
       */
      SNAPSHOTS(85, 93),
      /**
       * <code>TRANSACTIONS = 94;</code>
       */
      TRANSACTIONS(86, 94),
      /**
       * <code>RISK_TESTMSG = 95;</code>
       */
      RISK_TESTMSG(87, 95),
      /**
       * <code>RISK_OVERNIGHT = 96;</code>
       */
      RISK_OVERNIGHT(88, 96),
      /**
       * <code>QUERYSNAPSHOTS = 97;</code>
       */
      QUERYSNAPSHOTS(89, 97),
      /**
       * <code>QUERYSNAPSHOTREP = 98;</code>
       */
      QUERYSNAPSHOTREP(90, 98),
      /**
       * <code>HEDGE_STATEUPDATE = 99;</code>
       */
      HEDGE_STATEUPDATE(91, 99),
      /**
       * <code>DERIVEDDATA_LFSIGNAL_REQ = 100;</code>
       */
      DERIVEDDATA_LFSIGNAL_REQ(92, 100),
      /**
       * <code>DERIVEDDATA_LFSIGNAL_REP = 101;</code>
       */
      DERIVEDDATA_LFSIGNAL_REP(93, 101),
      /**
       * <code>HEDGE_SETPARAM = 131;</code>
       */
      HEDGE_SETPARAM(94, 131),
      /**
       * <code>HEDGE_SETPARAMREP = 132;</code>
       */
      HEDGE_SETPARAMREP(95, 132),
      /**
       * <code>HEDGE_SETPARAMEXTENDREP = 133;</code>
       */
      HEDGE_SETPARAMEXTENDREP(96, 133),
      /**
       * <code>HEDGE_GETPARAM = 134;</code>
       */
      HEDGE_GETPARAM(97, 134),
      /**
       * <code>HEDGE_GETPARAMREP = 135;</code>
       */
      HEDGE_GETPARAMREP(98, 135),
      /**
       * <code>HEDGE_GETREFSIGNAL = 136;</code>
       */
      HEDGE_GETREFSIGNAL(99, 136),
      /**
       * <code>HEDGE_GETREFSIGNALREP = 137;</code>
       */
      HEDGE_GETREFSIGNALREP(100, 137),
      /**
       * <code>HEDGE_CONTRACTCODE = 138;</code>
       */
      HEDGE_CONTRACTCODE(101, 138),
      /**
       * <code>HEDGE_CONTRACTCODEREP = 139;</code>
       */
      HEDGE_CONTRACTCODEREP(102, 139),
      /**
       * <code>HEDGE_GETSFACCOUNT = 140;</code>
       */
      HEDGE_GETSFACCOUNT(103, 140),
      /**
       * <code>HEDGE_GETSFACCOUNTREP = 141;</code>
       */
      HEDGE_GETSFACCOUNTREP(104, 141),
      /**
       * <code>QUERY_SNAPLITESALL = 142;</code>
       */
      QUERY_SNAPLITESALL(105, 142),
      /**
       * <code>QUERY_SNAPLITES = 143;</code>
       */
      QUERY_SNAPLITES(106, 143),
      /**
       * <code>QUERY_SNAPLITESREP = 144;</code>
       */
      QUERY_SNAPLITESREP(107, 144),
      /**
       * <code>PUB_SNAPLITEUPDATE = 145;</code>
       */
      PUB_SNAPLITEUPDATE(108, 145),
      /**
       * <code>RISK_SETTING = 146;</code>
       */
      RISK_SETTING(109, 146),
      /**
       * <code>RISK_SETTINGREP = 147;</code>
       */
      RISK_SETTINGREP(110, 147),
      /**
       * <code>RISK_RISKSETTINGUPDATE = 148;</code>
       */
      RISK_RISKSETTINGUPDATE(111, 148),
      /**
       * <code>RISK_RISKSETTINGUPDATEREP = 149;</code>
       */
      RISK_RISKSETTINGUPDATEREP(112, 149),
      /**
       * <code>RISK_GETPOSITIONBETA = 150;</code>
       */
      RISK_GETPOSITIONBETA(113, 150),
      /**
       * <code>RISK_GETPOSITIONBETAREP = 151;</code>
       */
      RISK_GETPOSITIONBETAREP(114, 151),
      /**
       * <code>RISK_GETRISKREASON = 152;</code>
       */
      RISK_GETRISKREASON(115, 152),
      /**
       * <code>RISK_GETRISKREASONREP = 153;</code>
       */
      RISK_GETRISKREASONREP(116, 153),
      /**
       * <code>RISK_GETRISKSETTING = 154;</code>
       */
      RISK_GETRISKSETTING(117, 154),
      /**
       * <code>RISK_GETRISKSETTINGREP = 155;</code>
       */
      RISK_GETRISKSETTINGREP(118, 155),
      /**
       * <code>RISK_GETALLRISKSETTING = 156;</code>
       */
      RISK_GETALLRISKSETTING(119, 156),
      /**
       * <code>RISK_GETALLRISKSETTINGREP = 157;</code>
       */
      RISK_GETALLRISKSETTINGREP(120, 157),
      /**
       * <code>PUB_JOBSUMMARY = 158;</code>
       */
      PUB_JOBSUMMARY(121, 158),
      /**
       * <code>DERIVEDDATA_ENTRUSTDEPTH_REP = 159;</code>
       */
      DERIVEDDATA_ENTRUSTDEPTH_REP(122, 159),
      /**
       * <code>DERIVEDDATA_ENTRUSTDEPTH_REQ = 160;</code>
       */
      DERIVEDDATA_ENTRUSTDEPTH_REQ(123, 160),
      /**
       * <code>QUERY_THRESHOLD = 161;</code>
       */
      QUERY_THRESHOLD(124, 161),
      /**
       * <code>QUERY_THRESHOLDREP = 162;</code>
       */
      QUERY_THRESHOLDREP(125, 162),
      /**
       * <code>QUOTE_HEARTBEAT = 163;</code>
       */
      QUOTE_HEARTBEAT(126, 163),
      /**
       * <code>HFTRADING_LOGIN = 164;</code>
       */
      HFTRADING_LOGIN(127, 164),
      /**
       * <code>HFTRADING_LOGINREP = 165;</code>
       */
      HFTRADING_LOGINREP(128, 165),
      /**
       * <code>HFTRADING_ACCOUNTLOGIN = 166;</code>
       */
      HFTRADING_ACCOUNTLOGIN(129, 166),
      /**
       * <code>HFTRADING_ADDUPDATESTRATEGY = 167;</code>
       */
      HFTRADING_ADDUPDATESTRATEGY(130, 167),
      /**
       * <code>HFTRADING_ADDUPDATESTRATEGYREP = 168;</code>
       */
      HFTRADING_ADDUPDATESTRATEGYREP(131, 168),
      /**
       * <code>HFTRADING_STRATEGYSREQ = 171;</code>
       */
      HFTRADING_STRATEGYSREQ(132, 171),
      /**
       * <code>HFTRADING_STRATEGYSREP = 172;</code>
       */
      HFTRADING_STRATEGYSREP(133, 172),
      /**
       * <code>HFTRADING_DELETESTRATEGY = 173;</code>
       */
      HFTRADING_DELETESTRATEGY(134, 173),
      /**
       * <code>HFTRADING_DELETESTRATEGYREP = 174;</code>
       */
      HFTRADING_DELETESTRATEGYREP(135, 174),
      /**
       * <code>HFTRADING_STARTSTRATEGY = 175;</code>
       */
      HFTRADING_STARTSTRATEGY(136, 175),
      /**
       * <code>HFTRADING_ACTIONSTRATEGYREP = 176;</code>
       */
      HFTRADING_ACTIONSTRATEGYREP(137, 176),
      /**
       * <code>HFTRADING_SUSPENDSTRATEGY = 177;</code>
       */
      HFTRADING_SUSPENDSTRATEGY(138, 177),
      /**
       * <code>HFTRADING_STOPSTRATEGY = 178;</code>
       */
      HFTRADING_STOPSTRATEGY(139, 178),
      /**
       * <code>HFTRADING_CONTRACTSREQ = 179;</code>
       */
      HFTRADING_CONTRACTSREQ(140, 179),
      /**
       * <code>HFTRADING_CONTRACTSREP = 180;</code>
       */
      HFTRADING_CONTRACTSREP(141, 180),
      /**
       * <code>HFTRADING_STRATEGYVIEWPUB = 181;</code>
       */
      HFTRADING_STRATEGYVIEWPUB(142, 181),
      /**
       * <code>BASICDATA_FUNDBASEINFO = 182;</code>
       */
      BASICDATA_FUNDBASEINFO(143, 182),
      /**
       * <code>BASICDATA_CLIENTSECTORWEIGHT = 183;</code>
       */
      BASICDATA_CLIENTSECTORWEIGHT(144, 183),
      /**
       * <code>BASICDATA_BASICUPDATETIME = 184;</code>
       */
      BASICDATA_BASICUPDATETIME(145, 184),
      /**
       * <code>CONFIG_QUERYFEES4ACCOUNT = 185;</code>
       */
      CONFIG_QUERYFEES4ACCOUNT(146, 185),
      /**
       * <code>CONFIG_QUERYFEES4ACCOUNTREP = 186;</code>
       */
      CONFIG_QUERYFEES4ACCOUNTREP(147, 186),
      /**
       * <code>DERIVEDDATA_MFANDPERCENT_REQ = 187;</code>
       */
      DERIVEDDATA_MFANDPERCENT_REQ(148, 187),
      /**
       * <code>DERIVEDDATA_MFANDPERCENT_REP = 188;</code>
       */
      DERIVEDDATA_MFANDPERCENT_REP(149, 188),
      /**
       * <code>DERIVEDDATA_RANGEPROJECTION_REQ = 189;</code>
       */
      DERIVEDDATA_RANGEPROJECTION_REQ(150, 189),
      /**
       * <code>DERIVEDDATA_RANGEPROJECTION_REP = 190;</code>
       */
      DERIVEDDATA_RANGEPROJECTION_REP(151, 190),
      /**
       * <code>HFTRADING_STRATEGYVIEWSREQ = 191;</code>
       */
      HFTRADING_STRATEGYVIEWSREQ(152, 191),
      /**
       * <code>HFTRADING_STRATEGYVIEWSREP = 192;</code>
       */
      HFTRADING_STRATEGYVIEWSREP(153, 192),
      /**
       * <code>HFTRADING_HFQUERYTRADEREQ = 193;</code>
       */
      HFTRADING_HFQUERYTRADEREQ(154, 193),
      /**
       * <code>HFTRADING_HFQUERYTRADEREP = 194;</code>
       */
      HFTRADING_HFQUERYTRADEREP(155, 194),
      /**
       * <code>HFTRADING_SPREADDATAPUB = 195;</code>
       */
      HFTRADING_SPREADDATAPUB(156, 195),
      /**
       * <code>HFTRADING_PROFITDATAPUB = 196;</code>
       */
      HFTRADING_PROFITDATAPUB(157, 196),
      /**
       * <code>HFTRADING_QUERYPROFITDATAREQ = 197;</code>
       */
      HFTRADING_QUERYPROFITDATAREQ(158, 197),
      /**
       * <code>HFTRADING_QUERYPROFITDATAREP = 198;</code>
       */
      HFTRADING_QUERYPROFITDATAREP(159, 198),
      /**
       * <code>HFTRADING_QUERYINSTRUMENTREQ = 199;</code>
       */
      HFTRADING_QUERYINSTRUMENTREQ(160, 199),
      /**
       * <code>HFTRADING_QUERYINSTRUMENTRSP = 200;</code>
       */
      HFTRADING_QUERYINSTRUMENTRSP(161, 200),
      /**
       * <code>REDIS_COMMANDREQ = 201;</code>
       */
      REDIS_COMMANDREQ(162, 201),
      /**
       * <code>REDIS_COMMANDREP = 202;</code>
       */
      REDIS_COMMANDREP(163, 202),
      /**
       * <code>RISK_SAVE_COMPANYRISKSETTING_REQ = 203;</code>
       */
      RISK_SAVE_COMPANYRISKSETTING_REQ(164, 203),
      /**
       * <code>RISK_SAVE_COMPANYRISKSETTING_REP = 204;</code>
       */
      RISK_SAVE_COMPANYRISKSETTING_REP(165, 204),
      /**
       * <code>RISK_GET_COMPANYRISKSETTING_REQ = 205;</code>
       */
      RISK_GET_COMPANYRISKSETTING_REQ(166, 205),
      /**
       * <code>RISK_GET_COMPANYRISKSETTING_REP = 206;</code>
       */
      RISK_GET_COMPANYRISKSETTING_REP(167, 206),
      /**
       * <code>ModifyPwd = 207;</code>
       */
      ModifyPwd(168, 207),
      /**
       * <code>ModifyPwdRep = 208;</code>
       */
      ModifyPwdRep(169, 208),
      /**
       * <code>PUBALLPOSITION = 209;</code>
       */
      PUBALLPOSITION(170, 209),
      /**
       * <code>QueryQuote = 210;</code>
       */
      QueryQuote(171, 210),
      /**
       * <code>QueryQuoteRep = 211;</code>
       */
      QueryQuoteRep(172, 211),
      /**
       * <code>SYSTEMLOGIN = 212;</code>
       */
      SYSTEMLOGIN(173, 212),
      /**
       * <code>SYSTEMLOGINREP = 213;</code>
       */
      SYSTEMLOGINREP(174, 213),
      /**
       * <code>SMM_QUERY_REQ = 214;</code>
       */
      SMM_QUERY_REQ(175, 214),
      /**
       * <code>SMM_QUERY_REP = 215;</code>
       */
      SMM_QUERY_REP(176, 215),
      /**
       * <code>SMM_MODIFY_REQ = 216;</code>
       */
      SMM_MODIFY_REQ(177, 216),
      /**
       * <code>SMM_MODIFY_REP = 217;</code>
       */
      SMM_MODIFY_REP(178, 217),
      /**
       * <code>SMM_PUB = 218;</code>
       */
      SMM_PUB(179, 218),
      /**
       * <code>SMM_KEYPRICES_REQ = 219;</code>
       */
      SMM_KEYPRICES_REQ(180, 219),
      /**
       * <code>SMM_KEYPRICES_REP = 220;</code>
       */
      SMM_KEYPRICES_REP(181, 220),
      /**
       * <code>INDEX = 221;</code>
       */
      INDEX(182, 221),
      /**
       * <code>DDL1 = 222;</code>
       *
       * <pre>
       *deriveddata level1
       * </pre>
       */
      DDL1(183, 222),
      /**
       * <code>GATEWAY_SUB = 223;</code>
       *
       * <pre>
       *gateWay 消息订阅
       * </pre>
       */
      GATEWAY_SUB(184, 223),
      /**
       * <code>GATEWAY_UNSUB = 224;</code>
       *
       * <pre>
       *gateWay 取消消息订阅
       * </pre>
       */
      GATEWAY_UNSUB(185, 224),
      /**
       * <code>BASICDATA_MARKETSTYLEREQ = 225;</code>
       */
      BASICDATA_MARKETSTYLEREQ(186, 225),
      /**
       * <code>DDLSector = 226;</code>
       *
       * <pre>
       *deriveddata sector data
       * </pre>
       */
      DDLSector(187, 226),
      /**
       * <code>PORTFOLIO_EDIT_REQ = 227;</code>
       */
      PORTFOLIO_EDIT_REQ(188, 227),
      /**
       * <code>PORTFOLIO_EDIT_RSP = 228;</code>
       */
      PORTFOLIO_EDIT_RSP(189, 228),
      /**
       * <code>PORTFOLIOITEM_EDIT_REQ = 229;</code>
       */
      PORTFOLIOITEM_EDIT_REQ(190, 229),
      /**
       * <code>PORTFOLIOITEM_EDIT_RSP = 230;</code>
       */
      PORTFOLIOITEM_EDIT_RSP(191, 230),
      /**
       * <code>ACCOUNT_AVAILABLE_REQ = 231;</code>
       */
      ACCOUNT_AVAILABLE_REQ(192, 231),
      /**
       * <code>ACCOUNT_AVAILABLE_RSP = 232;</code>
       */
      ACCOUNT_AVAILABLE_RSP(193, 232),
      /**
       * <code>ACCOUNT_AVAILABLE_PUB = 233;</code>
       */
      ACCOUNT_AVAILABLE_PUB(194, 233),
      /**
       * <code>USERAUTH_USEROPERATE = 234;</code>
       */
      USERAUTH_USEROPERATE(195, 234),
      /**
       * <code>USERAUTH_PRODUCTOPERATE = 235;</code>
       */
      USERAUTH_PRODUCTOPERATE(196, 235),
      /**
       * <code>RISK_RISKREPORTREQ = 236;</code>
       */
      RISK_RISKREPORTREQ(197, 236),
      /**
       * <code>RISK_RISKREPORTREP = 237;</code>
       */
      RISK_RISKREPORTREP(198, 237),
      /**
       * <code>DDRT = 238;</code>
       *
       * <pre>
       *deriveddata rt
       * </pre>
       */
      DDRT(199, 238),
      /**
       * <code>QUERY_SNAPLITESALL_COMPRESS_REQ = 239;</code>
       */
      QUERY_SNAPLITESALL_COMPRESS_REQ(200, 239),
      /**
       * <code>QUERY_SNAPLITESALL_COMPRESS_RSP = 240;</code>
       */
      QUERY_SNAPLITESALL_COMPRESS_RSP(201, 240),
      /**
       * <code>ANALYSIS_TCA_REQ = 241;</code>
       */
      ANALYSIS_TCA_REQ(202, 241),
      /**
       * <code>ANALYSIS_TCA_RSP = 242;</code>
       */
      ANALYSIS_TCA_RSP(203, 242),
      /**
       * <code>FSLEND_QUERYSECURITYITEM_REQ = 243;</code>
       */
      FSLEND_QUERYSECURITYITEM_REQ(204, 243),
      /**
       * <code>FSLEND_QUERYSECURITYITEM_RSP = 244;</code>
       */
      FSLEND_QUERYSECURITYITEM_RSP(205, 244),
      /**
       * <code>FSLEND_QUERYCONTRACT_REQ = 245;</code>
       */
      FSLEND_QUERYCONTRACT_REQ(206, 245),
      /**
       * <code>FSLEND_QUERYCONTRACT_RSP = 246;</code>
       */
      FSLEND_QUERYCONTRACT_RSP(207, 246),
      /**
       * <code>QUERYPOSITION_COMPRESS_REQ = 247;</code>
       */
      QUERYPOSITION_COMPRESS_REQ(208, 247),
      /**
       * <code>QUERYPOSITION_COMPRESS_RSP = 248;</code>
       */
      QUERYPOSITION_COMPRESS_RSP(209, 248),
      /**
       * <code>QUERYALLACCOUNT_REQ = 249;</code>
       */
      QUERYALLACCOUNT_REQ(210, 249),
      /**
       * <code>QUERYALLACCOUNT_RSP = 250;</code>
       */
      QUERYALLACCOUNT_RSP(211, 250),
      /**
       * <code>PUB_FSLEND_CONTRACT = 251;</code>
       */
      PUB_FSLEND_CONTRACT(212, 251),
      /**
       * <code>LATENCYINDICATORS = 252;</code>
       */
      LATENCYINDICATORS(213, 252),
      /**
       * <code>CurrencyEtf_StrategyAddReq = 253;</code>
       */
      CurrencyEtf_StrategyAddReq(214, 253),
      /**
       * <code>CurrencyEtf_StrategyAddResp = 254;</code>
       */
      CurrencyEtf_StrategyAddResp(215, 254),
      /**
       * <code>CurrencyEtf_StrategyAddPub = 255;</code>
       */
      CurrencyEtf_StrategyAddPub(216, 255),
      /**
       * <code>CurrencyEtf_StrategyModifyReq = 257;</code>
       *
       * <pre>
       * 256 原来是TYPE_MAX使用，暂时保留
       * </pre>
       */
      CurrencyEtf_StrategyModifyReq(217, 257),
      /**
       * <code>CurrencyEtf_StrategyModifyResp = 258;</code>
       */
      CurrencyEtf_StrategyModifyResp(218, 258),
      /**
       * <code>CurrencyEtf_StrategyModifyPub = 259;</code>
       */
      CurrencyEtf_StrategyModifyPub(219, 259),
      /**
       * <code>CurrencyEtf_StrategyOperateReq = 260;</code>
       */
      CurrencyEtf_StrategyOperateReq(220, 260),
      /**
       * <code>CurrencyEtf_StrategyOperateResp = 261;</code>
       */
      CurrencyEtf_StrategyOperateResp(221, 261),
      /**
       * <code>CurrencyEtf_QueryStrategyListReq = 262;</code>
       */
      CurrencyEtf_QueryStrategyListReq(222, 262),
      /**
       * <code>CurrencyEtf_QueryStrategyListResp = 263;</code>
       */
      CurrencyEtf_QueryStrategyListResp(223, 263),
      /**
       * <code>CurrencyEtf_QueryOpenPositionListReq = 264;</code>
       */
      CurrencyEtf_QueryOpenPositionListReq(224, 264),
      /**
       * <code>CurrencyEtf_QueryOpenPositionListResp = 265;</code>
       */
      CurrencyEtf_QueryOpenPositionListResp(225, 265),
      /**
       * <code>CurrencyEtf_StrategyStatusChangedPub = 266;</code>
       */
      CurrencyEtf_StrategyStatusChangedPub(226, 266),
      /**
       * <code>CurrencyEtf_StrategyPositionChangedPub = 267;</code>
       */
      CurrencyEtf_StrategyPositionChangedPub(227, 267),
      /**
       * <code>QUERYACCTINFO_REQ = 268;</code>
       */
      QUERYACCTINFO_REQ(228, 268),
      /**
       * <code>QUERYACCTINFO_RSP = 269;</code>
       */
      QUERYACCTINFO_RSP(229, 269),
      /**
       * <code>OPT_QUERYCOMSTRADETAILITEM_REQ = 270;</code>
       */
      OPT_QUERYCOMSTRADETAILITEM_REQ(230, 270),
      /**
       * <code>OPT_QUERYCOMSTRADETAILITEM_RSP = 271;</code>
       */
      OPT_QUERYCOMSTRADETAILITEM_RSP(231, 271),
      /**
       * <code>INSERTCOMBSTRAORDER_REQ = 272;</code>
       */
      INSERTCOMBSTRAORDER_REQ(232, 272),
      /**
       * <code>INSERTCOMBSTRAORDER_RSP = 273;</code>
       */
      INSERTCOMBSTRAORDER_RSP(233, 273),
      /**
       * <code>OPT_BS_NORMS_PUB = 274;</code>
       */
      OPT_BS_NORMS_PUB(234, 274),
      /**
       * <code>OPT_BS_DELTA_PORTFOLIO_PUB = 275;</code>
       */
      OPT_BS_DELTA_PORTFOLIO_PUB(235, 275),
      /**
       * <code>OPT_BS_DELTA_HEDGE_PUB = 276;</code>
       */
      OPT_BS_DELTA_HEDGE_PUB(236, 276),
      /**
       * <code>OPT_UNDL_MARKET_PUB = 277;</code>
       */
      OPT_UNDL_MARKET_PUB(237, 277),
      /**
       * <code>ACCOUNT_NETVALUE_REQ = 278;</code>
       */
      ACCOUNT_NETVALUE_REQ(238, 278),
      /**
       * <code>ACCOUNT_NETVALUE_RSP = 279;</code>
       */
      ACCOUNT_NETVALUE_RSP(239, 279),
      /**
       * <code>STRATEGY_QUERYSTRATEGYLIST_REQ = 280;</code>
       *
       * <pre>
       * strategy related
       * </pre>
       */
      STRATEGY_QUERYSTRATEGYLIST_REQ(240, 280),
      /**
       * <code>STRATEGY_QUERYSTRATEGYLIST_REP = 281;</code>
       */
      STRATEGY_QUERYSTRATEGYLIST_REP(241, 281),
      /**
       * <code>STRATEGY_PUB_STRATEGY = 284;</code>
       */
      STRATEGY_PUB_STRATEGY(242, 284),
      /**
       * <code>STRATEGY_PUB_POSITION = 285;</code>
       *
       * <pre>
       * discard temporary
       * </pre>
       */
      STRATEGY_PUB_POSITION(243, 285),
      /**
       * <code>STRATEGY_ADDSTRATEGY_REQ = 288;</code>
       */
      STRATEGY_ADDSTRATEGY_REQ(244, 288),
      /**
       * <code>STRATEGY_ADDSTRATEGY_REP = 289;</code>
       */
      STRATEGY_ADDSTRATEGY_REP(245, 289),
      /**
       * <code>STRATEGY_DELSTRATEGY_REQ = 290;</code>
       */
      STRATEGY_DELSTRATEGY_REQ(246, 290),
      /**
       * <code>STRATEGY_DELSTRATEGY_REP = 291;</code>
       */
      STRATEGY_DELSTRATEGY_REP(247, 291),
      /**
       * <code>STRATEGY_MODIFYSTRATEGY_REQ = 292;</code>
       */
      STRATEGY_MODIFYSTRATEGY_REQ(248, 292),
      /**
       * <code>STRATEGY_MODIFYSTRATEGY_REP = 293;</code>
       */
      STRATEGY_MODIFYSTRATEGY_REP(249, 293),
      /**
       * <code>STRATEGY_CONTROLSTRATEGY_REQ = 294;</code>
       */
      STRATEGY_CONTROLSTRATEGY_REQ(250, 294),
      /**
       * <code>STRATEGY_CONTROLSTRATEGY_REP = 295;</code>
       */
      STRATEGY_CONTROLSTRATEGY_REP(251, 295),
      /**
       * <code>STRATEGY_PUB_TRADE = 296;</code>
       */
      STRATEGY_PUB_TRADE(252, 296),
      /**
       * <code>STRATEGY_RESERVED = 305;</code>
       *
       * <pre>
       * strategy reserved from 296 to 305, add from 306
       * </pre>
       */
      STRATEGY_RESERVED(253, 305),
      /**
       * <code>SET_OPT_STARTEGY_STATE_REQ = 306;</code>
       */
      SET_OPT_STARTEGY_STATE_REQ(254, 306),
      /**
       * <code>SET_OPT_STARTEGY_STATE_RSP = 307;</code>
       */
      SET_OPT_STARTEGY_STATE_RSP(255, 307),
      /**
       * <code>OPT_STARTEGY_STATE_PUB = 308;</code>
       */
      OPT_STARTEGY_STATE_PUB(256, 308),
      /**
       * <code>LFSIGNAL_ALPHABETA_PUB = 310;</code>
       */
      LFSIGNAL_ALPHABETA_PUB(257, 310),
      /**
       * <code>OPT_BS_JOB_STATE_PUB = 311;</code>
       */
      OPT_BS_JOB_STATE_PUB(258, 311),
      /**
       * <code>OPT_STRATEGYS_REQ = 312;</code>
       *
       * <pre>
       *期权策略参数请求
       * </pre>
       */
      OPT_STRATEGYS_REQ(259, 312),
      /**
       * <code>OPT_COMBO_STRATEGYS_RSP = 313;</code>
       *
       * <pre>
       *期权策略参数请求--应答
       * </pre>
       */
      OPT_COMBO_STRATEGYS_RSP(260, 313),
      /**
       * <code>OPT_HEDGE_STRATEGYS_RSP = 314;</code>
       *
       * <pre>
       *期权策略参数请求--应答
       * </pre>
       */
      OPT_HEDGE_STRATEGYS_RSP(261, 314),
      /**
       * <code>OPT_STRATEGY_DEL_REQ = 315;</code>
       */
      OPT_STRATEGY_DEL_REQ(262, 315),
      /**
       * <code>OPT_STRATEGY_DEL_RSP = 316;</code>
       */
      OPT_STRATEGY_DEL_RSP(263, 316),
      /**
       * <code>OPT_COMBO_STRATEGYS_SET_RSP = 317;</code>
       */
      OPT_COMBO_STRATEGYS_SET_RSP(264, 317),
      /**
       * <code>OPT_HEDGE_STRATEGYS_SET_RSP = 318;</code>
       */
      OPT_HEDGE_STRATEGYS_SET_RSP(265, 318),
      /**
       * <code>OPT_COMBO_STRATEGYS_SET_REQ = 319;</code>
       */
      OPT_COMBO_STRATEGYS_SET_REQ(266, 319),
      /**
       * <code>OPT_HEDGE_STRATEGYS_SET_REQ = 320;</code>
       */
      OPT_HEDGE_STRATEGYS_SET_REQ(267, 320),
      /**
       * <code>ORDER = 321;</code>
       */
      ORDER(268, 321),
      /**
       * <code>ORDERQUEUE = 322;</code>
       */
      ORDERQUEUE(269, 322),
      /**
       * <code>CLIENT_QUERY_ORDER_BALANCE_PARAM_REQ = 323;</code>
       */
      CLIENT_QUERY_ORDER_BALANCE_PARAM_REQ(270, 323),
      /**
       * <code>CLIENT_QUERY_ORDER_BALANCE_PARAM_RSP = 324;</code>
       */
      CLIENT_QUERY_ORDER_BALANCE_PARAM_RSP(271, 324),
      /**
       * <code>TRANSFERINANDOUT_REQ = 325;</code>
       *
       * <pre>
       * 资金调入调出
       * </pre>
       */
      TRANSFERINANDOUT_REQ(272, 325),
      /**
       * <code>TRANSFERINANDOUT_RSP = 326;</code>
       */
      TRANSFERINANDOUT_RSP(273, 326),
      /**
       * <code>QUERY_T0STOCK_REQ = 327;</code>
       *
       * <pre>
       * req t0 stock
       * </pre>
       */
      QUERY_T0STOCK_REQ(274, 327),
      /**
       * <code>QUERY_T0STOCK_RSP = 328;</code>
       *
       * <pre>
       * rsq
       * </pre>
       */
      QUERY_T0STOCK_RSP(275, 328),
      /**
       * <code>SAVE_T0STOCK_REQ = 329;</code>
       *
       * <pre>
       *保存分券信息
       * </pre>
       */
      SAVE_T0STOCK_REQ(276, 329),
      /**
       * <code>SAVE_T0STOCK_RSP = 330;</code>
       *
       * <pre>
       *保存分券信息响应
       * </pre>
       */
      SAVE_T0STOCK_RSP(277, 330),
      /**
       * <code>PUB_T0STOCK_CHANGE = 331;</code>
       *
       * <pre>
       *发布单条持仓变更
       * </pre>
       */
      PUB_T0STOCK_CHANGE(278, 331),
      /**
       * <code>ACCOUNT_IMPORINFO = 332;</code>
       *
       * <pre>
       *前台界面导入估值数据时，在服务端留痕，且写入postgresql
       * </pre>
       */
      ACCOUNT_IMPORINFO(279, 332),
      /**
       * <code>ACCOUNT_IMPORINFORSP = 333;</code>
       *
       * <pre>
       *估值数据导入响应
       * </pre>
       */
      ACCOUNT_IMPORINFORSP(280, 333),
      ;

      /**
       * <code>MSG_UNKNOWN = -1;</code>
       */
      public static final int MSG_UNKNOWN_VALUE = -1;
      /**
       * <code>INSERTORDER = 0;</code>
       */
      public static final int INSERTORDER_VALUE = 0;
      /**
       * <code>INSERTORDERREP = 1;</code>
       */
      public static final int INSERTORDERREP_VALUE = 1;
      /**
       * <code>CANCELORDER = 2;</code>
       */
      public static final int CANCELORDER_VALUE = 2;
      /**
       * <code>CANCELORDERREP = 3;</code>
       */
      public static final int CANCELORDERREP_VALUE = 3;
      /**
       * <code>QUERYORDER = 4;</code>
       */
      public static final int QUERYORDER_VALUE = 4;
      /**
       * <code>QUERYORDERREP = 5;</code>
       */
      public static final int QUERYORDERREP_VALUE = 5;
      /**
       * <code>QUERYPOSITION = 6;</code>
       */
      public static final int QUERYPOSITION_VALUE = 6;
      /**
       * <code>QUERYPOSITIONREP = 7;</code>
       */
      public static final int QUERYPOSITIONREP_VALUE = 7;
      /**
       * <code>QUERYACCOUNT = 8;</code>
       */
      public static final int QUERYACCOUNT_VALUE = 8;
      /**
       * <code>QUERYACCOUNTREP = 9;</code>
       */
      public static final int QUERYACCOUNTREP_VALUE = 9;
      /**
       * <code>QUERYTRADE = 10;</code>
       */
      public static final int QUERYTRADE_VALUE = 10;
      /**
       * <code>QUERYTRADEREP = 11;</code>
       */
      public static final int QUERYTRADEREP_VALUE = 11;
      /**
       * <code>ERRORTYPE = 12;</code>
       */
      public static final int ERRORTYPE_VALUE = 12;
      /**
       * <code>INSERTJOB = 13;</code>
       *
       * <pre>
       *new trading job form the trader side.
       * </pre>
       */
      public static final int INSERTJOB_VALUE = 13;
      /**
       * <code>INSERTJOBREP = 14;</code>
       */
      public static final int INSERTJOBREP_VALUE = 14;
      /**
       * <code>JOBRISKCHECK = 15;</code>
       */
      public static final int JOBRISKCHECK_VALUE = 15;
      /**
       * <code>JOBRISKCHECKREP = 16;</code>
       */
      public static final int JOBRISKCHECKREP_VALUE = 16;
      /**
       * <code>PAUSEJOB = 17;</code>
       */
      public static final int PAUSEJOB_VALUE = 17;
      /**
       * <code>PAUSEJOBREP = 18;</code>
       */
      public static final int PAUSEJOBREP_VALUE = 18;
      /**
       * <code>RESTARTJOB = 19;</code>
       */
      public static final int RESTARTJOB_VALUE = 19;
      /**
       * <code>RESTARTJOBREP = 20;</code>
       */
      public static final int RESTARTJOBREP_VALUE = 20;
      /**
       * <code>STOPJOB = 21;</code>
       */
      public static final int STOPJOB_VALUE = 21;
      /**
       * <code>STOPJOBREP = 22;</code>
       */
      public static final int STOPJOBREP_VALUE = 22;
      /**
       * <code>RISKCHECK = 23;</code>
       */
      public static final int RISKCHECK_VALUE = 23;
      /**
       * <code>RISKCHECKREP = 24;</code>
       */
      public static final int RISKCHECKREP_VALUE = 24;
      /**
       * <code>SECURITYCODETABLE = 25;</code>
       */
      public static final int SECURITYCODETABLE_VALUE = 25;
      /**
       * <code>SNAPSHOT = 26;</code>
       */
      public static final int SNAPSHOT_VALUE = 26;
      /**
       * <code>TRANSACTION = 27;</code>
       */
      public static final int TRANSACTION_VALUE = 27;
      /**
       * <code>QUERYCODETABLE = 28;</code>
       */
      public static final int QUERYCODETABLE_VALUE = 28;
      /**
       * <code>QUERYSNAPSHOTALL = 29;</code>
       */
      public static final int QUERYSNAPSHOTALL_VALUE = 29;
      /**
       * <code>JOBCOMMAND = 30;</code>
       *
       * <pre>
       *job pause, replay or end
       * </pre>
       */
      public static final int JOBCOMMAND_VALUE = 30;
      /**
       * <code>LOGIN = 31;</code>
       */
      public static final int LOGIN_VALUE = 31;
      /**
       * <code>LOGINREP = 32;</code>
       */
      public static final int LOGINREP_VALUE = 32;
      /**
       * <code>USERAUTH = 33;</code>
       */
      public static final int USERAUTH_VALUE = 33;
      /**
       * <code>USERAUTHREP = 34;</code>
       */
      public static final int USERAUTHREP_VALUE = 34;
      /**
       * <code>BASICDATA = 35;</code>
       */
      public static final int BASICDATA_VALUE = 35;
      /**
       * <code>PUB_JOBUPDATE = 36;</code>
       */
      public static final int PUB_JOBUPDATE_VALUE = 36;
      /**
       * <code>PUB_ORDERUPDATE = 37;</code>
       */
      public static final int PUB_ORDERUPDATE_VALUE = 37;
      /**
       * <code>ALGO_QUERYJOBALL = 38;</code>
       */
      public static final int ALGO_QUERYJOBALL_VALUE = 38;
      /**
       * <code>ALGO_QUERYJOBS = 39;</code>
       */
      public static final int ALGO_QUERYJOBS_VALUE = 39;
      /**
       * <code>ALGO_QUERYJOB4ACCOUNT = 40;</code>
       *
       * <pre>
       *all jobs for certain account
       * </pre>
       */
      public static final int ALGO_QUERYJOB4ACCOUNT_VALUE = 40;
      /**
       * <code>ALGO_QUERYJOBALLREP = 41;</code>
       */
      public static final int ALGO_QUERYJOBALLREP_VALUE = 41;
      /**
       * <code>ALGO_QUERYORDERALL = 42;</code>
       */
      public static final int ALGO_QUERYORDERALL_VALUE = 42;
      /**
       * <code>ALGO_QUERYORDERS = 43;</code>
       */
      public static final int ALGO_QUERYORDERS_VALUE = 43;
      /**
       * <code>ALGO_QUERYORDER4ACCOUNT = 44;</code>
       *
       * <pre>
       *all orders for certain account
       * </pre>
       */
      public static final int ALGO_QUERYORDER4ACCOUNT_VALUE = 44;
      /**
       * <code>ALGO_QUERYORDER4JOB = 45;</code>
       *
       * <pre>
       *all orders for certain job
       * </pre>
       */
      public static final int ALGO_QUERYORDER4JOB_VALUE = 45;
      /**
       * <code>ALGO_QUERYORDERALLREP = 46;</code>
       */
      public static final int ALGO_QUERYORDERALLREP_VALUE = 46;
      /**
       * <code>BASICDATA_STOCKALPHABETA = 47;</code>
       */
      public static final int BASICDATA_STOCKALPHABETA_VALUE = 47;
      /**
       * <code>BASICDATA_INDEXSTATUS = 48;</code>
       */
      public static final int BASICDATA_INDEXSTATUS_VALUE = 48;
      /**
       * <code>BASICDATA_SECURITYCODETABLE = 49;</code>
       */
      public static final int BASICDATA_SECURITYCODETABLE_VALUE = 49;
      /**
       * <code>BASICDATA_SECTORCODETABLE = 50;</code>
       */
      public static final int BASICDATA_SECTORCODETABLE_VALUE = 50;
      /**
       * <code>BASICDATA_FUTUREFORECAST = 51;</code>
       */
      public static final int BASICDATA_FUTUREFORECAST_VALUE = 51;
      /**
       * <code>BASICDATA_INDEXFORECAST = 52;</code>
       */
      public static final int BASICDATA_INDEXFORECAST_VALUE = 52;
      /**
       * <code>BASICDATA_STOCKBASEINFO = 53;</code>
       */
      public static final int BASICDATA_STOCKBASEINFO_VALUE = 53;
      /**
       * <code>BASICDATA_INDEXCONSTITUENTS = 54;</code>
       */
      public static final int BASICDATA_INDEXCONSTITUENTS_VALUE = 54;
      /**
       * <code>BASICDATA_INDUSCONSTITUENTS = 55;</code>
       */
      public static final int BASICDATA_INDUSCONSTITUENTS_VALUE = 55;
      /**
       * <code>BASICDATA_FUNDINDEXMAP = 56;</code>
       */
      public static final int BASICDATA_FUNDINDEXMAP_VALUE = 56;
      /**
       * <code>BASICDATA_INDEXPRICEFORECAST = 57;</code>
       */
      public static final int BASICDATA_INDEXPRICEFORECAST_VALUE = 57;
      /**
       * <code>BASICDATA_STOCKPRICEFORECAST = 58;</code>
       */
      public static final int BASICDATA_STOCKPRICEFORECAST_VALUE = 58;
      /**
       * <code>BASICDATA_STOCKRISKVALUE = 59;</code>
       */
      public static final int BASICDATA_STOCKRISKVALUE_VALUE = 59;
      /**
       * <code>BASICDATA_SECTORWEIGHT = 60;</code>
       */
      public static final int BASICDATA_SECTORWEIGHT_VALUE = 60;
      /**
       * <code>BASICDATA_FUNDALPHABETA = 61;</code>
       */
      public static final int BASICDATA_FUNDALPHABETA_VALUE = 61;
      /**
       * <code>ALGO_QUERYJOB4ACCOUNTREP = 62;</code>
       */
      public static final int ALGO_QUERYJOB4ACCOUNTREP_VALUE = 62;
      /**
       * <code>ALGO_QUERYORDERSREP = 63;</code>
       */
      public static final int ALGO_QUERYORDERSREP_VALUE = 63;
      /**
       * <code>ALGO_QUERYORDER4ACCOUNTREP = 64;</code>
       */
      public static final int ALGO_QUERYORDER4ACCOUNTREP_VALUE = 64;
      /**
       * <code>ALGO_QUERYORDER4JOBREP = 65;</code>
       */
      public static final int ALGO_QUERYORDER4JOBREP_VALUE = 65;
      /**
       * <code>USERHEARTBT = 66;</code>
       */
      public static final int USERHEARTBT_VALUE = 66;
      /**
       * <code>PUBACCOUNTINFO = 70;</code>
       */
      public static final int PUBACCOUNTINFO_VALUE = 70;
      /**
       * <code>PUBPOSITIONS = 73;</code>
       */
      public static final int PUBPOSITIONS_VALUE = 73;
      /**
       * <code>QUERYPOSITIONSUMMARY = 74;</code>
       */
      public static final int QUERYPOSITIONSUMMARY_VALUE = 74;
      /**
       * <code>QUERYPOSITIONSUMMARYREP = 75;</code>
       */
      public static final int QUERYPOSITIONSUMMARYREP_VALUE = 75;
      /**
       * <code>PUBPOSITIONSUMMARY = 76;</code>
       */
      public static final int PUBPOSITIONSUMMARY_VALUE = 76;
      /**
       * <code>PUBTRADES = 79;</code>
       */
      public static final int PUBTRADES_VALUE = 79;
      /**
       * <code>PUBORDERS = 82;</code>
       */
      public static final int PUBORDERS_VALUE = 82;
      /**
       * <code>QUERYTDPROFIT = 83;</code>
       */
      public static final int QUERYTDPROFIT_VALUE = 83;
      /**
       * <code>QUERYTDPROFITREP = 84;</code>
       */
      public static final int QUERYTDPROFITREP_VALUE = 84;
      /**
       * <code>PUBTDPROFIT = 85;</code>
       */
      public static final int PUBTDPROFIT_VALUE = 85;
      /**
       * <code>ALGO_QUERYJOBSREP = 86;</code>
       */
      public static final int ALGO_QUERYJOBSREP_VALUE = 86;
      /**
       * <code>JOBCOMMANDREP = 87;</code>
       */
      public static final int JOBCOMMANDREP_VALUE = 87;
      /**
       * <code>CONFIG_QUERYPRODLIST = 88;</code>
       */
      public static final int CONFIG_QUERYPRODLIST_VALUE = 88;
      /**
       * <code>CONFIG_QUERYPRODLISTREP = 89;</code>
       */
      public static final int CONFIG_QUERYPRODLISTREP_VALUE = 89;
      /**
       * <code>CONFIG_QUERYACCOUNT4PROD = 90;</code>
       */
      public static final int CONFIG_QUERYACCOUNT4PROD_VALUE = 90;
      /**
       * <code>CONFIG_QUERYACCOUNT4PRODREP = 91;</code>
       */
      public static final int CONFIG_QUERYACCOUNT4PRODREP_VALUE = 91;
      /**
       * <code>BASICDATA_MARKETSTYLE = 92;</code>
       */
      public static final int BASICDATA_MARKETSTYLE_VALUE = 92;
      /**
       * <code>SNAPSHOTS = 93;</code>
       */
      public static final int SNAPSHOTS_VALUE = 93;
      /**
       * <code>TRANSACTIONS = 94;</code>
       */
      public static final int TRANSACTIONS_VALUE = 94;
      /**
       * <code>RISK_TESTMSG = 95;</code>
       */
      public static final int RISK_TESTMSG_VALUE = 95;
      /**
       * <code>RISK_OVERNIGHT = 96;</code>
       */
      public static final int RISK_OVERNIGHT_VALUE = 96;
      /**
       * <code>QUERYSNAPSHOTS = 97;</code>
       */
      public static final int QUERYSNAPSHOTS_VALUE = 97;
      /**
       * <code>QUERYSNAPSHOTREP = 98;</code>
       */
      public static final int QUERYSNAPSHOTREP_VALUE = 98;
      /**
       * <code>HEDGE_STATEUPDATE = 99;</code>
       */
      public static final int HEDGE_STATEUPDATE_VALUE = 99;
      /**
       * <code>DERIVEDDATA_LFSIGNAL_REQ = 100;</code>
       */
      public static final int DERIVEDDATA_LFSIGNAL_REQ_VALUE = 100;
      /**
       * <code>DERIVEDDATA_LFSIGNAL_REP = 101;</code>
       */
      public static final int DERIVEDDATA_LFSIGNAL_REP_VALUE = 101;
      /**
       * <code>HEDGE_SETPARAM = 131;</code>
       */
      public static final int HEDGE_SETPARAM_VALUE = 131;
      /**
       * <code>HEDGE_SETPARAMREP = 132;</code>
       */
      public static final int HEDGE_SETPARAMREP_VALUE = 132;
      /**
       * <code>HEDGE_SETPARAMEXTENDREP = 133;</code>
       */
      public static final int HEDGE_SETPARAMEXTENDREP_VALUE = 133;
      /**
       * <code>HEDGE_GETPARAM = 134;</code>
       */
      public static final int HEDGE_GETPARAM_VALUE = 134;
      /**
       * <code>HEDGE_GETPARAMREP = 135;</code>
       */
      public static final int HEDGE_GETPARAMREP_VALUE = 135;
      /**
       * <code>HEDGE_GETREFSIGNAL = 136;</code>
       */
      public static final int HEDGE_GETREFSIGNAL_VALUE = 136;
      /**
       * <code>HEDGE_GETREFSIGNALREP = 137;</code>
       */
      public static final int HEDGE_GETREFSIGNALREP_VALUE = 137;
      /**
       * <code>HEDGE_CONTRACTCODE = 138;</code>
       */
      public static final int HEDGE_CONTRACTCODE_VALUE = 138;
      /**
       * <code>HEDGE_CONTRACTCODEREP = 139;</code>
       */
      public static final int HEDGE_CONTRACTCODEREP_VALUE = 139;
      /**
       * <code>HEDGE_GETSFACCOUNT = 140;</code>
       */
      public static final int HEDGE_GETSFACCOUNT_VALUE = 140;
      /**
       * <code>HEDGE_GETSFACCOUNTREP = 141;</code>
       */
      public static final int HEDGE_GETSFACCOUNTREP_VALUE = 141;
      /**
       * <code>QUERY_SNAPLITESALL = 142;</code>
       */
      public static final int QUERY_SNAPLITESALL_VALUE = 142;
      /**
       * <code>QUERY_SNAPLITES = 143;</code>
       */
      public static final int QUERY_SNAPLITES_VALUE = 143;
      /**
       * <code>QUERY_SNAPLITESREP = 144;</code>
       */
      public static final int QUERY_SNAPLITESREP_VALUE = 144;
      /**
       * <code>PUB_SNAPLITEUPDATE = 145;</code>
       */
      public static final int PUB_SNAPLITEUPDATE_VALUE = 145;
      /**
       * <code>RISK_SETTING = 146;</code>
       */
      public static final int RISK_SETTING_VALUE = 146;
      /**
       * <code>RISK_SETTINGREP = 147;</code>
       */
      public static final int RISK_SETTINGREP_VALUE = 147;
      /**
       * <code>RISK_RISKSETTINGUPDATE = 148;</code>
       */
      public static final int RISK_RISKSETTINGUPDATE_VALUE = 148;
      /**
       * <code>RISK_RISKSETTINGUPDATEREP = 149;</code>
       */
      public static final int RISK_RISKSETTINGUPDATEREP_VALUE = 149;
      /**
       * <code>RISK_GETPOSITIONBETA = 150;</code>
       */
      public static final int RISK_GETPOSITIONBETA_VALUE = 150;
      /**
       * <code>RISK_GETPOSITIONBETAREP = 151;</code>
       */
      public static final int RISK_GETPOSITIONBETAREP_VALUE = 151;
      /**
       * <code>RISK_GETRISKREASON = 152;</code>
       */
      public static final int RISK_GETRISKREASON_VALUE = 152;
      /**
       * <code>RISK_GETRISKREASONREP = 153;</code>
       */
      public static final int RISK_GETRISKREASONREP_VALUE = 153;
      /**
       * <code>RISK_GETRISKSETTING = 154;</code>
       */
      public static final int RISK_GETRISKSETTING_VALUE = 154;
      /**
       * <code>RISK_GETRISKSETTINGREP = 155;</code>
       */
      public static final int RISK_GETRISKSETTINGREP_VALUE = 155;
      /**
       * <code>RISK_GETALLRISKSETTING = 156;</code>
       */
      public static final int RISK_GETALLRISKSETTING_VALUE = 156;
      /**
       * <code>RISK_GETALLRISKSETTINGREP = 157;</code>
       */
      public static final int RISK_GETALLRISKSETTINGREP_VALUE = 157;
      /**
       * <code>PUB_JOBSUMMARY = 158;</code>
       */
      public static final int PUB_JOBSUMMARY_VALUE = 158;
      /**
       * <code>DERIVEDDATA_ENTRUSTDEPTH_REP = 159;</code>
       */
      public static final int DERIVEDDATA_ENTRUSTDEPTH_REP_VALUE = 159;
      /**
       * <code>DERIVEDDATA_ENTRUSTDEPTH_REQ = 160;</code>
       */
      public static final int DERIVEDDATA_ENTRUSTDEPTH_REQ_VALUE = 160;
      /**
       * <code>QUERY_THRESHOLD = 161;</code>
       */
      public static final int QUERY_THRESHOLD_VALUE = 161;
      /**
       * <code>QUERY_THRESHOLDREP = 162;</code>
       */
      public static final int QUERY_THRESHOLDREP_VALUE = 162;
      /**
       * <code>QUOTE_HEARTBEAT = 163;</code>
       */
      public static final int QUOTE_HEARTBEAT_VALUE = 163;
      /**
       * <code>HFTRADING_LOGIN = 164;</code>
       */
      public static final int HFTRADING_LOGIN_VALUE = 164;
      /**
       * <code>HFTRADING_LOGINREP = 165;</code>
       */
      public static final int HFTRADING_LOGINREP_VALUE = 165;
      /**
       * <code>HFTRADING_ACCOUNTLOGIN = 166;</code>
       */
      public static final int HFTRADING_ACCOUNTLOGIN_VALUE = 166;
      /**
       * <code>HFTRADING_ADDUPDATESTRATEGY = 167;</code>
       */
      public static final int HFTRADING_ADDUPDATESTRATEGY_VALUE = 167;
      /**
       * <code>HFTRADING_ADDUPDATESTRATEGYREP = 168;</code>
       */
      public static final int HFTRADING_ADDUPDATESTRATEGYREP_VALUE = 168;
      /**
       * <code>HFTRADING_STRATEGYSREQ = 171;</code>
       */
      public static final int HFTRADING_STRATEGYSREQ_VALUE = 171;
      /**
       * <code>HFTRADING_STRATEGYSREP = 172;</code>
       */
      public static final int HFTRADING_STRATEGYSREP_VALUE = 172;
      /**
       * <code>HFTRADING_DELETESTRATEGY = 173;</code>
       */
      public static final int HFTRADING_DELETESTRATEGY_VALUE = 173;
      /**
       * <code>HFTRADING_DELETESTRATEGYREP = 174;</code>
       */
      public static final int HFTRADING_DELETESTRATEGYREP_VALUE = 174;
      /**
       * <code>HFTRADING_STARTSTRATEGY = 175;</code>
       */
      public static final int HFTRADING_STARTSTRATEGY_VALUE = 175;
      /**
       * <code>HFTRADING_ACTIONSTRATEGYREP = 176;</code>
       */
      public static final int HFTRADING_ACTIONSTRATEGYREP_VALUE = 176;
      /**
       * <code>HFTRADING_SUSPENDSTRATEGY = 177;</code>
       */
      public static final int HFTRADING_SUSPENDSTRATEGY_VALUE = 177;
      /**
       * <code>HFTRADING_STOPSTRATEGY = 178;</code>
       */
      public static final int HFTRADING_STOPSTRATEGY_VALUE = 178;
      /**
       * <code>HFTRADING_CONTRACTSREQ = 179;</code>
       */
      public static final int HFTRADING_CONTRACTSREQ_VALUE = 179;
      /**
       * <code>HFTRADING_CONTRACTSREP = 180;</code>
       */
      public static final int HFTRADING_CONTRACTSREP_VALUE = 180;
      /**
       * <code>HFTRADING_STRATEGYVIEWPUB = 181;</code>
       */
      public static final int HFTRADING_STRATEGYVIEWPUB_VALUE = 181;
      /**
       * <code>BASICDATA_FUNDBASEINFO = 182;</code>
       */
      public static final int BASICDATA_FUNDBASEINFO_VALUE = 182;
      /**
       * <code>BASICDATA_CLIENTSECTORWEIGHT = 183;</code>
       */
      public static final int BASICDATA_CLIENTSECTORWEIGHT_VALUE = 183;
      /**
       * <code>BASICDATA_BASICUPDATETIME = 184;</code>
       */
      public static final int BASICDATA_BASICUPDATETIME_VALUE = 184;
      /**
       * <code>CONFIG_QUERYFEES4ACCOUNT = 185;</code>
       */
      public static final int CONFIG_QUERYFEES4ACCOUNT_VALUE = 185;
      /**
       * <code>CONFIG_QUERYFEES4ACCOUNTREP = 186;</code>
       */
      public static final int CONFIG_QUERYFEES4ACCOUNTREP_VALUE = 186;
      /**
       * <code>DERIVEDDATA_MFANDPERCENT_REQ = 187;</code>
       */
      public static final int DERIVEDDATA_MFANDPERCENT_REQ_VALUE = 187;
      /**
       * <code>DERIVEDDATA_MFANDPERCENT_REP = 188;</code>
       */
      public static final int DERIVEDDATA_MFANDPERCENT_REP_VALUE = 188;
      /**
       * <code>DERIVEDDATA_RANGEPROJECTION_REQ = 189;</code>
       */
      public static final int DERIVEDDATA_RANGEPROJECTION_REQ_VALUE = 189;
      /**
       * <code>DERIVEDDATA_RANGEPROJECTION_REP = 190;</code>
       */
      public static final int DERIVEDDATA_RANGEPROJECTION_REP_VALUE = 190;
      /**
       * <code>HFTRADING_STRATEGYVIEWSREQ = 191;</code>
       */
      public static final int HFTRADING_STRATEGYVIEWSREQ_VALUE = 191;
      /**
       * <code>HFTRADING_STRATEGYVIEWSREP = 192;</code>
       */
      public static final int HFTRADING_STRATEGYVIEWSREP_VALUE = 192;
      /**
       * <code>HFTRADING_HFQUERYTRADEREQ = 193;</code>
       */
      public static final int HFTRADING_HFQUERYTRADEREQ_VALUE = 193;
      /**
       * <code>HFTRADING_HFQUERYTRADEREP = 194;</code>
       */
      public static final int HFTRADING_HFQUERYTRADEREP_VALUE = 194;
      /**
       * <code>HFTRADING_SPREADDATAPUB = 195;</code>
       */
      public static final int HFTRADING_SPREADDATAPUB_VALUE = 195;
      /**
       * <code>HFTRADING_PROFITDATAPUB = 196;</code>
       */
      public static final int HFTRADING_PROFITDATAPUB_VALUE = 196;
      /**
       * <code>HFTRADING_QUERYPROFITDATAREQ = 197;</code>
       */
      public static final int HFTRADING_QUERYPROFITDATAREQ_VALUE = 197;
      /**
       * <code>HFTRADING_QUERYPROFITDATAREP = 198;</code>
       */
      public static final int HFTRADING_QUERYPROFITDATAREP_VALUE = 198;
      /**
       * <code>HFTRADING_QUERYINSTRUMENTREQ = 199;</code>
       */
      public static final int HFTRADING_QUERYINSTRUMENTREQ_VALUE = 199;
      /**
       * <code>HFTRADING_QUERYINSTRUMENTRSP = 200;</code>
       */
      public static final int HFTRADING_QUERYINSTRUMENTRSP_VALUE = 200;
      /**
       * <code>REDIS_COMMANDREQ = 201;</code>
       */
      public static final int REDIS_COMMANDREQ_VALUE = 201;
      /**
       * <code>REDIS_COMMANDREP = 202;</code>
       */
      public static final int REDIS_COMMANDREP_VALUE = 202;
      /**
       * <code>RISK_SAVE_COMPANYRISKSETTING_REQ = 203;</code>
       */
      public static final int RISK_SAVE_COMPANYRISKSETTING_REQ_VALUE = 203;
      /**
       * <code>RISK_SAVE_COMPANYRISKSETTING_REP = 204;</code>
       */
      public static final int RISK_SAVE_COMPANYRISKSETTING_REP_VALUE = 204;
      /**
       * <code>RISK_GET_COMPANYRISKSETTING_REQ = 205;</code>
       */
      public static final int RISK_GET_COMPANYRISKSETTING_REQ_VALUE = 205;
      /**
       * <code>RISK_GET_COMPANYRISKSETTING_REP = 206;</code>
       */
      public static final int RISK_GET_COMPANYRISKSETTING_REP_VALUE = 206;
      /**
       * <code>ModifyPwd = 207;</code>
       */
      public static final int ModifyPwd_VALUE = 207;
      /**
       * <code>ModifyPwdRep = 208;</code>
       */
      public static final int ModifyPwdRep_VALUE = 208;
      /**
       * <code>PUBALLPOSITION = 209;</code>
       */
      public static final int PUBALLPOSITION_VALUE = 209;
      /**
       * <code>QueryQuote = 210;</code>
       */
      public static final int QueryQuote_VALUE = 210;
      /**
       * <code>QueryQuoteRep = 211;</code>
       */
      public static final int QueryQuoteRep_VALUE = 211;
      /**
       * <code>SYSTEMLOGIN = 212;</code>
       */
      public static final int SYSTEMLOGIN_VALUE = 212;
      /**
       * <code>SYSTEMLOGINREP = 213;</code>
       */
      public static final int SYSTEMLOGINREP_VALUE = 213;
      /**
       * <code>SMM_QUERY_REQ = 214;</code>
       */
      public static final int SMM_QUERY_REQ_VALUE = 214;
      /**
       * <code>SMM_QUERY_REP = 215;</code>
       */
      public static final int SMM_QUERY_REP_VALUE = 215;
      /**
       * <code>SMM_MODIFY_REQ = 216;</code>
       */
      public static final int SMM_MODIFY_REQ_VALUE = 216;
      /**
       * <code>SMM_MODIFY_REP = 217;</code>
       */
      public static final int SMM_MODIFY_REP_VALUE = 217;
      /**
       * <code>SMM_PUB = 218;</code>
       */
      public static final int SMM_PUB_VALUE = 218;
      /**
       * <code>SMM_KEYPRICES_REQ = 219;</code>
       */
      public static final int SMM_KEYPRICES_REQ_VALUE = 219;
      /**
       * <code>SMM_KEYPRICES_REP = 220;</code>
       */
      public static final int SMM_KEYPRICES_REP_VALUE = 220;
      /**
       * <code>INDEX = 221;</code>
       */
      public static final int INDEX_VALUE = 221;
      /**
       * <code>DDL1 = 222;</code>
       *
       * <pre>
       *deriveddata level1
       * </pre>
       */
      public static final int DDL1_VALUE = 222;
      /**
       * <code>GATEWAY_SUB = 223;</code>
       *
       * <pre>
       *gateWay 消息订阅
       * </pre>
       */
      public static final int GATEWAY_SUB_VALUE = 223;
      /**
       * <code>GATEWAY_UNSUB = 224;</code>
       *
       * <pre>
       *gateWay 取消消息订阅
       * </pre>
       */
      public static final int GATEWAY_UNSUB_VALUE = 224;
      /**
       * <code>BASICDATA_MARKETSTYLEREQ = 225;</code>
       */
      public static final int BASICDATA_MARKETSTYLEREQ_VALUE = 225;
      /**
       * <code>DDLSector = 226;</code>
       *
       * <pre>
       *deriveddata sector data
       * </pre>
       */
      public static final int DDLSector_VALUE = 226;
      /**
       * <code>PORTFOLIO_EDIT_REQ = 227;</code>
       */
      public static final int PORTFOLIO_EDIT_REQ_VALUE = 227;
      /**
       * <code>PORTFOLIO_EDIT_RSP = 228;</code>
       */
      public static final int PORTFOLIO_EDIT_RSP_VALUE = 228;
      /**
       * <code>PORTFOLIOITEM_EDIT_REQ = 229;</code>
       */
      public static final int PORTFOLIOITEM_EDIT_REQ_VALUE = 229;
      /**
       * <code>PORTFOLIOITEM_EDIT_RSP = 230;</code>
       */
      public static final int PORTFOLIOITEM_EDIT_RSP_VALUE = 230;
      /**
       * <code>ACCOUNT_AVAILABLE_REQ = 231;</code>
       */
      public static final int ACCOUNT_AVAILABLE_REQ_VALUE = 231;
      /**
       * <code>ACCOUNT_AVAILABLE_RSP = 232;</code>
       */
      public static final int ACCOUNT_AVAILABLE_RSP_VALUE = 232;
      /**
       * <code>ACCOUNT_AVAILABLE_PUB = 233;</code>
       */
      public static final int ACCOUNT_AVAILABLE_PUB_VALUE = 233;
      /**
       * <code>USERAUTH_USEROPERATE = 234;</code>
       */
      public static final int USERAUTH_USEROPERATE_VALUE = 234;
      /**
       * <code>USERAUTH_PRODUCTOPERATE = 235;</code>
       */
      public static final int USERAUTH_PRODUCTOPERATE_VALUE = 235;
      /**
       * <code>RISK_RISKREPORTREQ = 236;</code>
       */
      public static final int RISK_RISKREPORTREQ_VALUE = 236;
      /**
       * <code>RISK_RISKREPORTREP = 237;</code>
       */
      public static final int RISK_RISKREPORTREP_VALUE = 237;
      /**
       * <code>DDRT = 238;</code>
       *
       * <pre>
       *deriveddata rt
       * </pre>
       */
      public static final int DDRT_VALUE = 238;
      /**
       * <code>QUERY_SNAPLITESALL_COMPRESS_REQ = 239;</code>
       */
      public static final int QUERY_SNAPLITESALL_COMPRESS_REQ_VALUE = 239;
      /**
       * <code>QUERY_SNAPLITESALL_COMPRESS_RSP = 240;</code>
       */
      public static final int QUERY_SNAPLITESALL_COMPRESS_RSP_VALUE = 240;
      /**
       * <code>ANALYSIS_TCA_REQ = 241;</code>
       */
      public static final int ANALYSIS_TCA_REQ_VALUE = 241;
      /**
       * <code>ANALYSIS_TCA_RSP = 242;</code>
       */
      public static final int ANALYSIS_TCA_RSP_VALUE = 242;
      /**
       * <code>FSLEND_QUERYSECURITYITEM_REQ = 243;</code>
       */
      public static final int FSLEND_QUERYSECURITYITEM_REQ_VALUE = 243;
      /**
       * <code>FSLEND_QUERYSECURITYITEM_RSP = 244;</code>
       */
      public static final int FSLEND_QUERYSECURITYITEM_RSP_VALUE = 244;
      /**
       * <code>FSLEND_QUERYCONTRACT_REQ = 245;</code>
       */
      public static final int FSLEND_QUERYCONTRACT_REQ_VALUE = 245;
      /**
       * <code>FSLEND_QUERYCONTRACT_RSP = 246;</code>
       */
      public static final int FSLEND_QUERYCONTRACT_RSP_VALUE = 246;
      /**
       * <code>QUERYPOSITION_COMPRESS_REQ = 247;</code>
       */
      public static final int QUERYPOSITION_COMPRESS_REQ_VALUE = 247;
      /**
       * <code>QUERYPOSITION_COMPRESS_RSP = 248;</code>
       */
      public static final int QUERYPOSITION_COMPRESS_RSP_VALUE = 248;
      /**
       * <code>QUERYALLACCOUNT_REQ = 249;</code>
       */
      public static final int QUERYALLACCOUNT_REQ_VALUE = 249;
      /**
       * <code>QUERYALLACCOUNT_RSP = 250;</code>
       */
      public static final int QUERYALLACCOUNT_RSP_VALUE = 250;
      /**
       * <code>PUB_FSLEND_CONTRACT = 251;</code>
       */
      public static final int PUB_FSLEND_CONTRACT_VALUE = 251;
      /**
       * <code>LATENCYINDICATORS = 252;</code>
       */
      public static final int LATENCYINDICATORS_VALUE = 252;
      /**
       * <code>CurrencyEtf_StrategyAddReq = 253;</code>
       */
      public static final int CurrencyEtf_StrategyAddReq_VALUE = 253;
      /**
       * <code>CurrencyEtf_StrategyAddResp = 254;</code>
       */
      public static final int CurrencyEtf_StrategyAddResp_VALUE = 254;
      /**
       * <code>CurrencyEtf_StrategyAddPub = 255;</code>
       */
      public static final int CurrencyEtf_StrategyAddPub_VALUE = 255;
      /**
       * <code>CurrencyEtf_StrategyModifyReq = 257;</code>
       *
       * <pre>
       * 256 原来是TYPE_MAX使用，暂时保留
       * </pre>
       */
      public static final int CurrencyEtf_StrategyModifyReq_VALUE = 257;
      /**
       * <code>CurrencyEtf_StrategyModifyResp = 258;</code>
       */
      public static final int CurrencyEtf_StrategyModifyResp_VALUE = 258;
      /**
       * <code>CurrencyEtf_StrategyModifyPub = 259;</code>
       */
      public static final int CurrencyEtf_StrategyModifyPub_VALUE = 259;
      /**
       * <code>CurrencyEtf_StrategyOperateReq = 260;</code>
       */
      public static final int CurrencyEtf_StrategyOperateReq_VALUE = 260;
      /**
       * <code>CurrencyEtf_StrategyOperateResp = 261;</code>
       */
      public static final int CurrencyEtf_StrategyOperateResp_VALUE = 261;
      /**
       * <code>CurrencyEtf_QueryStrategyListReq = 262;</code>
       */
      public static final int CurrencyEtf_QueryStrategyListReq_VALUE = 262;
      /**
       * <code>CurrencyEtf_QueryStrategyListResp = 263;</code>
       */
      public static final int CurrencyEtf_QueryStrategyListResp_VALUE = 263;
      /**
       * <code>CurrencyEtf_QueryOpenPositionListReq = 264;</code>
       */
      public static final int CurrencyEtf_QueryOpenPositionListReq_VALUE = 264;
      /**
       * <code>CurrencyEtf_QueryOpenPositionListResp = 265;</code>
       */
      public static final int CurrencyEtf_QueryOpenPositionListResp_VALUE = 265;
      /**
       * <code>CurrencyEtf_StrategyStatusChangedPub = 266;</code>
       */
      public static final int CurrencyEtf_StrategyStatusChangedPub_VALUE = 266;
      /**
       * <code>CurrencyEtf_StrategyPositionChangedPub = 267;</code>
       */
      public static final int CurrencyEtf_StrategyPositionChangedPub_VALUE = 267;
      /**
       * <code>QUERYACCTINFO_REQ = 268;</code>
       */
      public static final int QUERYACCTINFO_REQ_VALUE = 268;
      /**
       * <code>QUERYACCTINFO_RSP = 269;</code>
       */
      public static final int QUERYACCTINFO_RSP_VALUE = 269;
      /**
       * <code>OPT_QUERYCOMSTRADETAILITEM_REQ = 270;</code>
       */
      public static final int OPT_QUERYCOMSTRADETAILITEM_REQ_VALUE = 270;
      /**
       * <code>OPT_QUERYCOMSTRADETAILITEM_RSP = 271;</code>
       */
      public static final int OPT_QUERYCOMSTRADETAILITEM_RSP_VALUE = 271;
      /**
       * <code>INSERTCOMBSTRAORDER_REQ = 272;</code>
       */
      public static final int INSERTCOMBSTRAORDER_REQ_VALUE = 272;
      /**
       * <code>INSERTCOMBSTRAORDER_RSP = 273;</code>
       */
      public static final int INSERTCOMBSTRAORDER_RSP_VALUE = 273;
      /**
       * <code>OPT_BS_NORMS_PUB = 274;</code>
       */
      public static final int OPT_BS_NORMS_PUB_VALUE = 274;
      /**
       * <code>OPT_BS_DELTA_PORTFOLIO_PUB = 275;</code>
       */
      public static final int OPT_BS_DELTA_PORTFOLIO_PUB_VALUE = 275;
      /**
       * <code>OPT_BS_DELTA_HEDGE_PUB = 276;</code>
       */
      public static final int OPT_BS_DELTA_HEDGE_PUB_VALUE = 276;
      /**
       * <code>OPT_UNDL_MARKET_PUB = 277;</code>
       */
      public static final int OPT_UNDL_MARKET_PUB_VALUE = 277;
      /**
       * <code>ACCOUNT_NETVALUE_REQ = 278;</code>
       */
      public static final int ACCOUNT_NETVALUE_REQ_VALUE = 278;
      /**
       * <code>ACCOUNT_NETVALUE_RSP = 279;</code>
       */
      public static final int ACCOUNT_NETVALUE_RSP_VALUE = 279;
      /**
       * <code>STRATEGY_QUERYSTRATEGYLIST_REQ = 280;</code>
       *
       * <pre>
       * strategy related
       * </pre>
       */
      public static final int STRATEGY_QUERYSTRATEGYLIST_REQ_VALUE = 280;
      /**
       * <code>STRATEGY_QUERYSTRATEGYLIST_REP = 281;</code>
       */
      public static final int STRATEGY_QUERYSTRATEGYLIST_REP_VALUE = 281;
      /**
       * <code>STRATEGY_PUB_STRATEGY = 284;</code>
       */
      public static final int STRATEGY_PUB_STRATEGY_VALUE = 284;
      /**
       * <code>STRATEGY_PUB_POSITION = 285;</code>
       *
       * <pre>
       * discard temporary
       * </pre>
       */
      public static final int STRATEGY_PUB_POSITION_VALUE = 285;
      /**
       * <code>STRATEGY_ADDSTRATEGY_REQ = 288;</code>
       */
      public static final int STRATEGY_ADDSTRATEGY_REQ_VALUE = 288;
      /**
       * <code>STRATEGY_ADDSTRATEGY_REP = 289;</code>
       */
      public static final int STRATEGY_ADDSTRATEGY_REP_VALUE = 289;
      /**
       * <code>STRATEGY_DELSTRATEGY_REQ = 290;</code>
       */
      public static final int STRATEGY_DELSTRATEGY_REQ_VALUE = 290;
      /**
       * <code>STRATEGY_DELSTRATEGY_REP = 291;</code>
       */
      public static final int STRATEGY_DELSTRATEGY_REP_VALUE = 291;
      /**
       * <code>STRATEGY_MODIFYSTRATEGY_REQ = 292;</code>
       */
      public static final int STRATEGY_MODIFYSTRATEGY_REQ_VALUE = 292;
      /**
       * <code>STRATEGY_MODIFYSTRATEGY_REP = 293;</code>
       */
      public static final int STRATEGY_MODIFYSTRATEGY_REP_VALUE = 293;
      /**
       * <code>STRATEGY_CONTROLSTRATEGY_REQ = 294;</code>
       */
      public static final int STRATEGY_CONTROLSTRATEGY_REQ_VALUE = 294;
      /**
       * <code>STRATEGY_CONTROLSTRATEGY_REP = 295;</code>
       */
      public static final int STRATEGY_CONTROLSTRATEGY_REP_VALUE = 295;
      /**
       * <code>STRATEGY_PUB_TRADE = 296;</code>
       */
      public static final int STRATEGY_PUB_TRADE_VALUE = 296;
      /**
       * <code>STRATEGY_RESERVED = 305;</code>
       *
       * <pre>
       * strategy reserved from 296 to 305, add from 306
       * </pre>
       */
      public static final int STRATEGY_RESERVED_VALUE = 305;
      /**
       * <code>SET_OPT_STARTEGY_STATE_REQ = 306;</code>
       */
      public static final int SET_OPT_STARTEGY_STATE_REQ_VALUE = 306;
      /**
       * <code>SET_OPT_STARTEGY_STATE_RSP = 307;</code>
       */
      public static final int SET_OPT_STARTEGY_STATE_RSP_VALUE = 307;
      /**
       * <code>OPT_STARTEGY_STATE_PUB = 308;</code>
       */
      public static final int OPT_STARTEGY_STATE_PUB_VALUE = 308;
      /**
       * <code>LFSIGNAL_ALPHABETA_PUB = 310;</code>
       */
      public static final int LFSIGNAL_ALPHABETA_PUB_VALUE = 310;
      /**
       * <code>OPT_BS_JOB_STATE_PUB = 311;</code>
       */
      public static final int OPT_BS_JOB_STATE_PUB_VALUE = 311;
      /**
       * <code>OPT_STRATEGYS_REQ = 312;</code>
       *
       * <pre>
       *期权策略参数请求
       * </pre>
       */
      public static final int OPT_STRATEGYS_REQ_VALUE = 312;
      /**
       * <code>OPT_COMBO_STRATEGYS_RSP = 313;</code>
       *
       * <pre>
       *期权策略参数请求--应答
       * </pre>
       */
      public static final int OPT_COMBO_STRATEGYS_RSP_VALUE = 313;
      /**
       * <code>OPT_HEDGE_STRATEGYS_RSP = 314;</code>
       *
       * <pre>
       *期权策略参数请求--应答
       * </pre>
       */
      public static final int OPT_HEDGE_STRATEGYS_RSP_VALUE = 314;
      /**
       * <code>OPT_STRATEGY_DEL_REQ = 315;</code>
       */
      public static final int OPT_STRATEGY_DEL_REQ_VALUE = 315;
      /**
       * <code>OPT_STRATEGY_DEL_RSP = 316;</code>
       */
      public static final int OPT_STRATEGY_DEL_RSP_VALUE = 316;
      /**
       * <code>OPT_COMBO_STRATEGYS_SET_RSP = 317;</code>
       */
      public static final int OPT_COMBO_STRATEGYS_SET_RSP_VALUE = 317;
      /**
       * <code>OPT_HEDGE_STRATEGYS_SET_RSP = 318;</code>
       */
      public static final int OPT_HEDGE_STRATEGYS_SET_RSP_VALUE = 318;
      /**
       * <code>OPT_COMBO_STRATEGYS_SET_REQ = 319;</code>
       */
      public static final int OPT_COMBO_STRATEGYS_SET_REQ_VALUE = 319;
      /**
       * <code>OPT_HEDGE_STRATEGYS_SET_REQ = 320;</code>
       */
      public static final int OPT_HEDGE_STRATEGYS_SET_REQ_VALUE = 320;
      /**
       * <code>ORDER = 321;</code>
       */
      public static final int ORDER_VALUE = 321;
      /**
       * <code>ORDERQUEUE = 322;</code>
       */
      public static final int ORDERQUEUE_VALUE = 322;
      /**
       * <code>CLIENT_QUERY_ORDER_BALANCE_PARAM_REQ = 323;</code>
       */
      public static final int CLIENT_QUERY_ORDER_BALANCE_PARAM_REQ_VALUE = 323;
      /**
       * <code>CLIENT_QUERY_ORDER_BALANCE_PARAM_RSP = 324;</code>
       */
      public static final int CLIENT_QUERY_ORDER_BALANCE_PARAM_RSP_VALUE = 324;
      /**
       * <code>TRANSFERINANDOUT_REQ = 325;</code>
       *
       * <pre>
       * 资金调入调出
       * </pre>
       */
      public static final int TRANSFERINANDOUT_REQ_VALUE = 325;
      /**
       * <code>TRANSFERINANDOUT_RSP = 326;</code>
       */
      public static final int TRANSFERINANDOUT_RSP_VALUE = 326;
      /**
       * <code>QUERY_T0STOCK_REQ = 327;</code>
       *
       * <pre>
       * req t0 stock
       * </pre>
       */
      public static final int QUERY_T0STOCK_REQ_VALUE = 327;
      /**
       * <code>QUERY_T0STOCK_RSP = 328;</code>
       *
       * <pre>
       * rsq
       * </pre>
       */
      public static final int QUERY_T0STOCK_RSP_VALUE = 328;
      /**
       * <code>SAVE_T0STOCK_REQ = 329;</code>
       *
       * <pre>
       *保存分券信息
       * </pre>
       */
      public static final int SAVE_T0STOCK_REQ_VALUE = 329;
      /**
       * <code>SAVE_T0STOCK_RSP = 330;</code>
       *
       * <pre>
       *保存分券信息响应
       * </pre>
       */
      public static final int SAVE_T0STOCK_RSP_VALUE = 330;
      /**
       * <code>PUB_T0STOCK_CHANGE = 331;</code>
       *
       * <pre>
       *发布单条持仓变更
       * </pre>
       */
      public static final int PUB_T0STOCK_CHANGE_VALUE = 331;
      /**
       * <code>ACCOUNT_IMPORINFO = 332;</code>
       *
       * <pre>
       *前台界面导入估值数据时，在服务端留痕，且写入postgresql
       * </pre>
       */
      public static final int ACCOUNT_IMPORINFO_VALUE = 332;
      /**
       * <code>ACCOUNT_IMPORINFORSP = 333;</code>
       *
       * <pre>
       *估值数据导入响应
       * </pre>
       */
      public static final int ACCOUNT_IMPORINFORSP_VALUE = 333;


      public final int getNumber() { return value; }

      public static MsgType valueOf(int value) {
        switch (value) {
          case -1: return MSG_UNKNOWN;
          case 0: return INSERTORDER;
          case 1: return INSERTORDERREP;
          case 2: return CANCELORDER;
          case 3: return CANCELORDERREP;
          case 4: return QUERYORDER;
          case 5: return QUERYORDERREP;
          case 6: return QUERYPOSITION;
          case 7: return QUERYPOSITIONREP;
          case 8: return QUERYACCOUNT;
          case 9: return QUERYACCOUNTREP;
          case 10: return QUERYTRADE;
          case 11: return QUERYTRADEREP;
          case 12: return ERRORTYPE;
          case 13: return INSERTJOB;
          case 14: return INSERTJOBREP;
          case 15: return JOBRISKCHECK;
          case 16: return JOBRISKCHECKREP;
          case 17: return PAUSEJOB;
          case 18: return PAUSEJOBREP;
          case 19: return RESTARTJOB;
          case 20: return RESTARTJOBREP;
          case 21: return STOPJOB;
          case 22: return STOPJOBREP;
          case 23: return RISKCHECK;
          case 24: return RISKCHECKREP;
          case 25: return SECURITYCODETABLE;
          case 26: return SNAPSHOT;
          case 27: return TRANSACTION;
          case 28: return QUERYCODETABLE;
          case 29: return QUERYSNAPSHOTALL;
          case 30: return JOBCOMMAND;
          case 31: return LOGIN;
          case 32: return LOGINREP;
          case 33: return USERAUTH;
          case 34: return USERAUTHREP;
          case 35: return BASICDATA;
          case 36: return PUB_JOBUPDATE;
          case 37: return PUB_ORDERUPDATE;
          case 38: return ALGO_QUERYJOBALL;
          case 39: return ALGO_QUERYJOBS;
          case 40: return ALGO_QUERYJOB4ACCOUNT;
          case 41: return ALGO_QUERYJOBALLREP;
          case 42: return ALGO_QUERYORDERALL;
          case 43: return ALGO_QUERYORDERS;
          case 44: return ALGO_QUERYORDER4ACCOUNT;
          case 45: return ALGO_QUERYORDER4JOB;
          case 46: return ALGO_QUERYORDERALLREP;
          case 47: return BASICDATA_STOCKALPHABETA;
          case 48: return BASICDATA_INDEXSTATUS;
          case 49: return BASICDATA_SECURITYCODETABLE;
          case 50: return BASICDATA_SECTORCODETABLE;
          case 51: return BASICDATA_FUTUREFORECAST;
          case 52: return BASICDATA_INDEXFORECAST;
          case 53: return BASICDATA_STOCKBASEINFO;
          case 54: return BASICDATA_INDEXCONSTITUENTS;
          case 55: return BASICDATA_INDUSCONSTITUENTS;
          case 56: return BASICDATA_FUNDINDEXMAP;
          case 57: return BASICDATA_INDEXPRICEFORECAST;
          case 58: return BASICDATA_STOCKPRICEFORECAST;
          case 59: return BASICDATA_STOCKRISKVALUE;
          case 60: return BASICDATA_SECTORWEIGHT;
          case 61: return BASICDATA_FUNDALPHABETA;
          case 62: return ALGO_QUERYJOB4ACCOUNTREP;
          case 63: return ALGO_QUERYORDERSREP;
          case 64: return ALGO_QUERYORDER4ACCOUNTREP;
          case 65: return ALGO_QUERYORDER4JOBREP;
          case 66: return USERHEARTBT;
          case 70: return PUBACCOUNTINFO;
          case 73: return PUBPOSITIONS;
          case 74: return QUERYPOSITIONSUMMARY;
          case 75: return QUERYPOSITIONSUMMARYREP;
          case 76: return PUBPOSITIONSUMMARY;
          case 79: return PUBTRADES;
          case 82: return PUBORDERS;
          case 83: return QUERYTDPROFIT;
          case 84: return QUERYTDPROFITREP;
          case 85: return PUBTDPROFIT;
          case 86: return ALGO_QUERYJOBSREP;
          case 87: return JOBCOMMANDREP;
          case 88: return CONFIG_QUERYPRODLIST;
          case 89: return CONFIG_QUERYPRODLISTREP;
          case 90: return CONFIG_QUERYACCOUNT4PROD;
          case 91: return CONFIG_QUERYACCOUNT4PRODREP;
          case 92: return BASICDATA_MARKETSTYLE;
          case 93: return SNAPSHOTS;
          case 94: return TRANSACTIONS;
          case 95: return RISK_TESTMSG;
          case 96: return RISK_OVERNIGHT;
          case 97: return QUERYSNAPSHOTS;
          case 98: return QUERYSNAPSHOTREP;
          case 99: return HEDGE_STATEUPDATE;
          case 100: return DERIVEDDATA_LFSIGNAL_REQ;
          case 101: return DERIVEDDATA_LFSIGNAL_REP;
          case 131: return HEDGE_SETPARAM;
          case 132: return HEDGE_SETPARAMREP;
          case 133: return HEDGE_SETPARAMEXTENDREP;
          case 134: return HEDGE_GETPARAM;
          case 135: return HEDGE_GETPARAMREP;
          case 136: return HEDGE_GETREFSIGNAL;
          case 137: return HEDGE_GETREFSIGNALREP;
          case 138: return HEDGE_CONTRACTCODE;
          case 139: return HEDGE_CONTRACTCODEREP;
          case 140: return HEDGE_GETSFACCOUNT;
          case 141: return HEDGE_GETSFACCOUNTREP;
          case 142: return QUERY_SNAPLITESALL;
          case 143: return QUERY_SNAPLITES;
          case 144: return QUERY_SNAPLITESREP;
          case 145: return PUB_SNAPLITEUPDATE;
          case 146: return RISK_SETTING;
          case 147: return RISK_SETTINGREP;
          case 148: return RISK_RISKSETTINGUPDATE;
          case 149: return RISK_RISKSETTINGUPDATEREP;
          case 150: return RISK_GETPOSITIONBETA;
          case 151: return RISK_GETPOSITIONBETAREP;
          case 152: return RISK_GETRISKREASON;
          case 153: return RISK_GETRISKREASONREP;
          case 154: return RISK_GETRISKSETTING;
          case 155: return RISK_GETRISKSETTINGREP;
          case 156: return RISK_GETALLRISKSETTING;
          case 157: return RISK_GETALLRISKSETTINGREP;
          case 158: return PUB_JOBSUMMARY;
          case 159: return DERIVEDDATA_ENTRUSTDEPTH_REP;
          case 160: return DERIVEDDATA_ENTRUSTDEPTH_REQ;
          case 161: return QUERY_THRESHOLD;
          case 162: return QUERY_THRESHOLDREP;
          case 163: return QUOTE_HEARTBEAT;
          case 164: return HFTRADING_LOGIN;
          case 165: return HFTRADING_LOGINREP;
          case 166: return HFTRADING_ACCOUNTLOGIN;
          case 167: return HFTRADING_ADDUPDATESTRATEGY;
          case 168: return HFTRADING_ADDUPDATESTRATEGYREP;
          case 171: return HFTRADING_STRATEGYSREQ;
          case 172: return HFTRADING_STRATEGYSREP;
          case 173: return HFTRADING_DELETESTRATEGY;
          case 174: return HFTRADING_DELETESTRATEGYREP;
          case 175: return HFTRADING_STARTSTRATEGY;
          case 176: return HFTRADING_ACTIONSTRATEGYREP;
          case 177: return HFTRADING_SUSPENDSTRATEGY;
          case 178: return HFTRADING_STOPSTRATEGY;
          case 179: return HFTRADING_CONTRACTSREQ;
          case 180: return HFTRADING_CONTRACTSREP;
          case 181: return HFTRADING_STRATEGYVIEWPUB;
          case 182: return BASICDATA_FUNDBASEINFO;
          case 183: return BASICDATA_CLIENTSECTORWEIGHT;
          case 184: return BASICDATA_BASICUPDATETIME;
          case 185: return CONFIG_QUERYFEES4ACCOUNT;
          case 186: return CONFIG_QUERYFEES4ACCOUNTREP;
          case 187: return DERIVEDDATA_MFANDPERCENT_REQ;
          case 188: return DERIVEDDATA_MFANDPERCENT_REP;
          case 189: return DERIVEDDATA_RANGEPROJECTION_REQ;
          case 190: return DERIVEDDATA_RANGEPROJECTION_REP;
          case 191: return HFTRADING_STRATEGYVIEWSREQ;
          case 192: return HFTRADING_STRATEGYVIEWSREP;
          case 193: return HFTRADING_HFQUERYTRADEREQ;
          case 194: return HFTRADING_HFQUERYTRADEREP;
          case 195: return HFTRADING_SPREADDATAPUB;
          case 196: return HFTRADING_PROFITDATAPUB;
          case 197: return HFTRADING_QUERYPROFITDATAREQ;
          case 198: return HFTRADING_QUERYPROFITDATAREP;
          case 199: return HFTRADING_QUERYINSTRUMENTREQ;
          case 200: return HFTRADING_QUERYINSTRUMENTRSP;
          case 201: return REDIS_COMMANDREQ;
          case 202: return REDIS_COMMANDREP;
          case 203: return RISK_SAVE_COMPANYRISKSETTING_REQ;
          case 204: return RISK_SAVE_COMPANYRISKSETTING_REP;
          case 205: return RISK_GET_COMPANYRISKSETTING_REQ;
          case 206: return RISK_GET_COMPANYRISKSETTING_REP;
          case 207: return ModifyPwd;
          case 208: return ModifyPwdRep;
          case 209: return PUBALLPOSITION;
          case 210: return QueryQuote;
          case 211: return QueryQuoteRep;
          case 212: return SYSTEMLOGIN;
          case 213: return SYSTEMLOGINREP;
          case 214: return SMM_QUERY_REQ;
          case 215: return SMM_QUERY_REP;
          case 216: return SMM_MODIFY_REQ;
          case 217: return SMM_MODIFY_REP;
          case 218: return SMM_PUB;
          case 219: return SMM_KEYPRICES_REQ;
          case 220: return SMM_KEYPRICES_REP;
          case 221: return INDEX;
          case 222: return DDL1;
          case 223: return GATEWAY_SUB;
          case 224: return GATEWAY_UNSUB;
          case 225: return BASICDATA_MARKETSTYLEREQ;
          case 226: return DDLSector;
          case 227: return PORTFOLIO_EDIT_REQ;
          case 228: return PORTFOLIO_EDIT_RSP;
          case 229: return PORTFOLIOITEM_EDIT_REQ;
          case 230: return PORTFOLIOITEM_EDIT_RSP;
          case 231: return ACCOUNT_AVAILABLE_REQ;
          case 232: return ACCOUNT_AVAILABLE_RSP;
          case 233: return ACCOUNT_AVAILABLE_PUB;
          case 234: return USERAUTH_USEROPERATE;
          case 235: return USERAUTH_PRODUCTOPERATE;
          case 236: return RISK_RISKREPORTREQ;
          case 237: return RISK_RISKREPORTREP;
          case 238: return DDRT;
          case 239: return QUERY_SNAPLITESALL_COMPRESS_REQ;
          case 240: return QUERY_SNAPLITESALL_COMPRESS_RSP;
          case 241: return ANALYSIS_TCA_REQ;
          case 242: return ANALYSIS_TCA_RSP;
          case 243: return FSLEND_QUERYSECURITYITEM_REQ;
          case 244: return FSLEND_QUERYSECURITYITEM_RSP;
          case 245: return FSLEND_QUERYCONTRACT_REQ;
          case 246: return FSLEND_QUERYCONTRACT_RSP;
          case 247: return QUERYPOSITION_COMPRESS_REQ;
          case 248: return QUERYPOSITION_COMPRESS_RSP;
          case 249: return QUERYALLACCOUNT_REQ;
          case 250: return QUERYALLACCOUNT_RSP;
          case 251: return PUB_FSLEND_CONTRACT;
          case 252: return LATENCYINDICATORS;
          case 253: return CurrencyEtf_StrategyAddReq;
          case 254: return CurrencyEtf_StrategyAddResp;
          case 255: return CurrencyEtf_StrategyAddPub;
          case 257: return CurrencyEtf_StrategyModifyReq;
          case 258: return CurrencyEtf_StrategyModifyResp;
          case 259: return CurrencyEtf_StrategyModifyPub;
          case 260: return CurrencyEtf_StrategyOperateReq;
          case 261: return CurrencyEtf_StrategyOperateResp;
          case 262: return CurrencyEtf_QueryStrategyListReq;
          case 263: return CurrencyEtf_QueryStrategyListResp;
          case 264: return CurrencyEtf_QueryOpenPositionListReq;
          case 265: return CurrencyEtf_QueryOpenPositionListResp;
          case 266: return CurrencyEtf_StrategyStatusChangedPub;
          case 267: return CurrencyEtf_StrategyPositionChangedPub;
          case 268: return QUERYACCTINFO_REQ;
          case 269: return QUERYACCTINFO_RSP;
          case 270: return OPT_QUERYCOMSTRADETAILITEM_REQ;
          case 271: return OPT_QUERYCOMSTRADETAILITEM_RSP;
          case 272: return INSERTCOMBSTRAORDER_REQ;
          case 273: return INSERTCOMBSTRAORDER_RSP;
          case 274: return OPT_BS_NORMS_PUB;
          case 275: return OPT_BS_DELTA_PORTFOLIO_PUB;
          case 276: return OPT_BS_DELTA_HEDGE_PUB;
          case 277: return OPT_UNDL_MARKET_PUB;
          case 278: return ACCOUNT_NETVALUE_REQ;
          case 279: return ACCOUNT_NETVALUE_RSP;
          case 280: return STRATEGY_QUERYSTRATEGYLIST_REQ;
          case 281: return STRATEGY_QUERYSTRATEGYLIST_REP;
          case 284: return STRATEGY_PUB_STRATEGY;
          case 285: return STRATEGY_PUB_POSITION;
          case 288: return STRATEGY_ADDSTRATEGY_REQ;
          case 289: return STRATEGY_ADDSTRATEGY_REP;
          case 290: return STRATEGY_DELSTRATEGY_REQ;
          case 291: return STRATEGY_DELSTRATEGY_REP;
          case 292: return STRATEGY_MODIFYSTRATEGY_REQ;
          case 293: return STRATEGY_MODIFYSTRATEGY_REP;
          case 294: return STRATEGY_CONTROLSTRATEGY_REQ;
          case 295: return STRATEGY_CONTROLSTRATEGY_REP;
          case 296: return STRATEGY_PUB_TRADE;
          case 305: return STRATEGY_RESERVED;
          case 306: return SET_OPT_STARTEGY_STATE_REQ;
          case 307: return SET_OPT_STARTEGY_STATE_RSP;
          case 308: return OPT_STARTEGY_STATE_PUB;
          case 310: return LFSIGNAL_ALPHABETA_PUB;
          case 311: return OPT_BS_JOB_STATE_PUB;
          case 312: return OPT_STRATEGYS_REQ;
          case 313: return OPT_COMBO_STRATEGYS_RSP;
          case 314: return OPT_HEDGE_STRATEGYS_RSP;
          case 315: return OPT_STRATEGY_DEL_REQ;
          case 316: return OPT_STRATEGY_DEL_RSP;
          case 317: return OPT_COMBO_STRATEGYS_SET_RSP;
          case 318: return OPT_HEDGE_STRATEGYS_SET_RSP;
          case 319: return OPT_COMBO_STRATEGYS_SET_REQ;
          case 320: return OPT_HEDGE_STRATEGYS_SET_REQ;
          case 321: return ORDER;
          case 322: return ORDERQUEUE;
          case 323: return CLIENT_QUERY_ORDER_BALANCE_PARAM_REQ;
          case 324: return CLIENT_QUERY_ORDER_BALANCE_PARAM_RSP;
          case 325: return TRANSFERINANDOUT_REQ;
          case 326: return TRANSFERINANDOUT_RSP;
          case 327: return QUERY_T0STOCK_REQ;
          case 328: return QUERY_T0STOCK_RSP;
          case 329: return SAVE_T0STOCK_REQ;
          case 330: return SAVE_T0STOCK_RSP;
          case 331: return PUB_T0STOCK_CHANGE;
          case 332: return ACCOUNT_IMPORINFO;
          case 333: return ACCOUNT_IMPORINFORSP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
              public MsgType findValueByNumber(int number) {
                return MsgType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.getDescriptor().getEnumTypes().get(0);
      }

      private static final MsgType[] VALUES = values();

      public static MsgType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private MsgType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.sunquan.zmqproto.MsgCarrier.MsgType)
    }

    private int bitField0_;
    public static final int SEQNO_FIELD_NUMBER = 1;
    private long seqno_;
    /**
     * <code>optional int64 seqno = 1;</code>
     */
    public boolean hasSeqno() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 seqno = 1;</code>
     */
    public long getSeqno() {
      return seqno_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType type_;
    /**
     * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
     */
    public com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType getType() {
      return type_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString message_;
    /**
     * <code>optional bytes message = 3;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes message = 3;</code>
     */
    public com.google.protobuf.ByteString getMessage() {
      return message_;
    }

    public static final int INDICATOR_FIELD_NUMBER = 4;
    private int indicator_;
    /**
     * <code>optional int32 indicator = 4;</code>
     *
     * <pre>
     *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
     *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
     * </pre>
     */
    public boolean hasIndicator() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 indicator = 4;</code>
     *
     * <pre>
     *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
     *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
     * </pre>
     */
    public int getIndicator() {
      return indicator_;
    }

    public static final int JWT_FIELD_NUMBER = 5;
    private java.lang.Object jwt_;
    /**
     * <code>optional string jwt = 5;</code>
     *
     * <pre>
     * Json Web Token
     * </pre>
     */
    public boolean hasJwt() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string jwt = 5;</code>
     *
     * <pre>
     * Json Web Token
     * </pre>
     */
    public java.lang.String getJwt() {
      java.lang.Object ref = jwt_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          jwt_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string jwt = 5;</code>
     *
     * <pre>
     * Json Web Token
     * </pre>
     */
    public com.google.protobuf.ByteString
        getJwtBytes() {
      java.lang.Object ref = jwt_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        jwt_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AUTHENTICATED_FIELD_NUMBER = 6;
    private boolean authenticated_;
    /**
     * <code>optional bool authenticated = 6;</code>
     *
     * <pre>
     * jwt authenticate status
     * </pre>
     */
    public boolean hasAuthenticated() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool authenticated = 6;</code>
     *
     * <pre>
     * jwt authenticate status
     * </pre>
     */
    public boolean getAuthenticated() {
      return authenticated_;
    }

    public static final int SERVICE_FIELD_NUMBER = 7;
    private java.lang.Object service_;
    /**
     * <code>optional string service = 7;</code>
     *
     * <pre>
     *服务端属性字段，可能是服务名称或者端口号
     * </pre>
     */
    public boolean hasService() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string service = 7;</code>
     *
     * <pre>
     *服务端属性字段，可能是服务名称或者端口号
     * </pre>
     */
    public java.lang.String getService() {
      java.lang.Object ref = service_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          service_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string service = 7;</code>
     *
     * <pre>
     *服务端属性字段，可能是服务名称或者端口号
     * </pre>
     */
    public com.google.protobuf.ByteString
        getServiceBytes() {
      java.lang.Object ref = service_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        service_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PUBTOPIC_FIELD_NUMBER = 8;
    private java.lang.Object pubtopic_;
    /**
     * <code>optional string pubtopic = 8;</code>
     *
     * <pre>
     *用来保存 pub 消息时的主题字段
     * </pre>
     */
    public boolean hasPubtopic() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string pubtopic = 8;</code>
     *
     * <pre>
     *用来保存 pub 消息时的主题字段
     * </pre>
     */
    public java.lang.String getPubtopic() {
      java.lang.Object ref = pubtopic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          pubtopic_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string pubtopic = 8;</code>
     *
     * <pre>
     *用来保存 pub 消息时的主题字段
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPubtopicBytes() {
      java.lang.Object ref = pubtopic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pubtopic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MSGID_FIELD_NUMBER = 9;
    private long msgid_;
    /**
     * <code>optional int64 msgid = 9;</code>
     */
    public boolean hasMsgid() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int64 msgid = 9;</code>
     */
    public long getMsgid() {
      return msgid_;
    }

    public static final int ISCOMPRESS_FIELD_NUMBER = 10;
    private boolean iscompress_;
    /**
     * <code>optional bool iscompress = 10;</code>
     */
    public boolean hasIscompress() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool iscompress = 10;</code>
     */
    public boolean getIscompress() {
      return iscompress_;
    }

    private void initFields() {
      seqno_ = 0L;
      type_ = com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType.MSG_UNKNOWN;
      message_ = com.google.protobuf.ByteString.EMPTY;
      indicator_ = 0;
      jwt_ = "";
      authenticated_ = false;
      service_ = "";
      pubtopic_ = "";
      msgid_ = 0L;
      iscompress_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, seqno_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, message_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, indicator_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getJwtBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, authenticated_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getServiceBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getPubtopicBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt64(9, msgid_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, iscompress_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, seqno_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, message_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, indicator_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getJwtBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, authenticated_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getServiceBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getPubtopicBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, msgid_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, iscompress_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sunquan.zmqproto.MsgCarrier}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sunquan.zmqproto.MsgCarrier)
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarrierOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarrier_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarrier_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.class, com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.Builder.class);
      }

      // Construct using com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seqno_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType.MSG_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        indicator_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        jwt_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        authenticated_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        service_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        pubtopic_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        msgid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        iscompress_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarrier_descriptor;
      }

      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier getDefaultInstanceForType() {
        return com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.getDefaultInstance();
      }

      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier build() {
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier buildPartial() {
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier result = new com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seqno_ = seqno_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.message_ = message_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.indicator_ = indicator_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.jwt_ = jwt_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.authenticated_ = authenticated_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.service_ = service_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.pubtopic_ = pubtopic_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.msgid_ = msgid_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.iscompress_ = iscompress_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier) {
          return mergeFrom((com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier other) {
        if (other == com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.getDefaultInstance()) return this;
        if (other.hasSeqno()) {
          setSeqno(other.getSeqno());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasIndicator()) {
          setIndicator(other.getIndicator());
        }
        if (other.hasJwt()) {
          bitField0_ |= 0x00000010;
          jwt_ = other.jwt_;
          onChanged();
        }
        if (other.hasAuthenticated()) {
          setAuthenticated(other.getAuthenticated());
        }
        if (other.hasService()) {
          bitField0_ |= 0x00000040;
          service_ = other.service_;
          onChanged();
        }
        if (other.hasPubtopic()) {
          bitField0_ |= 0x00000080;
          pubtopic_ = other.pubtopic_;
          onChanged();
        }
        if (other.hasMsgid()) {
          setMsgid(other.getMsgid());
        }
        if (other.hasIscompress()) {
          setIscompress(other.getIscompress());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long seqno_ ;
      /**
       * <code>optional int64 seqno = 1;</code>
       */
      public boolean hasSeqno() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 seqno = 1;</code>
       */
      public long getSeqno() {
        return seqno_;
      }
      /**
       * <code>optional int64 seqno = 1;</code>
       */
      public Builder setSeqno(long value) {
        bitField0_ |= 0x00000001;
        seqno_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 seqno = 1;</code>
       */
      public Builder clearSeqno() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seqno_ = 0L;
        onChanged();
        return this;
      }

      private com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType type_ = com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType.MSG_UNKNOWN;
      /**
       * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
       */
      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType getType() {
        return type_;
      }
      /**
       * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
       */
      public Builder setType(com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.sunquan.zmqproto.MsgCarrier.MsgType type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.sunquan.zmqproto.MsgCarrierClass.MsgCarrier.MsgType.MSG_UNKNOWN;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString message_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes message = 3;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes message = 3;</code>
       */
      public com.google.protobuf.ByteString getMessage() {
        return message_;
      }
      /**
       * <code>optional bytes message = 3;</code>
       */
      public Builder setMessage(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes message = 3;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }

      private int indicator_ ;
      /**
       * <code>optional int32 indicator = 4;</code>
       *
       * <pre>
       *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
       *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
       * </pre>
       */
      public boolean hasIndicator() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 indicator = 4;</code>
       *
       * <pre>
       *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
       *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
       * </pre>
       */
      public int getIndicator() {
        return indicator_;
      }
      /**
       * <code>optional int32 indicator = 4;</code>
       *
       * <pre>
       *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
       *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
       * </pre>
       */
      public Builder setIndicator(int value) {
        bitField0_ |= 0x00000008;
        indicator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 indicator = 4;</code>
       *
       * <pre>
       *this field can be used for different purposes depending on the business logics, when sending messages to Proxy,
       *it is of type TypeDef.SecurityProviderEnum to indicate the security provider
       * </pre>
       */
      public Builder clearIndicator() {
        bitField0_ = (bitField0_ & ~0x00000008);
        indicator_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object jwt_ = "";
      /**
       * <code>optional string jwt = 5;</code>
       *
       * <pre>
       * Json Web Token
       * </pre>
       */
      public boolean hasJwt() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string jwt = 5;</code>
       *
       * <pre>
       * Json Web Token
       * </pre>
       */
      public java.lang.String getJwt() {
        java.lang.Object ref = jwt_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            jwt_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string jwt = 5;</code>
       *
       * <pre>
       * Json Web Token
       * </pre>
       */
      public com.google.protobuf.ByteString
          getJwtBytes() {
        java.lang.Object ref = jwt_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          jwt_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string jwt = 5;</code>
       *
       * <pre>
       * Json Web Token
       * </pre>
       */
      public Builder setJwt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        jwt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string jwt = 5;</code>
       *
       * <pre>
       * Json Web Token
       * </pre>
       */
      public Builder clearJwt() {
        bitField0_ = (bitField0_ & ~0x00000010);
        jwt_ = getDefaultInstance().getJwt();
        onChanged();
        return this;
      }
      /**
       * <code>optional string jwt = 5;</code>
       *
       * <pre>
       * Json Web Token
       * </pre>
       */
      public Builder setJwtBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        jwt_ = value;
        onChanged();
        return this;
      }

      private boolean authenticated_ ;
      /**
       * <code>optional bool authenticated = 6;</code>
       *
       * <pre>
       * jwt authenticate status
       * </pre>
       */
      public boolean hasAuthenticated() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool authenticated = 6;</code>
       *
       * <pre>
       * jwt authenticate status
       * </pre>
       */
      public boolean getAuthenticated() {
        return authenticated_;
      }
      /**
       * <code>optional bool authenticated = 6;</code>
       *
       * <pre>
       * jwt authenticate status
       * </pre>
       */
      public Builder setAuthenticated(boolean value) {
        bitField0_ |= 0x00000020;
        authenticated_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool authenticated = 6;</code>
       *
       * <pre>
       * jwt authenticate status
       * </pre>
       */
      public Builder clearAuthenticated() {
        bitField0_ = (bitField0_ & ~0x00000020);
        authenticated_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object service_ = "";
      /**
       * <code>optional string service = 7;</code>
       *
       * <pre>
       *服务端属性字段，可能是服务名称或者端口号
       * </pre>
       */
      public boolean hasService() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string service = 7;</code>
       *
       * <pre>
       *服务端属性字段，可能是服务名称或者端口号
       * </pre>
       */
      public java.lang.String getService() {
        java.lang.Object ref = service_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            service_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string service = 7;</code>
       *
       * <pre>
       *服务端属性字段，可能是服务名称或者端口号
       * </pre>
       */
      public com.google.protobuf.ByteString
          getServiceBytes() {
        java.lang.Object ref = service_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          service_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string service = 7;</code>
       *
       * <pre>
       *服务端属性字段，可能是服务名称或者端口号
       * </pre>
       */
      public Builder setService(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        service_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string service = 7;</code>
       *
       * <pre>
       *服务端属性字段，可能是服务名称或者端口号
       * </pre>
       */
      public Builder clearService() {
        bitField0_ = (bitField0_ & ~0x00000040);
        service_ = getDefaultInstance().getService();
        onChanged();
        return this;
      }
      /**
       * <code>optional string service = 7;</code>
       *
       * <pre>
       *服务端属性字段，可能是服务名称或者端口号
       * </pre>
       */
      public Builder setServiceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        service_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object pubtopic_ = "";
      /**
       * <code>optional string pubtopic = 8;</code>
       *
       * <pre>
       *用来保存 pub 消息时的主题字段
       * </pre>
       */
      public boolean hasPubtopic() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string pubtopic = 8;</code>
       *
       * <pre>
       *用来保存 pub 消息时的主题字段
       * </pre>
       */
      public java.lang.String getPubtopic() {
        java.lang.Object ref = pubtopic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            pubtopic_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string pubtopic = 8;</code>
       *
       * <pre>
       *用来保存 pub 消息时的主题字段
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPubtopicBytes() {
        java.lang.Object ref = pubtopic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pubtopic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string pubtopic = 8;</code>
       *
       * <pre>
       *用来保存 pub 消息时的主题字段
       * </pre>
       */
      public Builder setPubtopic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        pubtopic_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string pubtopic = 8;</code>
       *
       * <pre>
       *用来保存 pub 消息时的主题字段
       * </pre>
       */
      public Builder clearPubtopic() {
        bitField0_ = (bitField0_ & ~0x00000080);
        pubtopic_ = getDefaultInstance().getPubtopic();
        onChanged();
        return this;
      }
      /**
       * <code>optional string pubtopic = 8;</code>
       *
       * <pre>
       *用来保存 pub 消息时的主题字段
       * </pre>
       */
      public Builder setPubtopicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        pubtopic_ = value;
        onChanged();
        return this;
      }

      private long msgid_ ;
      /**
       * <code>optional int64 msgid = 9;</code>
       */
      public boolean hasMsgid() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 msgid = 9;</code>
       */
      public long getMsgid() {
        return msgid_;
      }
      /**
       * <code>optional int64 msgid = 9;</code>
       */
      public Builder setMsgid(long value) {
        bitField0_ |= 0x00000100;
        msgid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 msgid = 9;</code>
       */
      public Builder clearMsgid() {
        bitField0_ = (bitField0_ & ~0x00000100);
        msgid_ = 0L;
        onChanged();
        return this;
      }

      private boolean iscompress_ ;
      /**
       * <code>optional bool iscompress = 10;</code>
       */
      public boolean hasIscompress() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool iscompress = 10;</code>
       */
      public boolean getIscompress() {
        return iscompress_;
      }
      /**
       * <code>optional bool iscompress = 10;</code>
       */
      public Builder setIscompress(boolean value) {
        bitField0_ |= 0x00000200;
        iscompress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool iscompress = 10;</code>
       */
      public Builder clearIscompress() {
        bitField0_ = (bitField0_ & ~0x00000200);
        iscompress_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sunquan.zmqproto.MsgCarrier)
    }

    static {
      defaultInstance = new MsgCarrier(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.sunquan.zmqproto.MsgCarrier)
  }

  public interface MsgCarriersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sunquan.zmqproto.MsgCarriers)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated bytes items = 1;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getItemsList();
    /**
     * <code>repeated bytes items = 1;</code>
     */
    int getItemsCount();
    /**
     * <code>repeated bytes items = 1;</code>
     */
    com.google.protobuf.ByteString getItems(int index);
  }
  /**
   * Protobuf type {@code com.sunquan.zmqproto.MsgCarriers}
   */
  public static final class MsgCarriers extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sunquan.zmqproto.MsgCarriers)
      MsgCarriersOrBuilder {
    // Use MsgCarriers.newBuilder() to construct.
    private MsgCarriers(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MsgCarriers(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MsgCarriers defaultInstance;
    public static MsgCarriers getDefaultInstance() {
      return defaultInstance;
    }

    public MsgCarriers getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MsgCarriers(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                items_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000001;
              }
              items_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          items_ = java.util.Collections.unmodifiableList(items_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarriers_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarriers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.class, com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.Builder.class);
    }

    public static com.google.protobuf.Parser<MsgCarriers> PARSER =
        new com.google.protobuf.AbstractParser<MsgCarriers>() {
      public MsgCarriers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MsgCarriers(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MsgCarriers> getParserForType() {
      return PARSER;
    }

    public static final int ITEMS_FIELD_NUMBER = 1;
    private java.util.List<com.google.protobuf.ByteString> items_;
    /**
     * <code>repeated bytes items = 1;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getItemsList() {
      return items_;
    }
    /**
     * <code>repeated bytes items = 1;</code>
     */
    public int getItemsCount() {
      return items_.size();
    }
    /**
     * <code>repeated bytes items = 1;</code>
     */
    public com.google.protobuf.ByteString getItems(int index) {
      return items_.get(index);
    }

    private void initFields() {
      items_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < items_.size(); i++) {
        output.writeBytes(1, items_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < items_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(items_.get(i));
        }
        size += dataSize;
        size += 1 * getItemsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sunquan.zmqproto.MsgCarriers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sunquan.zmqproto.MsgCarriers)
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarriersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarriers_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarriers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.class, com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.Builder.class);
      }

      // Construct using com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        items_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_MsgCarriers_descriptor;
      }

      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers getDefaultInstanceForType() {
        return com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.getDefaultInstance();
      }

      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers build() {
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers buildPartial() {
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers result = new com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          items_ = java.util.Collections.unmodifiableList(items_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.items_ = items_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers) {
          return mergeFrom((com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers other) {
        if (other == com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers.getDefaultInstance()) return this;
        if (!other.items_.isEmpty()) {
          if (items_.isEmpty()) {
            items_ = other.items_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureItemsIsMutable();
            items_.addAll(other.items_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sunquan.zmqproto.MsgCarrierClass.MsgCarriers) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.protobuf.ByteString> items_ = java.util.Collections.emptyList();
      private void ensureItemsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          items_ = new java.util.ArrayList<com.google.protobuf.ByteString>(items_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getItemsList() {
        return java.util.Collections.unmodifiableList(items_);
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public int getItemsCount() {
        return items_.size();
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public com.google.protobuf.ByteString getItems(int index) {
        return items_.get(index);
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public Builder setItems(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureItemsIsMutable();
        items_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public Builder addItems(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureItemsIsMutable();
        items_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public Builder addAllItems(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureItemsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, items_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes items = 1;</code>
       */
      public Builder clearItems() {
        items_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sunquan.zmqproto.MsgCarriers)
    }

    static {
      defaultInstance = new MsgCarriers(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.sunquan.zmqproto.MsgCarriers)
  }

  public interface ErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.sunquan.zmqproto.Error)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bytes msg = 1;</code>
     */
    boolean hasMsg();
    /**
     * <code>optional bytes msg = 1;</code>
     */
    com.google.protobuf.ByteString getMsg();

    /**
     * <code>optional int64 reqid = 2;</code>
     */
    boolean hasReqid();
    /**
     * <code>optional int64 reqid = 2;</code>
     */
    long getReqid();

    /**
     * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
     */
    boolean hasErrortype();
    /**
     * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
     */
    com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType getErrortype();
  }
  /**
   * Protobuf type {@code com.sunquan.zmqproto.Error}
   */
  public static final class Error extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.sunquan.zmqproto.Error)
      ErrorOrBuilder {
    // Use Error.newBuilder() to construct.
    private Error(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Error(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Error defaultInstance;
    public static Error getDefaultInstance() {
      return defaultInstance;
    }

    public Error getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Error(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              msg_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              reqid_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType value = com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                errortype_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_Error_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_Error_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sunquan.zmqproto.MsgCarrierClass.Error.class, com.sunquan.zmqproto.MsgCarrierClass.Error.Builder.class);
    }

    public static com.google.protobuf.Parser<Error> PARSER =
        new com.google.protobuf.AbstractParser<Error>() {
      public Error parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Error(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Error> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MSG_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString msg_;
    /**
     * <code>optional bytes msg = 1;</code>
     */
    public boolean hasMsg() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes msg = 1;</code>
     */
    public com.google.protobuf.ByteString getMsg() {
      return msg_;
    }

    public static final int REQID_FIELD_NUMBER = 2;
    private long reqid_;
    /**
     * <code>optional int64 reqid = 2;</code>
     */
    public boolean hasReqid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 reqid = 2;</code>
     */
    public long getReqid() {
      return reqid_;
    }

    public static final int ERRORTYPE_FIELD_NUMBER = 3;
    private com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType errortype_;
    /**
     * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
     */
    public boolean hasErrortype() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
     */
    public com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType getErrortype() {
      return errortype_;
    }

    private void initFields() {
      msg_ = com.google.protobuf.ByteString.EMPTY;
      reqid_ = 0L;
      errortype_ = com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType.ERROR_UNKNOWN;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, msg_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, reqid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, errortype_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, msg_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, reqid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, errortype_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.sunquan.zmqproto.MsgCarrierClass.Error parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sunquan.zmqproto.MsgCarrierClass.Error prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.sunquan.zmqproto.Error}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.sunquan.zmqproto.Error)
        com.sunquan.zmqproto.MsgCarrierClass.ErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_Error_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_Error_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sunquan.zmqproto.MsgCarrierClass.Error.class, com.sunquan.zmqproto.MsgCarrierClass.Error.Builder.class);
      }

      // Construct using com.sunquan.zmqproto.MsgCarrierClass.Error.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        msg_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        reqid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        errortype_ = com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType.ERROR_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sunquan.zmqproto.MsgCarrierClass.internal_static_com_sunquan_zmqproto_Error_descriptor;
      }

      public com.sunquan.zmqproto.MsgCarrierClass.Error getDefaultInstanceForType() {
        return com.sunquan.zmqproto.MsgCarrierClass.Error.getDefaultInstance();
      }

      public com.sunquan.zmqproto.MsgCarrierClass.Error build() {
        com.sunquan.zmqproto.MsgCarrierClass.Error result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.sunquan.zmqproto.MsgCarrierClass.Error buildPartial() {
        com.sunquan.zmqproto.MsgCarrierClass.Error result = new com.sunquan.zmqproto.MsgCarrierClass.Error(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msg_ = msg_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reqid_ = reqid_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.errortype_ = errortype_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sunquan.zmqproto.MsgCarrierClass.Error) {
          return mergeFrom((com.sunquan.zmqproto.MsgCarrierClass.Error)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sunquan.zmqproto.MsgCarrierClass.Error other) {
        if (other == com.sunquan.zmqproto.MsgCarrierClass.Error.getDefaultInstance()) return this;
        if (other.hasMsg()) {
          setMsg(other.getMsg());
        }
        if (other.hasReqid()) {
          setReqid(other.getReqid());
        }
        if (other.hasErrortype()) {
          setErrortype(other.getErrortype());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sunquan.zmqproto.MsgCarrierClass.Error parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sunquan.zmqproto.MsgCarrierClass.Error) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString msg_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes msg = 1;</code>
       */
      public boolean hasMsg() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes msg = 1;</code>
       */
      public com.google.protobuf.ByteString getMsg() {
        return msg_;
      }
      /**
       * <code>optional bytes msg = 1;</code>
       */
      public Builder setMsg(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        msg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes msg = 1;</code>
       */
      public Builder clearMsg() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msg_ = getDefaultInstance().getMsg();
        onChanged();
        return this;
      }

      private long reqid_ ;
      /**
       * <code>optional int64 reqid = 2;</code>
       */
      public boolean hasReqid() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 reqid = 2;</code>
       */
      public long getReqid() {
        return reqid_;
      }
      /**
       * <code>optional int64 reqid = 2;</code>
       */
      public Builder setReqid(long value) {
        bitField0_ |= 0x00000002;
        reqid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 reqid = 2;</code>
       */
      public Builder clearReqid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reqid_ = 0L;
        onChanged();
        return this;
      }

      private com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType errortype_ = com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType.ERROR_UNKNOWN;
      /**
       * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
       */
      public boolean hasErrortype() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
       */
      public com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType getErrortype() {
        return errortype_;
      }
      /**
       * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
       */
      public Builder setErrortype(com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        errortype_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.sunquan.zmqproto.TypeDef.ErrorType errortype = 3 [default = ERROR_UNKNOWN];</code>
       */
      public Builder clearErrortype() {
        bitField0_ = (bitField0_ & ~0x00000004);
        errortype_ = com.sunquan.zmqproto.TypeDefClass.TypeDef.ErrorType.ERROR_UNKNOWN;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.sunquan.zmqproto.Error)
    }

    static {
      defaultInstance = new Error(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.sunquan.zmqproto.Error)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sunquan_zmqproto_MsgCarrier_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sunquan_zmqproto_MsgCarrier_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sunquan_zmqproto_MsgCarriers_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sunquan_zmqproto_MsgCarriers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_sunquan_zmqproto_Error_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_sunquan_zmqproto_Error_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020msgcarrier.proto\022\024com.sunquan.zmqproto" +
      "\032\rtypedef.proto\"\250<\n\nMsgCarrier\022\r\n\005seqno\030" +
      "\001 \001(\003\0226\n\004type\030\002 \001(\0162(.com.sunquan.zmqpro" +
      "to.MsgCarrier.MsgType\022\017\n\007message\030\003 \001(\014\022\021" +
      "\n\tindicator\030\004 \001(\005\022\013\n\003jwt\030\005 \001(\t\022\025\n\rauthen" +
      "ticated\030\006 \001(\010\022\017\n\007service\030\007 \001(\t\022\020\n\010pubtop" +
      "ic\030\010 \001(\t\022\r\n\005msgid\030\t \001(\003\022\022\n\niscompress\030\n " +
      "\001(\010\"\304:\n\007MsgType\022\030\n\013MSG_UNKNOWN\020\377\377\377\377\377\377\377\377\377" +
      "\001\022\017\n\013INSERTORDER\020\000\022\022\n\016INSERTORDERREP\020\001\022\017" +
      "\n\013CANCELORDER\020\002\022\022\n\016CANCELORDERREP\020\003\022\016\n\nQ",
      "UERYORDER\020\004\022\021\n\rQUERYORDERREP\020\005\022\021\n\rQUERYP" +
      "OSITION\020\006\022\024\n\020QUERYPOSITIONREP\020\007\022\020\n\014QUERY" +
      "ACCOUNT\020\010\022\023\n\017QUERYACCOUNTREP\020\t\022\016\n\nQUERYT" +
      "RADE\020\n\022\021\n\rQUERYTRADEREP\020\013\022\r\n\tERRORTYPE\020\014" +
      "\022\r\n\tINSERTJOB\020\r\022\020\n\014INSERTJOBREP\020\016\022\020\n\014JOB" +
      "RISKCHECK\020\017\022\023\n\017JOBRISKCHECKREP\020\020\022\014\n\010PAUS" +
      "EJOB\020\021\022\017\n\013PAUSEJOBREP\020\022\022\016\n\nRESTARTJOB\020\023\022" +
      "\021\n\rRESTARTJOBREP\020\024\022\013\n\007STOPJOB\020\025\022\016\n\nSTOPJ" +
      "OBREP\020\026\022\r\n\tRISKCHECK\020\027\022\020\n\014RISKCHECKREP\020\030" +
      "\022\025\n\021SECURITYCODETABLE\020\031\022\014\n\010SNAPSHOT\020\032\022\017\n",
      "\013TRANSACTION\020\033\022\022\n\016QUERYCODETABLE\020\034\022\024\n\020QU" +
      "ERYSNAPSHOTALL\020\035\022\016\n\nJOBCOMMAND\020\036\022\t\n\005LOGI" +
      "N\020\037\022\014\n\010LOGINREP\020 \022\014\n\010USERAUTH\020!\022\017\n\013USERA" +
      "UTHREP\020\"\022\r\n\tBASICDATA\020#\022\021\n\rPUB_JOBUPDATE" +
      "\020$\022\023\n\017PUB_ORDERUPDATE\020%\022\024\n\020ALGO_QUERYJOB" +
      "ALL\020&\022\022\n\016ALGO_QUERYJOBS\020\'\022\031\n\025ALGO_QUERYJ" +
      "OB4ACCOUNT\020(\022\027\n\023ALGO_QUERYJOBALLREP\020)\022\026\n" +
      "\022ALGO_QUERYORDERALL\020*\022\024\n\020ALGO_QUERYORDER" +
      "S\020+\022\033\n\027ALGO_QUERYORDER4ACCOUNT\020,\022\027\n\023ALGO" +
      "_QUERYORDER4JOB\020-\022\031\n\025ALGO_QUERYORDERALLR",
      "EP\020.\022\034\n\030BASICDATA_STOCKALPHABETA\020/\022\031\n\025BA" +
      "SICDATA_INDEXSTATUS\0200\022\037\n\033BASICDATA_SECUR" +
      "ITYCODETABLE\0201\022\035\n\031BASICDATA_SECTORCODETA" +
      "BLE\0202\022\034\n\030BASICDATA_FUTUREFORECAST\0203\022\033\n\027B" +
      "ASICDATA_INDEXFORECAST\0204\022\033\n\027BASICDATA_ST" +
      "OCKBASEINFO\0205\022\037\n\033BASICDATA_INDEXCONSTITU" +
      "ENTS\0206\022\037\n\033BASICDATA_INDUSCONSTITUENTS\0207\022" +
      "\032\n\026BASICDATA_FUNDINDEXMAP\0208\022 \n\034BASICDATA" +
      "_INDEXPRICEFORECAST\0209\022 \n\034BASICDATA_STOCK" +
      "PRICEFORECAST\020:\022\034\n\030BASICDATA_STOCKRISKVA",
      "LUE\020;\022\032\n\026BASICDATA_SECTORWEIGHT\020<\022\033\n\027BAS" +
      "ICDATA_FUNDALPHABETA\020=\022\034\n\030ALGO_QUERYJOB4" +
      "ACCOUNTREP\020>\022\027\n\023ALGO_QUERYORDERSREP\020?\022\036\n" +
      "\032ALGO_QUERYORDER4ACCOUNTREP\020@\022\032\n\026ALGO_QU" +
      "ERYORDER4JOBREP\020A\022\017\n\013USERHEARTBT\020B\022\022\n\016PU" +
      "BACCOUNTINFO\020F\022\020\n\014PUBPOSITIONS\020I\022\030\n\024QUER" +
      "YPOSITIONSUMMARY\020J\022\033\n\027QUERYPOSITIONSUMMA" +
      "RYREP\020K\022\026\n\022PUBPOSITIONSUMMARY\020L\022\r\n\tPUBTR" +
      "ADES\020O\022\r\n\tPUBORDERS\020R\022\021\n\rQUERYTDPROFIT\020S" +
      "\022\024\n\020QUERYTDPROFITREP\020T\022\017\n\013PUBTDPROFIT\020U\022",
      "\025\n\021ALGO_QUERYJOBSREP\020V\022\021\n\rJOBCOMMANDREP\020" +
      "W\022\030\n\024CONFIG_QUERYPRODLIST\020X\022\033\n\027CONFIG_QU" +
      "ERYPRODLISTREP\020Y\022\034\n\030CONFIG_QUERYACCOUNT4" +
      "PROD\020Z\022\037\n\033CONFIG_QUERYACCOUNT4PRODREP\020[\022" +
      "\031\n\025BASICDATA_MARKETSTYLE\020\\\022\r\n\tSNAPSHOTS\020" +
      "]\022\020\n\014TRANSACTIONS\020^\022\020\n\014RISK_TESTMSG\020_\022\022\n" +
      "\016RISK_OVERNIGHT\020`\022\022\n\016QUERYSNAPSHOTS\020a\022\024\n" +
      "\020QUERYSNAPSHOTREP\020b\022\025\n\021HEDGE_STATEUPDATE" +
      "\020c\022\034\n\030DERIVEDDATA_LFSIGNAL_REQ\020d\022\034\n\030DERI" +
      "VEDDATA_LFSIGNAL_REP\020e\022\023\n\016HEDGE_SETPARAM",
      "\020\203\001\022\026\n\021HEDGE_SETPARAMREP\020\204\001\022\034\n\027HEDGE_SET" +
      "PARAMEXTENDREP\020\205\001\022\023\n\016HEDGE_GETPARAM\020\206\001\022\026" +
      "\n\021HEDGE_GETPARAMREP\020\207\001\022\027\n\022HEDGE_GETREFSI" +
      "GNAL\020\210\001\022\032\n\025HEDGE_GETREFSIGNALREP\020\211\001\022\027\n\022H" +
      "EDGE_CONTRACTCODE\020\212\001\022\032\n\025HEDGE_CONTRACTCO" +
      "DEREP\020\213\001\022\027\n\022HEDGE_GETSFACCOUNT\020\214\001\022\032\n\025HED" +
      "GE_GETSFACCOUNTREP\020\215\001\022\027\n\022QUERY_SNAPLITES" +
      "ALL\020\216\001\022\024\n\017QUERY_SNAPLITES\020\217\001\022\027\n\022QUERY_SN" +
      "APLITESREP\020\220\001\022\027\n\022PUB_SNAPLITEUPDATE\020\221\001\022\021" +
      "\n\014RISK_SETTING\020\222\001\022\024\n\017RISK_SETTINGREP\020\223\001\022",
      "\033\n\026RISK_RISKSETTINGUPDATE\020\224\001\022\036\n\031RISK_RIS" +
      "KSETTINGUPDATEREP\020\225\001\022\031\n\024RISK_GETPOSITION" +
      "BETA\020\226\001\022\034\n\027RISK_GETPOSITIONBETAREP\020\227\001\022\027\n" +
      "\022RISK_GETRISKREASON\020\230\001\022\032\n\025RISK_GETRISKRE" +
      "ASONREP\020\231\001\022\030\n\023RISK_GETRISKSETTING\020\232\001\022\033\n\026" +
      "RISK_GETRISKSETTINGREP\020\233\001\022\033\n\026RISK_GETALL" +
      "RISKSETTING\020\234\001\022\036\n\031RISK_GETALLRISKSETTING" +
      "REP\020\235\001\022\023\n\016PUB_JOBSUMMARY\020\236\001\022!\n\034DERIVEDDA" +
      "TA_ENTRUSTDEPTH_REP\020\237\001\022!\n\034DERIVEDDATA_EN" +
      "TRUSTDEPTH_REQ\020\240\001\022\024\n\017QUERY_THRESHOLD\020\241\001\022",
      "\027\n\022QUERY_THRESHOLDREP\020\242\001\022\024\n\017QUOTE_HEARTB" +
      "EAT\020\243\001\022\024\n\017HFTRADING_LOGIN\020\244\001\022\027\n\022HFTRADIN" +
      "G_LOGINREP\020\245\001\022\033\n\026HFTRADING_ACCOUNTLOGIN\020" +
      "\246\001\022 \n\033HFTRADING_ADDUPDATESTRATEGY\020\247\001\022#\n\036" +
      "HFTRADING_ADDUPDATESTRATEGYREP\020\250\001\022\033\n\026HFT" +
      "RADING_STRATEGYSREQ\020\253\001\022\033\n\026HFTRADING_STRA" +
      "TEGYSREP\020\254\001\022\035\n\030HFTRADING_DELETESTRATEGY\020" +
      "\255\001\022 \n\033HFTRADING_DELETESTRATEGYREP\020\256\001\022\034\n\027" +
      "HFTRADING_STARTSTRATEGY\020\257\001\022 \n\033HFTRADING_" +
      "ACTIONSTRATEGYREP\020\260\001\022\036\n\031HFTRADING_SUSPEN",
      "DSTRATEGY\020\261\001\022\033\n\026HFTRADING_STOPSTRATEGY\020\262" +
      "\001\022\033\n\026HFTRADING_CONTRACTSREQ\020\263\001\022\033\n\026HFTRAD" +
      "ING_CONTRACTSREP\020\264\001\022\036\n\031HFTRADING_STRATEG" +
      "YVIEWPUB\020\265\001\022\033\n\026BASICDATA_FUNDBASEINFO\020\266\001" +
      "\022!\n\034BASICDATA_CLIENTSECTORWEIGHT\020\267\001\022\036\n\031B" +
      "ASICDATA_BASICUPDATETIME\020\270\001\022\035\n\030CONFIG_QU" +
      "ERYFEES4ACCOUNT\020\271\001\022 \n\033CONFIG_QUERYFEES4A" +
      "CCOUNTREP\020\272\001\022!\n\034DERIVEDDATA_MFANDPERCENT" +
      "_REQ\020\273\001\022!\n\034DERIVEDDATA_MFANDPERCENT_REP\020" +
      "\274\001\022$\n\037DERIVEDDATA_RANGEPROJECTION_REQ\020\275\001",
      "\022$\n\037DERIVEDDATA_RANGEPROJECTION_REP\020\276\001\022\037" +
      "\n\032HFTRADING_STRATEGYVIEWSREQ\020\277\001\022\037\n\032HFTRA" +
      "DING_STRATEGYVIEWSREP\020\300\001\022\036\n\031HFTRADING_HF" +
      "QUERYTRADEREQ\020\301\001\022\036\n\031HFTRADING_HFQUERYTRA" +
      "DEREP\020\302\001\022\034\n\027HFTRADING_SPREADDATAPUB\020\303\001\022\034" +
      "\n\027HFTRADING_PROFITDATAPUB\020\304\001\022!\n\034HFTRADIN" +
      "G_QUERYPROFITDATAREQ\020\305\001\022!\n\034HFTRADING_QUE" +
      "RYPROFITDATAREP\020\306\001\022!\n\034HFTRADING_QUERYINS" +
      "TRUMENTREQ\020\307\001\022!\n\034HFTRADING_QUERYINSTRUME" +
      "NTRSP\020\310\001\022\025\n\020REDIS_COMMANDREQ\020\311\001\022\025\n\020REDIS",
      "_COMMANDREP\020\312\001\022%\n RISK_SAVE_COMPANYRISKS" +
      "ETTING_REQ\020\313\001\022%\n RISK_SAVE_COMPANYRISKSE" +
      "TTING_REP\020\314\001\022$\n\037RISK_GET_COMPANYRISKSETT" +
      "ING_REQ\020\315\001\022$\n\037RISK_GET_COMPANYRISKSETTIN" +
      "G_REP\020\316\001\022\016\n\tModifyPwd\020\317\001\022\021\n\014ModifyPwdRep" +
      "\020\320\001\022\023\n\016PUBALLPOSITION\020\321\001\022\017\n\nQueryQuote\020\322" +
      "\001\022\022\n\rQueryQuoteRep\020\323\001\022\020\n\013SYSTEMLOGIN\020\324\001\022" +
      "\023\n\016SYSTEMLOGINREP\020\325\001\022\022\n\rSMM_QUERY_REQ\020\326\001" +
      "\022\022\n\rSMM_QUERY_REP\020\327\001\022\023\n\016SMM_MODIFY_REQ\020\330" +
      "\001\022\023\n\016SMM_MODIFY_REP\020\331\001\022\014\n\007SMM_PUB\020\332\001\022\026\n\021",
      "SMM_KEYPRICES_REQ\020\333\001\022\026\n\021SMM_KEYPRICES_RE" +
      "P\020\334\001\022\n\n\005INDEX\020\335\001\022\t\n\004DDL1\020\336\001\022\020\n\013GATEWAY_S" +
      "UB\020\337\001\022\022\n\rGATEWAY_UNSUB\020\340\001\022\035\n\030BASICDATA_M" +
      "ARKETSTYLEREQ\020\341\001\022\016\n\tDDLSector\020\342\001\022\027\n\022PORT" +
      "FOLIO_EDIT_REQ\020\343\001\022\027\n\022PORTFOLIO_EDIT_RSP\020" +
      "\344\001\022\033\n\026PORTFOLIOITEM_EDIT_REQ\020\345\001\022\033\n\026PORTF" +
      "OLIOITEM_EDIT_RSP\020\346\001\022\032\n\025ACCOUNT_AVAILABL" +
      "E_REQ\020\347\001\022\032\n\025ACCOUNT_AVAILABLE_RSP\020\350\001\022\032\n\025" +
      "ACCOUNT_AVAILABLE_PUB\020\351\001\022\031\n\024USERAUTH_USE" +
      "ROPERATE\020\352\001\022\034\n\027USERAUTH_PRODUCTOPERATE\020\353",
      "\001\022\027\n\022RISK_RISKREPORTREQ\020\354\001\022\027\n\022RISK_RISKR" +
      "EPORTREP\020\355\001\022\t\n\004DDRT\020\356\001\022$\n\037QUERY_SNAPLITE" +
      "SALL_COMPRESS_REQ\020\357\001\022$\n\037QUERY_SNAPLITESA" +
      "LL_COMPRESS_RSP\020\360\001\022\025\n\020ANALYSIS_TCA_REQ\020\361" +
      "\001\022\025\n\020ANALYSIS_TCA_RSP\020\362\001\022!\n\034FSLEND_QUERY" +
      "SECURITYITEM_REQ\020\363\001\022!\n\034FSLEND_QUERYSECUR" +
      "ITYITEM_RSP\020\364\001\022\035\n\030FSLEND_QUERYCONTRACT_R" +
      "EQ\020\365\001\022\035\n\030FSLEND_QUERYCONTRACT_RSP\020\366\001\022\037\n\032" +
      "QUERYPOSITION_COMPRESS_REQ\020\367\001\022\037\n\032QUERYPO" +
      "SITION_COMPRESS_RSP\020\370\001\022\030\n\023QUERYALLACCOUN",
      "T_REQ\020\371\001\022\030\n\023QUERYALLACCOUNT_RSP\020\372\001\022\030\n\023PU" +
      "B_FSLEND_CONTRACT\020\373\001\022\026\n\021LATENCYINDICATOR" +
      "S\020\374\001\022\037\n\032CurrencyEtf_StrategyAddReq\020\375\001\022 \n" +
      "\033CurrencyEtf_StrategyAddResp\020\376\001\022\037\n\032Curre" +
      "ncyEtf_StrategyAddPub\020\377\001\022\"\n\035CurrencyEtf_" +
      "StrategyModifyReq\020\201\002\022#\n\036CurrencyEtf_Stra" +
      "tegyModifyResp\020\202\002\022\"\n\035CurrencyEtf_Strateg" +
      "yModifyPub\020\203\002\022#\n\036CurrencyEtf_StrategyOpe" +
      "rateReq\020\204\002\022$\n\037CurrencyEtf_StrategyOperat" +
      "eResp\020\205\002\022%\n CurrencyEtf_QueryStrategyLis",
      "tReq\020\206\002\022&\n!CurrencyEtf_QueryStrategyList" +
      "Resp\020\207\002\022)\n$CurrencyEtf_QueryOpenPosition" +
      "ListReq\020\210\002\022*\n%CurrencyEtf_QueryOpenPosit" +
      "ionListResp\020\211\002\022)\n$CurrencyEtf_StrategySt" +
      "atusChangedPub\020\212\002\022+\n&CurrencyEtf_Strateg" +
      "yPositionChangedPub\020\213\002\022\026\n\021QUERYACCTINFO_" +
      "REQ\020\214\002\022\026\n\021QUERYACCTINFO_RSP\020\215\002\022#\n\036OPT_QU" +
      "ERYCOMSTRADETAILITEM_REQ\020\216\002\022#\n\036OPT_QUERY" +
      "COMSTRADETAILITEM_RSP\020\217\002\022\034\n\027INSERTCOMBST" +
      "RAORDER_REQ\020\220\002\022\034\n\027INSERTCOMBSTRAORDER_RS",
      "P\020\221\002\022\025\n\020OPT_BS_NORMS_PUB\020\222\002\022\037\n\032OPT_BS_DE" +
      "LTA_PORTFOLIO_PUB\020\223\002\022\033\n\026OPT_BS_DELTA_HED" +
      "GE_PUB\020\224\002\022\030\n\023OPT_UNDL_MARKET_PUB\020\225\002\022\031\n\024A" +
      "CCOUNT_NETVALUE_REQ\020\226\002\022\031\n\024ACCOUNT_NETVAL" +
      "UE_RSP\020\227\002\022#\n\036STRATEGY_QUERYSTRATEGYLIST_" +
      "REQ\020\230\002\022#\n\036STRATEGY_QUERYSTRATEGYLIST_REP" +
      "\020\231\002\022\032\n\025STRATEGY_PUB_STRATEGY\020\234\002\022\032\n\025STRAT" +
      "EGY_PUB_POSITION\020\235\002\022\035\n\030STRATEGY_ADDSTRAT" +
      "EGY_REQ\020\240\002\022\035\n\030STRATEGY_ADDSTRATEGY_REP\020\241" +
      "\002\022\035\n\030STRATEGY_DELSTRATEGY_REQ\020\242\002\022\035\n\030STRA",
      "TEGY_DELSTRATEGY_REP\020\243\002\022 \n\033STRATEGY_MODI" +
      "FYSTRATEGY_REQ\020\244\002\022 \n\033STRATEGY_MODIFYSTRA" +
      "TEGY_REP\020\245\002\022!\n\034STRATEGY_CONTROLSTRATEGY_" +
      "REQ\020\246\002\022!\n\034STRATEGY_CONTROLSTRATEGY_REP\020\247" +
      "\002\022\027\n\022STRATEGY_PUB_TRADE\020\250\002\022\026\n\021STRATEGY_R" +
      "ESERVED\020\261\002\022\037\n\032SET_OPT_STARTEGY_STATE_REQ" +
      "\020\262\002\022\037\n\032SET_OPT_STARTEGY_STATE_RSP\020\263\002\022\033\n\026" +
      "OPT_STARTEGY_STATE_PUB\020\264\002\022\033\n\026LFSIGNAL_AL" +
      "PHABETA_PUB\020\266\002\022\031\n\024OPT_BS_JOB_STATE_PUB\020\267" +
      "\002\022\026\n\021OPT_STRATEGYS_REQ\020\270\002\022\034\n\027OPT_COMBO_S",
      "TRATEGYS_RSP\020\271\002\022\034\n\027OPT_HEDGE_STRATEGYS_R" +
      "SP\020\272\002\022\031\n\024OPT_STRATEGY_DEL_REQ\020\273\002\022\031\n\024OPT_" +
      "STRATEGY_DEL_RSP\020\274\002\022 \n\033OPT_COMBO_STRATEG" +
      "YS_SET_RSP\020\275\002\022 \n\033OPT_HEDGE_STRATEGYS_SET" +
      "_RSP\020\276\002\022 \n\033OPT_COMBO_STRATEGYS_SET_REQ\020\277" +
      "\002\022 \n\033OPT_HEDGE_STRATEGYS_SET_REQ\020\300\002\022\n\n\005O" +
      "RDER\020\301\002\022\017\n\nORDERQUEUE\020\302\002\022)\n$CLIENT_QUERY" +
      "_ORDER_BALANCE_PARAM_REQ\020\303\002\022)\n$CLIENT_QU" +
      "ERY_ORDER_BALANCE_PARAM_RSP\020\304\002\022\031\n\024TRANSF" +
      "ERINANDOUT_REQ\020\305\002\022\031\n\024TRANSFERINANDOUT_RS",
      "P\020\306\002\022\026\n\021QUERY_T0STOCK_REQ\020\307\002\022\026\n\021QUERY_T0" +
      "STOCK_RSP\020\310\002\022\025\n\020SAVE_T0STOCK_REQ\020\311\002\022\025\n\020S" +
      "AVE_T0STOCK_RSP\020\312\002\022\027\n\022PUB_T0STOCK_CHANGE" +
      "\020\313\002\022\026\n\021ACCOUNT_IMPORINFO\020\314\002\022\031\n\024ACCOUNT_I" +
      "MPORINFORSP\020\315\002\032\002\020\001\"\034\n\013MsgCarriers\022\r\n\005ite" +
      "ms\030\001 \003(\014\"n\n\005Error\022\013\n\003msg\030\001 \001(\014\022\r\n\005reqid\030" +
      "\002 \001(\003\022I\n\terrortype\030\003 \001(\0162\'.com.sunquan.z" +
      "mqproto.TypeDef.ErrorType:\rERROR_UNKNOWN" +
      "B\'\n\024com.sunquan.zmqprotoB\017MsgCarrierClas" +
      "sP\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.sunquan.zmqproto.TypeDefClass.getDescriptor(),
        }, assigner);
    internal_static_com_sunquan_zmqproto_MsgCarrier_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_sunquan_zmqproto_MsgCarrier_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sunquan_zmqproto_MsgCarrier_descriptor,
        new java.lang.String[] { "Seqno", "Type", "Message", "Indicator", "Jwt", "Authenticated", "Service", "Pubtopic", "Msgid", "Iscompress", });
    internal_static_com_sunquan_zmqproto_MsgCarriers_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_sunquan_zmqproto_MsgCarriers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sunquan_zmqproto_MsgCarriers_descriptor,
        new java.lang.String[] { "Items", });
    internal_static_com_sunquan_zmqproto_Error_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_sunquan_zmqproto_Error_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_sunquan_zmqproto_Error_descriptor,
        new java.lang.String[] { "Msg", "Reqid", "Errortype", });
    com.sunquan.zmqproto.TypeDefClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
